{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/quiet/source/css/about.css","path":"css/about.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/archive.css","path":"css/archive.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/atom-one-dark.css","path":"css/atom-one-dark.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/categories.css","path":"css/categories.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/food.css","path":"css/food.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/header.css","path":"css/header.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/home.css","path":"css/home.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/links.css","path":"css/links.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/page.css","path":"css/page.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/page_cente.css","path":"css/page_cente.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/tag.css","path":"css/tag.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/tags.css","path":"css/tags.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/image/favicon.ico","path":"image/favicon.ico","modified":1,"renderable":1},{"_id":"themes/quiet/source/image/img.ico","path":"image/img.ico","modified":1,"renderable":1},{"_id":"themes/quiet/source/image/logo.png","path":"image/logo.png","modified":1,"renderable":1},{"_id":"themes/quiet/source/image/img.jpg","path":"image/img.jpg","modified":1,"renderable":1},{"_id":"themes/quiet/source/image/pattern.png","path":"image/pattern.png","modified":1,"renderable":1},{"_id":"themes/quiet/source/image/微信图片_20210605110724.png","path":"image/微信图片_20210605110724.png","modified":1,"renderable":1},{"_id":"themes/quiet/source/image/微信图片_20210605110750.png","path":"image/微信图片_20210605110750.png","modified":1,"renderable":1},{"_id":"themes/quiet/source/js/gotop.js","path":"js/gotop.js","modified":1,"renderable":1},{"_id":"themes/quiet/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/ES6-Map.md","hash":"411b98bcba3a263aa54dcea01d518cfb0c1b5908","modified":1624415129520},{"_id":"source/_posts/ES6-Promise.md","hash":"ab3245efd433c6caac0a79d8788ec6f89b96a250","modified":1624366835023},{"_id":"source/_posts/ES6-Symbol的应用.md","hash":"1dc520524db7ab14d346fd49765660645845fe12","modified":1649040525912},{"_id":"source/_posts/ES6-Symbol类型的认识.md","hash":"bc2ce71ed1f882024e88edff6ce0365d3a21b5bc","modified":1649006275543},{"_id":"source/_posts/ES6-class.md","hash":"60827618aa6799fbd3c3fb757f944b8259980b55","modified":1624415713073},{"_id":"source/_posts/ES6-let和const命令.md","hash":"b6f8ed7cda5c422f44183e409e85cdac9780326b","modified":1623232145376},{"_id":"source/_posts/ES6-get-set.md","hash":"5db0f9dae7e32729efc487066f646eac870349af","modified":1624416538954},{"_id":"source/_posts/ES6-rest参数.md","hash":"5b7c446126eaaf9b0d14e1c7d9387e5cbc33c654","modified":1623232155557},{"_id":"source/_posts/ES6-函数参数的默认值设置.md","hash":"c00211da9c2495340d5c1f403ffeb2043c23d6bc","modified":1623232118509},{"_id":"source/_posts/ES6-变量的解构赋值.md","hash":"451f13ca707a07b3a7af83f2d5bb02bb9be8e9de","modified":1623232087391},{"_id":"source/_posts/ES6-对象方法扩展.md","hash":"599caa756533b2fcf8acb8ea67e7958db7b52d5a","modified":1624422422048},{"_id":"source/_posts/ES6-对象的简化写法.md","hash":"8511cb5a0272c962dceebe556be95ccae20c8cbc","modified":1623232109155},{"_id":"source/_posts/ES6-扩展运算符.md","hash":"8123dc34796c1fb60cf0a7d2eb32dbe678ca63ff","modified":1623232134367},{"_id":"source/_posts/ES6-数值扩展.md","hash":"7e31699b093cd5955a90e878cac822bba2a25ca3","modified":1624422393502},{"_id":"source/_posts/ES6-模板字符串.md","hash":"b608b7ec4944405e44961717902065b2080e2957","modified":1623232140686},{"_id":"source/_posts/ES6-箭头函数.md","hash":"bd74bf5cdb2e5013cec7ce40aa9187ad83137275","modified":1623232124517},{"_id":"source/_posts/ES6-集合.md","hash":"5556774b65d597e429061a202c174efa18e9dbee","modified":1632570927963},{"_id":"source/_posts/ES6-迭代器.md","hash":"6ef8b9e6cdefa3e6bbcc6de87ef8d10f91dbea5c","modified":1623232045093},{"_id":"source/_posts/My-New-Post.md","hash":"07ca438b422458505c49894a674935080104e127","modified":1649005381998},{"_id":"source/_posts/hello-world.md","hash":"546978c7aa20e14e08667d736f8ae3f28fa48988","modified":1622992579802},{"_id":"source/_posts/second.md","hash":"b958112e9f685b795a385288f9b392af464f9ae3","modified":1621147124426},{"_id":"source/_posts/title.md","hash":"e49abdf19d3a1d172df0cda2cd577a08298cc405","modified":1621134833404},{"_id":"source/about/index.md","hash":"9cd9e6c3b2d9df14c2ec9eeee4883e44aae9a536","modified":1649001517713},{"_id":"source/categories/index.md","hash":"e0f8317ea0453171a1e884ca166abf03b747b755","modified":1648887295870},{"_id":"source/links/index.md","hash":"6c6935c231c9f42713ed18f15dade7049d9a1985","modified":1648887275490},{"_id":"source/tags/index.md","hash":"43564b357f48c6fa79cfa856fa3493997d14231f","modified":1648887130147},{"_id":"themes/quiet/.DS_Store","hash":"d6b0bd348c278071914e2dee0dfe4123fecf375f","modified":1648886892867},{"_id":"themes/quiet/LICENSE","hash":"a0da6b64f5ac3c2be67e22af05669c299eaa8c84","modified":1648886892867},{"_id":"themes/quiet/README-EN.md","hash":"8a14c4a1b8880c1b389c18e832ba7e0437c6a480","modified":1648886892868},{"_id":"themes/quiet/README.md","hash":"029fba4d4abe72177ae38e103d49581428ec6575","modified":1648886892868},{"_id":"themes/quiet/_config.yml","hash":"e5ee87d4a8bcff70275b16e588bb0705a3318c60","modified":1649001670189},{"_id":"themes/quiet/layout/.DS_Store","hash":"46cf1797a08a1ea0f0cdb2af9ebf7d59bd6d976a","modified":1648886892868},{"_id":"themes/quiet/layout/404.ejs","hash":"d24c2375e0e927085e6dbeb788fde5e119bcc9b8","modified":1648886892869},{"_id":"themes/quiet/layout/about.ejs","hash":"4e1ec51bfd4823d8f0a2ab4c06c06f79bae8541a","modified":1648886892871},{"_id":"themes/quiet/layout/archive.ejs","hash":"f52c5efa03a863204ddf5921144d2608858e0482","modified":1648886892871},{"_id":"themes/quiet/layout/categories.ejs","hash":"bc3bb7a3276d6aa25b805e73addbea778c198605","modified":1648886892871},{"_id":"themes/quiet/layout/index.ejs","hash":"b36963002a0fafb093db68c77eb0f2d0b5e7ded6","modified":1648886892872},{"_id":"themes/quiet/layout/layout.ejs","hash":"1de4d59c593645e3dd2f7953e3c4dda73606b8c3","modified":1648886892872},{"_id":"themes/quiet/layout/links.ejs","hash":"c1db6ee6b94ac0693926ba64c46d6ddd0cf18c69","modified":1648886892872},{"_id":"themes/quiet/layout/post.ejs","hash":"10c5eab4b9964b3565ab3ee3e793364032ec04da","modified":1648886892872},{"_id":"themes/quiet/layout/tag.ejs","hash":"1fa7d8d5a5db1bd817090f8998d985316f33e2b0","modified":1648886892872},{"_id":"themes/quiet/layout/tags.ejs","hash":"587bd14d96946c117b1ef6d2e612cd20e23b59ab","modified":1648886892872},{"_id":"themes/quiet/source/.DS_Store","hash":"2fe0ee40294946d656b103cef8719c97924075f1","modified":1648886892873},{"_id":"themes/quiet/layout/_partial/.DS_Store","hash":"db62fbf1993ecd5d9e70a49a58be69ac7e7a4485","modified":1648886892869},{"_id":"themes/quiet/layout/_partial/foot.ejs","hash":"46a4066ca2ded09bc14b2b5e722f6916439170a1","modified":1648886892869},{"_id":"themes/quiet/layout/_partial/head.ejs","hash":"d7536b46c02d8acba84d21b8ad62edefb7ce86da","modified":1648886892869},{"_id":"themes/quiet/layout/_partial/header.ejs","hash":"60f6d69505c64f628c9ace9325aa28950730852b","modified":1648886892869},{"_id":"themes/quiet/layout/_partial/home.ejs","hash":"094e3dc189406526d3934894cf0352b26ce28f13","modified":1648886892869},{"_id":"themes/quiet/layout/_partial/post_centent.ejs","hash":"b6bb8b8e04433b37854e8c8df79c72de182f4496","modified":1648886892870},{"_id":"themes/quiet/layout/_partial/post_head.ejs","hash":"be2f5a2d0d91ddb529c0508183d57ad105fedefa","modified":1648886892870},{"_id":"themes/quiet/layout/_partial/post_pn.ejs","hash":"7fab46ce1199e5e792d6f7c597690ad768f9730c","modified":1648886892870},{"_id":"themes/quiet/layout/_widget/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1648886892870},{"_id":"themes/quiet/layout/_widget/analytics.ejs","hash":"c48c85b36c50cd18b018d0d3a08981dfb1a37bf5","modified":1648886892870},{"_id":"themes/quiet/layout/_widget/gotop.ejs","hash":"fdc070e8dbd81198bbd36cdf46e8b7c33ecdeaf0","modified":1648886892871},{"_id":"themes/quiet/layout/_widget/sidebar.ejs","hash":"1e60a534616fdcf97a4d61ef25648af263ffa6e1","modified":1648886892871},{"_id":"themes/quiet/source/css/.DS_Store","hash":"75b22b6a020bdf7a452db2f4d29044b8a88a6661","modified":1648886892873},{"_id":"themes/quiet/source/css/archive.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1648886892873},{"_id":"themes/quiet/source/css/about.css","hash":"d3d7ae17f0571f1cec4514135d644c6590118bd0","modified":1648886892873},{"_id":"themes/quiet/source/css/atom-one-dark.css","hash":"c3e2c329a09062a1702f0f51639e2068a0799fe4","modified":1648886892873},{"_id":"themes/quiet/source/css/food.css","hash":"10a0e21ef9b2e4a6af9328be51e1c0368ca91f4e","modified":1648886892874},{"_id":"themes/quiet/source/css/categories.css","hash":"06b727d6e2e21b1e5ab12de073406517c32dfe93","modified":1648886892874},{"_id":"themes/quiet/source/css/header.css","hash":"e3ce1dbac2e258f0943c5aebdd89b29702246baa","modified":1648886892874},{"_id":"themes/quiet/source/css/home.css","hash":"e474078a73fa75f23f37092f01505dd8063ffc38","modified":1648886892874},{"_id":"themes/quiet/source/css/links.css","hash":"c7afe457cea5d996ee86cfc47174aa114e458fb0","modified":1648886892874},{"_id":"themes/quiet/source/css/page.css","hash":"0514b75a35c93c10826cd861f0dd380d90ba8e41","modified":1648886892874},{"_id":"themes/quiet/source/css/page_cente.css","hash":"b85a224b56e93c6b56058ed49cde58e0bfc1d2e4","modified":1648886892875},{"_id":"themes/quiet/source/css/tag.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1648886892875},{"_id":"themes/quiet/source/css/tags.css","hash":"b2de1e197efba0a058f1a5d37aa014fcfc0016ff","modified":1648886892875},{"_id":"themes/quiet/source/image/.DS_Store","hash":"3128ff56de5645c269da786b475fd357f1db7a5f","modified":1648886892875},{"_id":"themes/quiet/source/image/favicon.ico","hash":"fad2c16f133094e29f9c4aa8a946b7aa200ec98b","modified":1648886892875},{"_id":"themes/quiet/source/image/logo.png","hash":"3487c0299f2f69abc8bbbd5d7c61ad77b311c801","modified":1648886892875},{"_id":"themes/quiet/source/image/img.ico","hash":"f2c09c9bab4f94e8b24a131ee8527e22fba2c6eb","modified":1648888283136},{"_id":"themes/quiet/source/image/img.jpg","hash":"32a6010e5d1e590081eeb9292ac989181bf5421e","modified":1647825928021},{"_id":"themes/quiet/source/image/pattern.png","hash":"e9a79b9b5716c781e8f5acf3462e42fae7f39741","modified":1648886892876},{"_id":"themes/quiet/source/js/.DS_Store","hash":"0f43f1407d3b3df9e865a28f4c9ef13640ad739b","modified":1648886892876},{"_id":"themes/quiet/source/js/gotop.js","hash":"2bd969b8dd7b81626dcd2a3d8a1b1bbb4e0fc33c","modified":1648886892876},{"_id":"themes/quiet/source/js/jquery.min.js","hash":"a9d8678047219b378ddf3addf4b44650b677eec7","modified":1648886892877},{"_id":"source/_posts/ES6-Symbol的应用/微信图片_20210605110750.png","hash":"eea61043c49fddc3b54bb4b6fb9c4eefaeff5a1f","modified":1649006629655},{"_id":"themes/quiet/source/image/微信图片_20210605110750.png","hash":"eea61043c49fddc3b54bb4b6fb9c4eefaeff5a1f","modified":1622862472117},{"_id":"source/_posts/ES6-Symbol的应用/微信图片_20210605110724.png","hash":"3a28cc77fde2be67bedf97880a8eae376a3a58e9","modified":1649006629657},{"_id":"themes/quiet/source/image/微信图片_20210605110724.png","hash":"3a28cc77fde2be67bedf97880a8eae376a3a58e9","modified":1622862465557},{"_id":"public/about/index.html","hash":"ab5615d78c800b3706cff28e0f99138738ac4546","modified":1649040562873},{"_id":"public/categories/index.html","hash":"a3ec4f05efb08e679ab2b4ff4b74e48f570cfcb2","modified":1649040562873},{"_id":"public/links/index.html","hash":"8f7ab957a2764d9cd728579dc643717fdf70bd81","modified":1649040562873},{"_id":"public/tags/index.html","hash":"3d6a8035d8b089fb2827624411555e310b82fbcf","modified":1649040562873},{"_id":"public/2022/04/03/hello-world/index.html","hash":"d67d73025f7dab3a1ad1139f5c7651bba81147c1","modified":1649040562873},{"_id":"public/2021/06/23/ES6-对象方法扩展/index.html","hash":"c03ab64b87fe74a99df2d8c1d8ae4dc47e8fc027","modified":1649040562873},{"_id":"public/2021/06/23/ES6-数值扩展/index.html","hash":"0737c55361dba786a87bde75bdd2cd9c86edbf76","modified":1649040562873},{"_id":"public/2021/06/23/ES6-get-set/index.html","hash":"0ee29553a4e735fa67e01c16ce35a255b9c1a2c2","modified":1649040562873},{"_id":"public/2021/06/23/ES6-Map/index.html","hash":"4ec06c49cae7f9204ea655b6212cd50bf9daa643","modified":1649040562873},{"_id":"public/2021/06/09/ES6-迭代器/index.html","hash":"737786802e9b5469a153953754c690ddb254c31e","modified":1649040562873},{"_id":"public/2021/06/03/ES6-Symbol的应用/index.html","hash":"90f6f0f6a5fb2fda453ffbce3b56adb04ea6e498","modified":1649040562873},{"_id":"public/2021/06/03/ES6-rest参数/index.html","hash":"85efd1c4ec298e4f45575bd33f85405413b513a3","modified":1649040562873},{"_id":"public/2021/05/16/ES6-对象的简化写法/index.html","hash":"385d4dc96459489c70b2e6ec84a22df1d8bfc658","modified":1649040562873},{"_id":"public/2021/05/16/ES6-模板字符串/index.html","hash":"75e6659d69e53e313e156a6de5796e4401010e5c","modified":1649040562873},{"_id":"public/2021/05/16/ES6-变量的解构赋值/index.html","hash":"e2598fee8d3dff7d3f4d185bae4e3dd7cdd49d92","modified":1649040562873},{"_id":"public/2021/05/16/second/index.html","hash":"ce17c0087ffbb569381e413f0a667f91209b5c25","modified":1649040562873},{"_id":"public/2021/05/16/title/index.html","hash":"8765e4e857506a06e831166a56d5c7ace8eca504","modified":1649040562873},{"_id":"public/archives/index.html","hash":"28989fbae0818da3695717114eee0d1ce3b3bb49","modified":1649040562873},{"_id":"public/archives/page/2/index.html","hash":"28989fbae0818da3695717114eee0d1ce3b3bb49","modified":1649040562873},{"_id":"public/archives/page/3/index.html","hash":"28989fbae0818da3695717114eee0d1ce3b3bb49","modified":1649040562873},{"_id":"public/archives/2021/index.html","hash":"28989fbae0818da3695717114eee0d1ce3b3bb49","modified":1649040562873},{"_id":"public/archives/2021/page/2/index.html","hash":"28989fbae0818da3695717114eee0d1ce3b3bb49","modified":1649040562873},{"_id":"public/archives/2021/05/index.html","hash":"28989fbae0818da3695717114eee0d1ce3b3bb49","modified":1649040562873},{"_id":"public/archives/2021/06/index.html","hash":"28989fbae0818da3695717114eee0d1ce3b3bb49","modified":1649040562873},{"_id":"public/archives/2021/06/page/2/index.html","hash":"28989fbae0818da3695717114eee0d1ce3b3bb49","modified":1649040562873},{"_id":"public/archives/2022/index.html","hash":"28989fbae0818da3695717114eee0d1ce3b3bb49","modified":1649040562873},{"_id":"public/archives/2022/04/index.html","hash":"28989fbae0818da3695717114eee0d1ce3b3bb49","modified":1649040562873},{"_id":"public/categories/ES6/index.html","hash":"d2ba7e886dbce76f384ee2ab3dd4d5e04ceaf394","modified":1649040562873},{"_id":"public/categories/正则表达式/index.html","hash":"d2ba7e886dbce76f384ee2ab3dd4d5e04ceaf394","modified":1649040562873},{"_id":"public/index.html","hash":"ed2bffb2c1bd6f96b0be80bfa0a0f1e2a9b6f168","modified":1649040562873},{"_id":"public/page/2/index.html","hash":"0c296cf2fb77461a3a1295688130113d859a2076","modified":1649040562873},{"_id":"public/page/3/index.html","hash":"0ed3fc050ca25064e41826d65b93499b27ad18d0","modified":1649040562873},{"_id":"public/tags/ES6-Map/index.html","hash":"f1a469dd7952d04aec1c6e966f9df8a85d7eb776","modified":1649040562873},{"_id":"public/tags/ES6-Promise/index.html","hash":"b0f3faf7543075e18966c86256a96fe976653d07","modified":1649040562873},{"_id":"public/tags/ES6/index.html","hash":"2e1b98de53f98712402341580fb02a5c12ee0827","modified":1649040562873},{"_id":"public/tags/Symbol/index.html","hash":"0c9d7ab8cc089cf909cd02689c6b11cd56a9e0b2","modified":1649040562873},{"_id":"public/tags/ES6-class/index.html","hash":"c6c1233ff2b82cde529e79eeab796776284bb049","modified":1649040562873},{"_id":"public/tags/ES6-get-set/index.html","hash":"3cc347617ed71caaf74b35f66bc11f9fe45b195f","modified":1649040562873},{"_id":"public/tags/ES6-let和const命令/index.html","hash":"fe854071617523050d4ca346b6d576145937476a","modified":1649040562873},{"_id":"public/tags/ES6-rest参数/index.html","hash":"44af0ab2d688c5e82730bb1d704017ff873462c6","modified":1649040562873},{"_id":"public/tags/ES6-变量的解构赋值/index.html","hash":"1154cc4edc1801c77ca37937d5a4fd894bfe876d","modified":1649040562873},{"_id":"public/tags/ES6-函数参数的默认值设置/index.html","hash":"04dc37e01aeffe919c92a9126f5353d0a06c2073","modified":1649040562873},{"_id":"public/tags/ES6-对象方法扩展/index.html","hash":"f2f5ce22af8b2c43c6342c4b0a2c9c98d3231432","modified":1649040562873},{"_id":"public/tags/ES6-对象的简化写法/index.html","hash":"731a3ea97789f97a059a155de0993ade10f3ceea","modified":1649040562873},{"_id":"public/tags/ES6-扩展运算符/index.html","hash":"90748d499497d95a449b02cde6877d0c7faca95b","modified":1649040562873},{"_id":"public/tags/ES6-数值扩展/index.html","hash":"765eb7f90a799d4c52d651e990774543fbc4ee2c","modified":1649040562873},{"_id":"public/tags/ES6-模板字符串/index.html","hash":"17ec7f1c6a87e671fffe2d3870bf17a7912a2eb4","modified":1649040562873},{"_id":"public/tags/ES6-箭头函数/index.html","hash":"c11b7d1223e2ac00d07e810a8000aaa720f4cfd2","modified":1649040562873},{"_id":"public/tags/ES6-迭代器/index.html","hash":"0dc74fac5d62923a8f4c6dc3c66f7f62429f5cee","modified":1649040562873},{"_id":"public/tags/ES6-集合/index.html","hash":"844c6f57a21086c94b3eabc72f0e22610262de32","modified":1649040562873},{"_id":"public/tags/正则表达式/index.html","hash":"9b278d7638cf151a230fb0937165fafc25b7e385","modified":1649040562873},{"_id":"public/2022/04/02/My-New-Post/index.html","hash":"905f3757f50bc506d154f370b570d917a967693b","modified":1649040562873},{"_id":"public/2021/06/23/ES6-class/index.html","hash":"4b5e265b2db6fb29deee0f2829101dda95851ac1","modified":1649040562873},{"_id":"public/2021/06/22/ES6-集合/index.html","hash":"b10f236fbeeb4260ac0444f3aea990a670867cab","modified":1649040562873},{"_id":"public/2021/06/22/ES6-Promise/index.html","hash":"446d57a7092c8dc859a36cf604de9e54edd80ea2","modified":1649040562873},{"_id":"public/2021/06/03/ES6-Symbol类型的认识/index.html","hash":"6087766914e1ee0884494fd642e8473c20696a2e","modified":1649040562873},{"_id":"public/2021/06/03/ES6-扩展运算符/index.html","hash":"8d3bac3bf4cada1bc3996d4a23be63c407256cf9","modified":1649040562873},{"_id":"public/2021/06/01/ES6-函数参数的默认值设置/index.html","hash":"3573e85a1f3ce30a978198895fb0632a588da1c4","modified":1649040562873},{"_id":"public/2021/05/16/ES6-箭头函数/index.html","hash":"70df8b7f81b187b5b7bfde46d5e64e6b3b845428","modified":1649040562873},{"_id":"public/2021/05/16/ES6-let和const命令/index.html","hash":"3c341cfca0ec0156863ced6f78108dba6bda74c1","modified":1649040562873},{"_id":"public/image/favicon.ico","hash":"fad2c16f133094e29f9c4aa8a946b7aa200ec98b","modified":1649040562873},{"_id":"public/image/logo.png","hash":"3487c0299f2f69abc8bbbd5d7c61ad77b311c801","modified":1649040562873},{"_id":"public/image/img.jpg","hash":"32a6010e5d1e590081eeb9292ac989181bf5421e","modified":1649040562873},{"_id":"public/image/pattern.png","hash":"e9a79b9b5716c781e8f5acf3462e42fae7f39741","modified":1649040562873},{"_id":"public/image/img.ico","hash":"f2c09c9bab4f94e8b24a131ee8527e22fba2c6eb","modified":1649040562873},{"_id":"public/css/about.css","hash":"d3d7ae17f0571f1cec4514135d644c6590118bd0","modified":1649040562873},{"_id":"public/css/archive.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1649040562873},{"_id":"public/css/atom-one-dark.css","hash":"da8603ef348b38d6ef090fa9172a6521e53b6c89","modified":1649040562873},{"_id":"public/css/categories.css","hash":"06b727d6e2e21b1e5ab12de073406517c32dfe93","modified":1649040562873},{"_id":"public/css/food.css","hash":"10a0e21ef9b2e4a6af9328be51e1c0368ca91f4e","modified":1649040562873},{"_id":"public/css/header.css","hash":"e3ce1dbac2e258f0943c5aebdd89b29702246baa","modified":1649040562873},{"_id":"public/css/home.css","hash":"e474078a73fa75f23f37092f01505dd8063ffc38","modified":1649040562873},{"_id":"public/css/links.css","hash":"c7afe457cea5d996ee86cfc47174aa114e458fb0","modified":1649040562873},{"_id":"public/css/page.css","hash":"0514b75a35c93c10826cd861f0dd380d90ba8e41","modified":1649040562873},{"_id":"public/css/tag.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1649040562873},{"_id":"public/css/page_cente.css","hash":"b85a224b56e93c6b56058ed49cde58e0bfc1d2e4","modified":1649040562873},{"_id":"public/css/tags.css","hash":"b2de1e197efba0a058f1a5d37aa014fcfc0016ff","modified":1649040562873},{"_id":"public/js/gotop.js","hash":"2bd969b8dd7b81626dcd2a3d8a1b1bbb4e0fc33c","modified":1649040562873},{"_id":"public/image/微信图片_20210605110750.png","hash":"eea61043c49fddc3b54bb4b6fb9c4eefaeff5a1f","modified":1649040562873},{"_id":"public/2021/06/03/ES6-Symbol的应用/微信图片_20210605110750.png","hash":"eea61043c49fddc3b54bb4b6fb9c4eefaeff5a1f","modified":1649040562873},{"_id":"public/2021/06/03/ES6-Symbol的应用/微信图片_20210605110724.png","hash":"3a28cc77fde2be67bedf97880a8eae376a3a58e9","modified":1649040562873},{"_id":"public/image/微信图片_20210605110724.png","hash":"3a28cc77fde2be67bedf97880a8eae376a3a58e9","modified":1649040562873},{"_id":"public/js/jquery.min.js","hash":"948b382d052e9af0de5353f29f986d3080e7221c","modified":1649040562873}],"Category":[{"name":"ES6","_id":"cl1k46a4w00093gvo4btv69bl"},{"name":"正则表达式","_id":"cl1k46a5k001a3gvo0lgz8bx5"}],"Data":[],"Page":[{"title":"个人简介","date":"2020-11-02T16:00:00.000Z","aubot":"小豪","portrait":"https://cdn.jsdelivr.net/gh/duogongneng/MyBlogImg/imgIMG_7327.jpeg","describe":"一个阳光快乐的BOY,在正合适的年龄里希望遇见正好的你。","type":"about","layout":"about","author":"79bk.cn","_content":"","source":"about/index.md","raw":"---\ntitle: 个人简介\ndate: 2020-11-03\naubot: 小豪\nportrait: 'https://cdn.jsdelivr.net/gh/duogongneng/MyBlogImg/imgIMG_7327.jpeg'\ndescribe: '一个阳光快乐的BOY,在正合适的年龄里希望遇见正好的你。'\ntype: \"about\"\nlayout: \"about\"\nauthor: 79bk.cn\n---","updated":"2022-04-03T15:58:37.713Z","path":"about/index.html","comments":1,"_id":"cl1k46a4j00003gvo7fj5fjnr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"文章分类","date":"2020-11-01T16:00:00.000Z","type":"categories","layout":"categories","author":"79bk.cn","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2020-11-02\ntype: categories\nlayout: categories\nauthor: 79bk.cn\n---","updated":"2022-04-02T08:14:55.870Z","path":"categories/index.html","comments":1,"_id":"cl1k46a4o00023gvo9ka76z3d","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"友情链接","date":"2020-09-18T16:00:00.000Z","type":"links","layout":"links","author":"79bk.cn","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\ndate: 2020-09-19\ntype: \"links\"\nlayout: \"links\"\nauthor: 79bk.cn\n---","updated":"2022-04-02T08:14:35.490Z","path":"links/index.html","comments":1,"_id":"cl1k46a4s00053gvoa18kakvk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-09-19T08:19:22.000Z","layout":"tags","author":"79bk.cn","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-09-19 16:19:22\nlayout: \"tags\"\nauthor: 79bk.cn\n---","updated":"2022-04-02T08:12:10.147Z","path":"tags/index.html","comments":1,"_id":"cl1k46a4u00073gvofai9cf5a","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ES6-Map","date":"2021-06-23T02:17:04.000Z","_content":"### 定义\nES6提供了Map数据结构。它类似于对象，也是键值对的集合。但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。Map也实现了iterator接口，所以可以使用『扩展运算符』和「for…of…』进行遍历。Map的属性和方法。\n\n```bash\n    <script>\n        let m = new Map();\n        m.set(\"name\",\"xiaohao\");\n        m.set(\"change\",function () {\n            console.log(\"nihao\");\n          });\n        let key = {\n            shcool:'huaguang'\n        };\n        m.set(key,['北京','上海','广州']); //可以把对象当作一个键s\n          console.log(m);\n\n          //size\n          console.log(m.size);\n\n          //delete\n          m.delete('name');//根据键名删除\n\n          //获取\n          console.log(m.get('change'));\n          console.log(m.get(key));\n\n          //清空\n        //   m.clear();\n\n          //遍历\n          for(let v of m){\n              console.log(v);\n          }\n    </script>\n```","source":"_posts/ES6-Map.md","raw":"---\ntitle: ES6-Map\ndate: 2021-06-23 10:17:04\ntags:  ES6 Map\n---\n### 定义\nES6提供了Map数据结构。它类似于对象，也是键值对的集合。但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。Map也实现了iterator接口，所以可以使用『扩展运算符』和「for…of…』进行遍历。Map的属性和方法。\n\n```bash\n    <script>\n        let m = new Map();\n        m.set(\"name\",\"xiaohao\");\n        m.set(\"change\",function () {\n            console.log(\"nihao\");\n          });\n        let key = {\n            shcool:'huaguang'\n        };\n        m.set(key,['北京','上海','广州']); //可以把对象当作一个键s\n          console.log(m);\n\n          //size\n          console.log(m.size);\n\n          //delete\n          m.delete('name');//根据键名删除\n\n          //获取\n          console.log(m.get('change'));\n          console.log(m.get(key));\n\n          //清空\n        //   m.clear();\n\n          //遍历\n          for(let v of m){\n              console.log(v);\n          }\n    </script>\n```","slug":"ES6-Map","published":1,"updated":"2021-06-23T02:25:29.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a4l00013gvohkixftbd","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>ES6提供了Map数据结构。它类似于对象，也是键值对的集合。但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。Map也实现了iterator接口，所以可以使用『扩展运算符』和「for…of…』进行遍历。Map的属性和方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> m = new Map();</span><br><span class=\"line\">    m.set(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;xiaohao&quot;</span>);</span><br><span class=\"line\">    m.set(<span class=\"string\">&quot;change&quot;</span>,<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">&quot;nihao&quot;</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">let</span> key = &#123;</span><br><span class=\"line\">        shcool:<span class=\"string\">&#x27;huaguang&#x27;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    m.set(key,[<span class=\"string\">&#x27;北京&#x27;</span>,<span class=\"string\">&#x27;上海&#x27;</span>,<span class=\"string\">&#x27;广州&#x27;</span>]); //可以把对象当作一个键s</span><br><span class=\"line\">      console.log(m);</span><br><span class=\"line\"></span><br><span class=\"line\">      //size</span><br><span class=\"line\">      console.log(m.size);</span><br><span class=\"line\"></span><br><span class=\"line\">      //delete</span><br><span class=\"line\">      m.delete(<span class=\"string\">&#x27;name&#x27;</span>);//根据键名删除</span><br><span class=\"line\"></span><br><span class=\"line\">      //获取</span><br><span class=\"line\">      console.log(m.get(<span class=\"string\">&#x27;change&#x27;</span>));</span><br><span class=\"line\">      console.log(m.get(key));</span><br><span class=\"line\"></span><br><span class=\"line\">      //清空</span><br><span class=\"line\">    //   m.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">      //遍历</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> v of m)&#123;</span><br><span class=\"line\">          console.log(v);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>ES6提供了Map数据结构。它类似于对象，也是键值对的集合。但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。Map也实现了iterator接口，所以可以使用『扩展运算符』和「for…of…』进行遍历。Map的属性和方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> m = new Map();</span><br><span class=\"line\">    m.set(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;xiaohao&quot;</span>);</span><br><span class=\"line\">    m.set(<span class=\"string\">&quot;change&quot;</span>,<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">&quot;nihao&quot;</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">let</span> key = &#123;</span><br><span class=\"line\">        shcool:<span class=\"string\">&#x27;huaguang&#x27;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    m.set(key,[<span class=\"string\">&#x27;北京&#x27;</span>,<span class=\"string\">&#x27;上海&#x27;</span>,<span class=\"string\">&#x27;广州&#x27;</span>]); //可以把对象当作一个键s</span><br><span class=\"line\">      console.log(m);</span><br><span class=\"line\"></span><br><span class=\"line\">      //size</span><br><span class=\"line\">      console.log(m.size);</span><br><span class=\"line\"></span><br><span class=\"line\">      //delete</span><br><span class=\"line\">      m.delete(<span class=\"string\">&#x27;name&#x27;</span>);//根据键名删除</span><br><span class=\"line\"></span><br><span class=\"line\">      //获取</span><br><span class=\"line\">      console.log(m.get(<span class=\"string\">&#x27;change&#x27;</span>));</span><br><span class=\"line\">      console.log(m.get(key));</span><br><span class=\"line\"></span><br><span class=\"line\">      //清空</span><br><span class=\"line\">    //   m.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">      //遍历</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> v of m)&#123;</span><br><span class=\"line\">          console.log(v);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ES6-Promise","date":"2021-06-22T10:46:56.000Z","_content":"定义：Promise是ES6引入的异步编程的新解决方案。语法上 Promise是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果。\n```bash\n<script>\n        const p = new Promise(function (resolve,reject) {\n            setTimeout(function () {\n                //\n                let data = '数据库中用户的数据';\n                // 调用resolve,成功\n                resolve(data);\n                // let err = '数据库读取失败';\n                // reject(err)\n              },1000);\n          });\n\n          //调用promise对象的then方法\n          p.then(function (value) { //成功的话调用第一个，失败就调用第二个\n            console.log(value);\n            },\n            function (reason) {\n                // console.log(reason);\n          })\n    </script>\n```\n### Promise的then()方法\n<!-- more -->\n```bash\n        <script>\n            const p =new Promise((resolve, reject) =>{\n                setTimeout(()=>{\n                    resolve('用户数据');\n                })\n            });\n\n        //then（）函数返回的实际也是一个Promise对象\n        //1.当回调后，返回的是非Promise类型的属性时，状态为fulfilled，then（）函数的返回值为对象的成功值，如reutnr      123，返回的Promise对象值为123，如果没有返回值，是undefined\n\n        //2.当回调后，返回的是Promise类型的对象时，then（）函数的返回值为这个Promise对象的状态值\n\n        //3.当回调后，如果抛出的异常，则then（）函数的返回值状态也是rejected\n            let result = p.then(value => {\n                console.log(value)\n                // return 123;\n                // return new Promise((resolve, reject) => {\n                //     resolve('ok')\n                // })\n                throw 123\n            },reason => {\n                console.log(reason)\n            })\n            console.log(result);\n        </script>\n```\n### promise的catch()方法\n```bash\n<script>\n    const p = new Promise((resolve,reject)=>{\n        setTimeout(() => {\n            reject('失败');\n        }, 1000);\n    });\n\n    p.then(function (value) {  },function (reason) {\n        console.log(reason);\n      });\n      p.catch(function (reason) { \n          console.warn(reason);\n       })\n</script>\n```\n\n### 使用Promise封装Ajax\n```bash\n<script>\n        //使用原始ajax\n        // 1.创建对象\n        const xhr = new XMLHttpRequest();\n        //2.初始化\n        xhr.open(\"GET\",\"https://api.apiopen.top/getJoke\");\n        //3.发送\n        xhr.send();\n        //4.绑定 事件，处理响应结果\n        xhr.onreadystatechange = function () {\n            if(xhr.readyState === 4){\n                //判断响应状态码 200-299\n                if(xhr.status >= 200 && xhr.status < 300){\n                    //表示成功\n                    console.log(xhr.response);\n                }else{\n                    //如果失败\n                    console.error(xhr.status);\n                }\n            }\n          }\n\n        //使用promise封装\n        const p = new Promise((resolve,reject)=>{\n        // 1.创建对象\n        const xhr = new XMLHttpRequest();\n        //2.初始化\n        xhr.open(\"GET\",\"https://api.apiopen.top/getJoke\");\n        //3.发送\n        xhr.send();\n        //4.绑定 事件，处理响应结果\n        xhr.onreadystatechange = function () {\n            if(xhr.readyState === 4){\n                //判断响应状态码 200-299\n                if(xhr.status >= 200 && xhr.status < 300){\n                    //表示成功\n                    resolve(xhr.response);\n                }else{\n                    //如果失败\n                    reject(xhr.status);\n                }\n            }\n          }\n          });\n          p.then(function (value) {\n              console.log(value);\n            },\n            function (reason) {\n                console.error(reason);\n              })\n    </script>\n```\n\n\n","source":"_posts/ES6-Promise.md","raw":"---\ntitle: ES6-Promise\ndate: 2021-06-22 18:46:56\ntags: ES6 Promise\n---\n定义：Promise是ES6引入的异步编程的新解决方案。语法上 Promise是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果。\n```bash\n<script>\n        const p = new Promise(function (resolve,reject) {\n            setTimeout(function () {\n                //\n                let data = '数据库中用户的数据';\n                // 调用resolve,成功\n                resolve(data);\n                // let err = '数据库读取失败';\n                // reject(err)\n              },1000);\n          });\n\n          //调用promise对象的then方法\n          p.then(function (value) { //成功的话调用第一个，失败就调用第二个\n            console.log(value);\n            },\n            function (reason) {\n                // console.log(reason);\n          })\n    </script>\n```\n### Promise的then()方法\n<!-- more -->\n```bash\n        <script>\n            const p =new Promise((resolve, reject) =>{\n                setTimeout(()=>{\n                    resolve('用户数据');\n                })\n            });\n\n        //then（）函数返回的实际也是一个Promise对象\n        //1.当回调后，返回的是非Promise类型的属性时，状态为fulfilled，then（）函数的返回值为对象的成功值，如reutnr      123，返回的Promise对象值为123，如果没有返回值，是undefined\n\n        //2.当回调后，返回的是Promise类型的对象时，then（）函数的返回值为这个Promise对象的状态值\n\n        //3.当回调后，如果抛出的异常，则then（）函数的返回值状态也是rejected\n            let result = p.then(value => {\n                console.log(value)\n                // return 123;\n                // return new Promise((resolve, reject) => {\n                //     resolve('ok')\n                // })\n                throw 123\n            },reason => {\n                console.log(reason)\n            })\n            console.log(result);\n        </script>\n```\n### promise的catch()方法\n```bash\n<script>\n    const p = new Promise((resolve,reject)=>{\n        setTimeout(() => {\n            reject('失败');\n        }, 1000);\n    });\n\n    p.then(function (value) {  },function (reason) {\n        console.log(reason);\n      });\n      p.catch(function (reason) { \n          console.warn(reason);\n       })\n</script>\n```\n\n### 使用Promise封装Ajax\n```bash\n<script>\n        //使用原始ajax\n        // 1.创建对象\n        const xhr = new XMLHttpRequest();\n        //2.初始化\n        xhr.open(\"GET\",\"https://api.apiopen.top/getJoke\");\n        //3.发送\n        xhr.send();\n        //4.绑定 事件，处理响应结果\n        xhr.onreadystatechange = function () {\n            if(xhr.readyState === 4){\n                //判断响应状态码 200-299\n                if(xhr.status >= 200 && xhr.status < 300){\n                    //表示成功\n                    console.log(xhr.response);\n                }else{\n                    //如果失败\n                    console.error(xhr.status);\n                }\n            }\n          }\n\n        //使用promise封装\n        const p = new Promise((resolve,reject)=>{\n        // 1.创建对象\n        const xhr = new XMLHttpRequest();\n        //2.初始化\n        xhr.open(\"GET\",\"https://api.apiopen.top/getJoke\");\n        //3.发送\n        xhr.send();\n        //4.绑定 事件，处理响应结果\n        xhr.onreadystatechange = function () {\n            if(xhr.readyState === 4){\n                //判断响应状态码 200-299\n                if(xhr.status >= 200 && xhr.status < 300){\n                    //表示成功\n                    resolve(xhr.response);\n                }else{\n                    //如果失败\n                    reject(xhr.status);\n                }\n            }\n          }\n          });\n          p.then(function (value) {\n              console.log(value);\n            },\n            function (reason) {\n                console.error(reason);\n              })\n    </script>\n```\n\n\n","slug":"ES6-Promise","published":1,"updated":"2021-06-22T13:00:35.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a4p00033gvobtu47g8t","content":"<p>定义：Promise是ES6引入的异步编程的新解决方案。语法上 Promise是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        const p = new Promise(<span class=\"keyword\">function</span> (resolve,reject) &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">                //</span><br><span class=\"line\">                <span class=\"built_in\">let</span> data = <span class=\"string\">&#x27;数据库中用户的数据&#x27;</span>;</span><br><span class=\"line\">                // 调用resolve,成功</span><br><span class=\"line\">                resolve(data);</span><br><span class=\"line\">                // <span class=\"built_in\">let</span> err = <span class=\"string\">&#x27;数据库读取失败&#x27;</span>;</span><br><span class=\"line\">                // reject(err)</span><br><span class=\"line\">              &#125;,1000);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">          //调用promise对象的<span class=\"keyword\">then</span>方法</span><br><span class=\"line\">          p.then(<span class=\"keyword\">function</span> (value) &#123; //成功的话调用第一个，失败就调用第二个</span><br><span class=\"line\">            console.log(value);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"keyword\">function</span> (reason) &#123;</span><br><span class=\"line\">                // console.log(reason);</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise的then-方法\"><a href=\"#Promise的then-方法\" class=\"headerlink\" title=\"Promise的then()方法\"></a>Promise的then()方法</h3><span id=\"more\"></span>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    const p =new Promise((resolve, reject) =&gt;&#123;</span><br><span class=\"line\">        setTimeout(()=&gt;&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">&#x27;用户数据&#x27;</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//then（）函数返回的实际也是一个Promise对象</span><br><span class=\"line\">//1.当回调后，返回的是非Promise类型的属性时，状态为fulfilled，<span class=\"keyword\">then</span>（）函数的返回值为对象的成功值，如reutnr      123，返回的Promise对象值为123，如果没有返回值，是undefined</span><br><span class=\"line\"></span><br><span class=\"line\">//2.当回调后，返回的是Promise类型的对象时，<span class=\"keyword\">then</span>（）函数的返回值为这个Promise对象的状态值</span><br><span class=\"line\"></span><br><span class=\"line\">//3.当回调后，如果抛出的异常，则<span class=\"keyword\">then</span>（）函数的返回值状态也是rejected</span><br><span class=\"line\">    <span class=\"built_in\">let</span> result = p.then(value =&gt; &#123;</span><br><span class=\"line\">        console.log(value)</span><br><span class=\"line\">        // <span class=\"built_in\">return</span> 123;</span><br><span class=\"line\">        // <span class=\"built_in\">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">        //     resolve(<span class=\"string\">&#x27;ok&#x27;</span>)</span><br><span class=\"line\">        // &#125;)</span><br><span class=\"line\">        throw 123</span><br><span class=\"line\">    &#125;,reason =&gt; &#123;</span><br><span class=\"line\">        console.log(reason)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    console.log(result);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"promise的catch-方法\"><a href=\"#promise的catch-方法\" class=\"headerlink\" title=\"promise的catch()方法\"></a>promise的catch()方法</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    const p = new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            reject(<span class=\"string\">&#x27;失败&#x27;</span>);</span><br><span class=\"line\">        &#125;, 1000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    p.then(<span class=\"keyword\">function</span> (value) &#123;  &#125;,<span class=\"keyword\">function</span> (reason) &#123;</span><br><span class=\"line\">        console.log(reason);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      p.catch(<span class=\"keyword\">function</span> (reason) &#123; </span><br><span class=\"line\">          console.warn(reason);</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用Promise封装Ajax\"><a href=\"#使用Promise封装Ajax\" class=\"headerlink\" title=\"使用Promise封装Ajax\"></a>使用Promise封装Ajax</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        //使用原始ajax</span><br><span class=\"line\">        // 1.创建对象</span><br><span class=\"line\">        const xhr = new XMLHttpRequest();</span><br><span class=\"line\">        //2.初始化</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class=\"line\">        //3.发送</span><br><span class=\"line\">        xhr.send();</span><br><span class=\"line\">        //4.绑定 事件，处理响应结果</span><br><span class=\"line\">        xhr.onreadystatechange = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === 4)&#123;</span><br><span class=\"line\">                //判断响应状态码 200-299</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class=\"line\">                    //表示成功</span><br><span class=\"line\">                    console.log(xhr.response);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    //如果失败</span><br><span class=\"line\">                    console.error(xhr.status);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //使用promise封装</span><br><span class=\"line\">        const p = new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">        // 1.创建对象</span><br><span class=\"line\">        const xhr = new XMLHttpRequest();</span><br><span class=\"line\">        //2.初始化</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class=\"line\">        //3.发送</span><br><span class=\"line\">        xhr.send();</span><br><span class=\"line\">        //4.绑定 事件，处理响应结果</span><br><span class=\"line\">        xhr.onreadystatechange = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === 4)&#123;</span><br><span class=\"line\">                //判断响应状态码 200-299</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class=\"line\">                    //表示成功</span><br><span class=\"line\">                    resolve(xhr.response);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    //如果失败</span><br><span class=\"line\">                    reject(xhr.status);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          p.then(<span class=\"keyword\">function</span> (value) &#123;</span><br><span class=\"line\">              console.log(value);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"keyword\">function</span> (reason) &#123;</span><br><span class=\"line\">                console.error(reason);</span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"<p>定义：Promise是ES6引入的异步编程的新解决方案。语法上 Promise是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        const p = new Promise(<span class=\"keyword\">function</span> (resolve,reject) &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">                //</span><br><span class=\"line\">                <span class=\"built_in\">let</span> data = <span class=\"string\">&#x27;数据库中用户的数据&#x27;</span>;</span><br><span class=\"line\">                // 调用resolve,成功</span><br><span class=\"line\">                resolve(data);</span><br><span class=\"line\">                // <span class=\"built_in\">let</span> err = <span class=\"string\">&#x27;数据库读取失败&#x27;</span>;</span><br><span class=\"line\">                // reject(err)</span><br><span class=\"line\">              &#125;,1000);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">          //调用promise对象的<span class=\"keyword\">then</span>方法</span><br><span class=\"line\">          p.then(<span class=\"keyword\">function</span> (value) &#123; //成功的话调用第一个，失败就调用第二个</span><br><span class=\"line\">            console.log(value);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"keyword\">function</span> (reason) &#123;</span><br><span class=\"line\">                // console.log(reason);</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise的then-方法\"><a href=\"#Promise的then-方法\" class=\"headerlink\" title=\"Promise的then()方法\"></a>Promise的then()方法</h3>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    const p =new Promise((resolve, reject) =&gt;&#123;</span><br><span class=\"line\">        setTimeout(()=&gt;&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">&#x27;用户数据&#x27;</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//then（）函数返回的实际也是一个Promise对象</span><br><span class=\"line\">//1.当回调后，返回的是非Promise类型的属性时，状态为fulfilled，<span class=\"keyword\">then</span>（）函数的返回值为对象的成功值，如reutnr      123，返回的Promise对象值为123，如果没有返回值，是undefined</span><br><span class=\"line\"></span><br><span class=\"line\">//2.当回调后，返回的是Promise类型的对象时，<span class=\"keyword\">then</span>（）函数的返回值为这个Promise对象的状态值</span><br><span class=\"line\"></span><br><span class=\"line\">//3.当回调后，如果抛出的异常，则<span class=\"keyword\">then</span>（）函数的返回值状态也是rejected</span><br><span class=\"line\">    <span class=\"built_in\">let</span> result = p.then(value =&gt; &#123;</span><br><span class=\"line\">        console.log(value)</span><br><span class=\"line\">        // <span class=\"built_in\">return</span> 123;</span><br><span class=\"line\">        // <span class=\"built_in\">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">        //     resolve(<span class=\"string\">&#x27;ok&#x27;</span>)</span><br><span class=\"line\">        // &#125;)</span><br><span class=\"line\">        throw 123</span><br><span class=\"line\">    &#125;,reason =&gt; &#123;</span><br><span class=\"line\">        console.log(reason)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    console.log(result);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"promise的catch-方法\"><a href=\"#promise的catch-方法\" class=\"headerlink\" title=\"promise的catch()方法\"></a>promise的catch()方法</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    const p = new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            reject(<span class=\"string\">&#x27;失败&#x27;</span>);</span><br><span class=\"line\">        &#125;, 1000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    p.then(<span class=\"keyword\">function</span> (value) &#123;  &#125;,<span class=\"keyword\">function</span> (reason) &#123;</span><br><span class=\"line\">        console.log(reason);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      p.catch(<span class=\"keyword\">function</span> (reason) &#123; </span><br><span class=\"line\">          console.warn(reason);</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用Promise封装Ajax\"><a href=\"#使用Promise封装Ajax\" class=\"headerlink\" title=\"使用Promise封装Ajax\"></a>使用Promise封装Ajax</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        //使用原始ajax</span><br><span class=\"line\">        // 1.创建对象</span><br><span class=\"line\">        const xhr = new XMLHttpRequest();</span><br><span class=\"line\">        //2.初始化</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class=\"line\">        //3.发送</span><br><span class=\"line\">        xhr.send();</span><br><span class=\"line\">        //4.绑定 事件，处理响应结果</span><br><span class=\"line\">        xhr.onreadystatechange = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === 4)&#123;</span><br><span class=\"line\">                //判断响应状态码 200-299</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class=\"line\">                    //表示成功</span><br><span class=\"line\">                    console.log(xhr.response);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    //如果失败</span><br><span class=\"line\">                    console.error(xhr.status);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //使用promise封装</span><br><span class=\"line\">        const p = new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">        // 1.创建对象</span><br><span class=\"line\">        const xhr = new XMLHttpRequest();</span><br><span class=\"line\">        //2.初始化</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class=\"line\">        //3.发送</span><br><span class=\"line\">        xhr.send();</span><br><span class=\"line\">        //4.绑定 事件，处理响应结果</span><br><span class=\"line\">        xhr.onreadystatechange = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === 4)&#123;</span><br><span class=\"line\">                //判断响应状态码 200-299</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class=\"line\">                    //表示成功</span><br><span class=\"line\">                    resolve(xhr.response);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    //如果失败</span><br><span class=\"line\">                    reject(xhr.status);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          p.then(<span class=\"keyword\">function</span> (value) &#123;</span><br><span class=\"line\">              console.log(value);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"keyword\">function</span> (reason) &#123;</span><br><span class=\"line\">                console.error(reason);</span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ES6-Symbol类型的认识","date":"2021-06-03T06:42:43.000Z","_content":"除了定义自己使用的Symbol值以外，ES6还提供了11个内置的Symbol值，指向语言内部使用的方法\n![alt](./ES6-Symbol%E7%9A%84%E5%BA%94%E7%94%A8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210605110724.png)\n<!-- more -->\n![alt](./ES6-Symbol%E7%9A%84%E5%BA%94%E7%94%A8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210605110750.png)\n\n```bash\nclass Person {\n    static [Symbol.hasInstance](param){\n        console.log(param);\n        console.log(\"我被用来检测了\")；\n        return false;\n    }\n}\nlet o = {};\nconsole.log(o instanceof Person); //我被用来检测了，false\n```\n\n### 给对象添加方法方式一：\n```bash\nlet game = {\n    name : 'ran'\n}\nlet methods = {\n    up:Symbol()\n    down:Symbol()\n}\ngame[methods.up]=function(){\n    console.log('aaa');\n}\ngame[methods.down]=function(){\n    console.log('bbb');\n}\nconsole.log(game)    // name: 'ran',Symbol(),Symbol()\n```\n\n### 给对象添加方法方式二:\n```bash\nlet youxi = {\n    name: '狼人杀'，\n    [Symbol('say')]:function(){\n        console.log('阿萨德')\n    }\n}\nconsole.log(youxi)    // name:'狼人杀',Symbol(say)\n```\n","source":"_posts/ES6-Symbol的应用.md","raw":"---\ntitle: ES6-Symbol类型的认识\ncategories: ES6\ndate: 2021-06-03 14:42:43\ntags: \n    - ES6 \n    - Symbol\n---\n除了定义自己使用的Symbol值以外，ES6还提供了11个内置的Symbol值，指向语言内部使用的方法\n![alt](./ES6-Symbol%E7%9A%84%E5%BA%94%E7%94%A8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210605110724.png)\n<!-- more -->\n![alt](./ES6-Symbol%E7%9A%84%E5%BA%94%E7%94%A8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210605110750.png)\n\n```bash\nclass Person {\n    static [Symbol.hasInstance](param){\n        console.log(param);\n        console.log(\"我被用来检测了\")；\n        return false;\n    }\n}\nlet o = {};\nconsole.log(o instanceof Person); //我被用来检测了，false\n```\n\n### 给对象添加方法方式一：\n```bash\nlet game = {\n    name : 'ran'\n}\nlet methods = {\n    up:Symbol()\n    down:Symbol()\n}\ngame[methods.up]=function(){\n    console.log('aaa');\n}\ngame[methods.down]=function(){\n    console.log('bbb');\n}\nconsole.log(game)    // name: 'ran',Symbol(),Symbol()\n```\n\n### 给对象添加方法方式二:\n```bash\nlet youxi = {\n    name: '狼人杀'，\n    [Symbol('say')]:function(){\n        console.log('阿萨德')\n    }\n}\nconsole.log(youxi)    // name:'狼人杀',Symbol(say)\n```\n","slug":"ES6-Symbol的应用","published":1,"updated":"2022-04-04T02:48:45.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a4s00063gvod7uzhrfu","content":"<p>除了定义自己使用的Symbol值以外，ES6还提供了11个内置的Symbol值，指向语言内部使用的方法<br><img src=\"./ES6-Symbol%E7%9A%84%E5%BA%94%E7%94%A8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210605110724.png\" alt=\"alt\"></p>\n<span id=\"more\"></span>\n<p><img src=\"./ES6-Symbol%E7%9A%84%E5%BA%94%E7%94%A8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210605110750.png\" alt=\"alt\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">    static [Symbol.hasInstance](param)&#123;</span><br><span class=\"line\">        console.log(param);</span><br><span class=\"line\">        console.log(<span class=\"string\">&quot;我被用来检测了&quot;</span>)；</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">let</span> o = &#123;&#125;;</span><br><span class=\"line\">console.log(o instanceof Person); //我被用来检测了，<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给对象添加方法方式一：\"><a href=\"#给对象添加方法方式一：\" class=\"headerlink\" title=\"给对象添加方法方式一：\"></a>给对象添加方法方式一：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> game = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">&#x27;ran&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">let</span> methods = &#123;</span><br><span class=\"line\">    up:Symbol()</span><br><span class=\"line\">    down:Symbol()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">game[methods.up]=<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">&#x27;aaa&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">game[methods.down]=<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">&#x27;bbb&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(game)    // name: <span class=\"string\">&#x27;ran&#x27;</span>,Symbol(),Symbol()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给对象添加方法方式二\"><a href=\"#给对象添加方法方式二\" class=\"headerlink\" title=\"给对象添加方法方式二:\"></a>给对象添加方法方式二:</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> youxi = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;狼人杀&#x27;</span>，</span><br><span class=\"line\">    [Symbol(<span class=\"string\">&#x27;say&#x27;</span>)]:<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">&#x27;阿萨德&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(youxi)    // name:<span class=\"string\">&#x27;狼人杀&#x27;</span>,Symbol(say)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>除了定义自己使用的Symbol值以外，ES6还提供了11个内置的Symbol值，指向语言内部使用的方法<br><img src=\"./ES6-Symbol%E7%9A%84%E5%BA%94%E7%94%A8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210605110724.png\" alt=\"alt\"></p>","more":"<p><img src=\"./ES6-Symbol%E7%9A%84%E5%BA%94%E7%94%A8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210605110750.png\" alt=\"alt\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">    static [Symbol.hasInstance](param)&#123;</span><br><span class=\"line\">        console.log(param);</span><br><span class=\"line\">        console.log(<span class=\"string\">&quot;我被用来检测了&quot;</span>)；</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">let</span> o = &#123;&#125;;</span><br><span class=\"line\">console.log(o instanceof Person); //我被用来检测了，<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给对象添加方法方式一：\"><a href=\"#给对象添加方法方式一：\" class=\"headerlink\" title=\"给对象添加方法方式一：\"></a>给对象添加方法方式一：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> game = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">&#x27;ran&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">let</span> methods = &#123;</span><br><span class=\"line\">    up:Symbol()</span><br><span class=\"line\">    down:Symbol()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">game[methods.up]=<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">&#x27;aaa&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">game[methods.down]=<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">&#x27;bbb&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(game)    // name: <span class=\"string\">&#x27;ran&#x27;</span>,Symbol(),Symbol()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给对象添加方法方式二\"><a href=\"#给对象添加方法方式二\" class=\"headerlink\" title=\"给对象添加方法方式二:\"></a>给对象添加方法方式二:</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> youxi = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;狼人杀&#x27;</span>，</span><br><span class=\"line\">    [Symbol(<span class=\"string\">&#x27;say&#x27;</span>)]:<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">&#x27;阿萨德&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(youxi)    // name:<span class=\"string\">&#x27;狼人杀&#x27;</span>,Symbol(say)</span><br></pre></td></tr></table></figure>"},{"title":"ES6-Symbol类型的认识","date":"2021-06-03T06:42:43.000Z","_content":"### 什么是Symbol\nES6引入了一种新的原始数据类型Symbol，表示独一无二的值，它是javascript语言的第七种数据类型，是一种类似于字符串的数据类型。  \nSymbol特点\n1）Symbol值是唯一的，用来解决命名冲突的问题  \n2) Symbol值不能与其他数据进行运算  \n3) Symbol定义的对象属性不能使用for..in循坏遍历，但是可以使用Reflect.ownKeys来获取对象的所有键名\n```\n //创建Symbol\n        let s = Symbol();\n        console.log(s,typeof s);\n\n        //第一种方式\n        let s2 = Symbol('小豪');\n        let s3 = Symbol('小豪');\n        console.log(s2 == s3);//false\n\n        //第二种方式 对象\n        let s4 = Symbol.for('小豪');\n        let s5 = Symbol.for('小豪');\n        console.log(s4 == s5);//true\n\n        //不能与其他数据进行运算\n        let result = s + 100;//报错\n\n        //js七种数据类型\n        // u  undefined\n        // s  Symbol String\n        // o  object\n        // n  null number\n        // b  boolean\n```\nSymbol 值作为属性名时，该属性是公有属性不是私有属性，可以在类的外部访问。但是不会出现在 for...in 、 for...of 的循环中，也不会被 Object.keys() 、 Object.getOwnPropertyNames() 返回。如果要读取到一个对象的 Symbol 属性，可以通过 Object.getOwnPropertySymbols() 和 Reflect.ownKeys() 取到。\n```\n        let sy = Symbol(\"key1\");\n                let syObject = {};\n        syObject[sy] = \"kk\";\n        console.log(syObject);\n        \n        for (let i in syObject) {\n          console.log(i);\n        }    // 无输出\n        \n        Object.keys(syObject);                     // []\n        Object.getOwnPropertySymbols(syObject);    // [Symbol(key1)]\n        Reflect.ownKeys(syObject);                 // [Symbol(key1)]\n```\nSymbol.for()\nSymbol.for() 类似单例模式，首先会在全局搜索被登记的 Symbol 中是否有该字符串参数作为名称的 Symbol 值，如果有即返回该 Symbol 值，若没有则新建并返回一个以该字符串参数为名称的 Symbol 值，并登记在全局环境中供搜索。\n```bash\n        let yellow = Symbol(\"Yellow\");\n        let yellow1 = Symbol.for(\"Yellow\");\n        yellow === yellow1;      // false\n        \n        let yellow2 = Symbol.for(\"Yellow\");\n        yellow1 === yellow2;     // true\n```\n\nSymbol.keyFor() 返回一个已登记的 Symbol 类型值的 key ，用来检测该字符串参数作为名称的 Symbol 值是否已被登记。\n```bash\n        let yellow1 = Symbol.for(\"Yellow\");\n        Symbol.keyFor(yellow1);    // \"Yellow\"\n```","source":"_posts/ES6-Symbol类型的认识.md","raw":"---\ntitle: ES6-Symbol类型的认识\ncategories: ES6\ndate: 2021-06-03 14:42:43\ntags: \n    - ES6 \n    - Symbol\n---\n### 什么是Symbol\nES6引入了一种新的原始数据类型Symbol，表示独一无二的值，它是javascript语言的第七种数据类型，是一种类似于字符串的数据类型。  \nSymbol特点\n1）Symbol值是唯一的，用来解决命名冲突的问题  \n2) Symbol值不能与其他数据进行运算  \n3) Symbol定义的对象属性不能使用for..in循坏遍历，但是可以使用Reflect.ownKeys来获取对象的所有键名\n```\n //创建Symbol\n        let s = Symbol();\n        console.log(s,typeof s);\n\n        //第一种方式\n        let s2 = Symbol('小豪');\n        let s3 = Symbol('小豪');\n        console.log(s2 == s3);//false\n\n        //第二种方式 对象\n        let s4 = Symbol.for('小豪');\n        let s5 = Symbol.for('小豪');\n        console.log(s4 == s5);//true\n\n        //不能与其他数据进行运算\n        let result = s + 100;//报错\n\n        //js七种数据类型\n        // u  undefined\n        // s  Symbol String\n        // o  object\n        // n  null number\n        // b  boolean\n```\nSymbol 值作为属性名时，该属性是公有属性不是私有属性，可以在类的外部访问。但是不会出现在 for...in 、 for...of 的循环中，也不会被 Object.keys() 、 Object.getOwnPropertyNames() 返回。如果要读取到一个对象的 Symbol 属性，可以通过 Object.getOwnPropertySymbols() 和 Reflect.ownKeys() 取到。\n```\n        let sy = Symbol(\"key1\");\n                let syObject = {};\n        syObject[sy] = \"kk\";\n        console.log(syObject);\n        \n        for (let i in syObject) {\n          console.log(i);\n        }    // 无输出\n        \n        Object.keys(syObject);                     // []\n        Object.getOwnPropertySymbols(syObject);    // [Symbol(key1)]\n        Reflect.ownKeys(syObject);                 // [Symbol(key1)]\n```\nSymbol.for()\nSymbol.for() 类似单例模式，首先会在全局搜索被登记的 Symbol 中是否有该字符串参数作为名称的 Symbol 值，如果有即返回该 Symbol 值，若没有则新建并返回一个以该字符串参数为名称的 Symbol 值，并登记在全局环境中供搜索。\n```bash\n        let yellow = Symbol(\"Yellow\");\n        let yellow1 = Symbol.for(\"Yellow\");\n        yellow === yellow1;      // false\n        \n        let yellow2 = Symbol.for(\"Yellow\");\n        yellow1 === yellow2;     // true\n```\n\nSymbol.keyFor() 返回一个已登记的 Symbol 类型值的 key ，用来检测该字符串参数作为名称的 Symbol 值是否已被登记。\n```bash\n        let yellow1 = Symbol.for(\"Yellow\");\n        Symbol.keyFor(yellow1);    // \"Yellow\"\n```","slug":"ES6-Symbol类型的认识","published":1,"updated":"2022-04-03T17:17:55.543Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a4v00083gvo3hj1fvfz","content":"<h3 id=\"什么是Symbol\"><a href=\"#什么是Symbol\" class=\"headerlink\" title=\"什么是Symbol\"></a>什么是Symbol</h3><p>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值，它是javascript语言的第七种数据类型，是一种类似于字符串的数据类型。<br>Symbol特点<br>1）Symbol值是唯一的，用来解决命名冲突的问题<br>2) Symbol值不能与其他数据进行运算<br>3) Symbol定义的对象属性不能使用for..in循坏遍历，但是可以使用Reflect.ownKeys来获取对象的所有键名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建Symbol</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> s = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s,<span class=\"keyword\">typeof</span> s);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//第一种方式</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> s2 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;小豪&#x27;</span>);</span><br><span class=\"line\">       <span class=\"keyword\">let</span> s3 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;小豪&#x27;</span>);</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s2 == s3);<span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//第二种方式 对象</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> s4 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;小豪&#x27;</span>);</span><br><span class=\"line\">       <span class=\"keyword\">let</span> s5 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;小豪&#x27;</span>);</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s4 == s5);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//不能与其他数据进行运算</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> result = s + <span class=\"number\">100</span>;<span class=\"comment\">//报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//js七种数据类型</span></span><br><span class=\"line\">       <span class=\"comment\">// u  undefined</span></span><br><span class=\"line\">       <span class=\"comment\">// s  Symbol String</span></span><br><span class=\"line\">       <span class=\"comment\">// o  object</span></span><br><span class=\"line\">       <span class=\"comment\">// n  null number</span></span><br><span class=\"line\">       <span class=\"comment\">// b  boolean</span></span><br></pre></td></tr></table></figure>\n<p>Symbol 值作为属性名时，该属性是公有属性不是私有属性，可以在类的外部访问。但是不会出现在 for…in 、 for…of 的循环中，也不会被 Object.keys() 、 Object.getOwnPropertyNames() 返回。如果要读取到一个对象的 Symbol 属性，可以通过 Object.getOwnPropertySymbols() 和 Reflect.ownKeys() 取到。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sy = <span class=\"constructor\">Symbol(<span class=\"string\">&quot;key1&quot;</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> syObject = &#123;&#125;;</span><br><span class=\"line\">syObject<span class=\"literal\">[<span class=\"identifier\">sy</span>]</span> = <span class=\"string\">&quot;kk&quot;</span>;</span><br><span class=\"line\">console.log(syObject);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> syObject) &#123;</span><br><span class=\"line\">  console.log(i);</span><br><span class=\"line\">&#125;    <span class=\"comment\">// 无输出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Object</span>.</span></span>keys(syObject);                     <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Object</span>.</span></span>get<span class=\"constructor\">OwnPropertySymbols(<span class=\"params\">syObject</span>)</span>;    <span class=\"comment\">// [Symbol(key1)]</span></span><br><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Reflect</span>.</span></span>own<span class=\"constructor\">Keys(<span class=\"params\">syObject</span>)</span>;                 <span class=\"comment\">// [Symbol(key1)]</span></span><br></pre></td></tr></table></figure>\n<p>Symbol.for()<br>Symbol.for() 类似单例模式，首先会在全局搜索被登记的 Symbol 中是否有该字符串参数作为名称的 Symbol 值，如果有即返回该 Symbol 值，若没有则新建并返回一个以该字符串参数为名称的 Symbol 值，并登记在全局环境中供搜索。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> yellow = Symbol(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">let</span> yellow1 = Symbol.<span class=\"keyword\">for</span>(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\">yellow === yellow1;      // <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> yellow2 = Symbol.<span class=\"keyword\">for</span>(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\">yellow1 === yellow2;     // <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>Symbol.keyFor() 返回一个已登记的 Symbol 类型值的 key ，用来检测该字符串参数作为名称的 Symbol 值是否已被登记。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> yellow1 = Symbol.<span class=\"keyword\">for</span>(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\">Symbol.keyFor(yellow1);    // <span class=\"string\">&quot;Yellow&quot;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是Symbol\"><a href=\"#什么是Symbol\" class=\"headerlink\" title=\"什么是Symbol\"></a>什么是Symbol</h3><p>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值，它是javascript语言的第七种数据类型，是一种类似于字符串的数据类型。<br>Symbol特点<br>1）Symbol值是唯一的，用来解决命名冲突的问题<br>2) Symbol值不能与其他数据进行运算<br>3) Symbol定义的对象属性不能使用for..in循坏遍历，但是可以使用Reflect.ownKeys来获取对象的所有键名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建Symbol</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> s = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s,<span class=\"keyword\">typeof</span> s);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//第一种方式</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> s2 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;小豪&#x27;</span>);</span><br><span class=\"line\">       <span class=\"keyword\">let</span> s3 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;小豪&#x27;</span>);</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s2 == s3);<span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//第二种方式 对象</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> s4 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;小豪&#x27;</span>);</span><br><span class=\"line\">       <span class=\"keyword\">let</span> s5 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;小豪&#x27;</span>);</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s4 == s5);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//不能与其他数据进行运算</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> result = s + <span class=\"number\">100</span>;<span class=\"comment\">//报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//js七种数据类型</span></span><br><span class=\"line\">       <span class=\"comment\">// u  undefined</span></span><br><span class=\"line\">       <span class=\"comment\">// s  Symbol String</span></span><br><span class=\"line\">       <span class=\"comment\">// o  object</span></span><br><span class=\"line\">       <span class=\"comment\">// n  null number</span></span><br><span class=\"line\">       <span class=\"comment\">// b  boolean</span></span><br></pre></td></tr></table></figure>\n<p>Symbol 值作为属性名时，该属性是公有属性不是私有属性，可以在类的外部访问。但是不会出现在 for…in 、 for…of 的循环中，也不会被 Object.keys() 、 Object.getOwnPropertyNames() 返回。如果要读取到一个对象的 Symbol 属性，可以通过 Object.getOwnPropertySymbols() 和 Reflect.ownKeys() 取到。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sy = <span class=\"constructor\">Symbol(<span class=\"string\">&quot;key1&quot;</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> syObject = &#123;&#125;;</span><br><span class=\"line\">syObject<span class=\"literal\">[<span class=\"identifier\">sy</span>]</span> = <span class=\"string\">&quot;kk&quot;</span>;</span><br><span class=\"line\">console.log(syObject);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> syObject) &#123;</span><br><span class=\"line\">  console.log(i);</span><br><span class=\"line\">&#125;    <span class=\"comment\">// 无输出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Object</span>.</span></span>keys(syObject);                     <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Object</span>.</span></span>get<span class=\"constructor\">OwnPropertySymbols(<span class=\"params\">syObject</span>)</span>;    <span class=\"comment\">// [Symbol(key1)]</span></span><br><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Reflect</span>.</span></span>own<span class=\"constructor\">Keys(<span class=\"params\">syObject</span>)</span>;                 <span class=\"comment\">// [Symbol(key1)]</span></span><br></pre></td></tr></table></figure>\n<p>Symbol.for()<br>Symbol.for() 类似单例模式，首先会在全局搜索被登记的 Symbol 中是否有该字符串参数作为名称的 Symbol 值，如果有即返回该 Symbol 值，若没有则新建并返回一个以该字符串参数为名称的 Symbol 值，并登记在全局环境中供搜索。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> yellow = Symbol(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">let</span> yellow1 = Symbol.<span class=\"keyword\">for</span>(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\">yellow === yellow1;      // <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> yellow2 = Symbol.<span class=\"keyword\">for</span>(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\">yellow1 === yellow2;     // <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>Symbol.keyFor() 返回一个已登记的 Symbol 类型值的 key ，用来检测该字符串参数作为名称的 Symbol 值是否已被登记。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> yellow1 = Symbol.<span class=\"keyword\">for</span>(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\">Symbol.keyFor(yellow1);    // <span class=\"string\">&quot;Yellow&quot;</span></span><br></pre></td></tr></table></figure>"},{"title":"ES6-class","date":"2021-06-23T02:27:33.000Z","_content":"### 定义\nES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。\n\n```bash\n<script>\n    class shouji {\n        constructor(brand,price) {\n            this.brand=brand;\n            this.price=price\n        }\n\n        call(){\n            console.log('我可以打电话')\n        }\n    }\n\n    let A = new shouji('1+',1999);\n    console.log(A)\n</script>\n```\n### 静态成员\n<!-- more -->\n```bash\n<script>\n        //class静态成员\n        function phone() {  }\n        phone.name = 'shouji';\n        phone.change = function () {\n            console.log('我可以改变世界');\n          }//这两个属于函数对象，不属于实例对象\n          phone.prototype.name1 = '小豪';\n          let huawei = new phone();\n          console.log(huawei.name);//undefined\n          console.log(huawei.name1);//小豪\n\n          class Car{\n              //静态\n              static name = 'haha';\n              static change(){\n                  console.log(\"我可以改变世界\");\n              }\n          }\n          let car = new Car();\n          console.log(car.name);//undefined\n          console.log(Car.name);//haha\n    </script>\n```\n### 构造函数继承\n```bash\n<script>\n        //构造函数的继承\n        function Phone(brand,price) { \n            this.brand = brand;\n            this.price = price;\n         }\n         Phone.prototype.call = function () {\n                console.log(\"我可以打电话\");\n              }\n              function SmartPhone(brand,price,color,size) {\n                  Phone.call(this.brand,price);\n                  this.color = color;\n                  this.size = size;\n                }\n\n            //设置子级构造函数的原型\n            SmartPhone.prototype = new Phone;\n            SmartPhone.prototype.constructor = SmartPhone;\n\n            //声明子类的方法\n            SmartPhone.prototype.photo = function () {\n                console.log(\"我可以拍照\");\n              }\n              SmartPhone.prototype.playGame = function () {\n                  console.log(\"我可以玩游戏\");\n                }\n                const chuizi = new SmartPhone('锤子',2499,'黑色','5.5inch')\n                console.log(chuizi);\n    </script>\n```\n### class类继承和重写\n```bash\n    <script>\n        //类的继承\n        class Phone{\n            //构造方法\n            constructor(brand,price){\n                this.brand = brand;\n                this.price = price;\n            }\n            //父类成员属性\n            call(){\n                console.log(\"我可以打电话\");\n            }\n        }\n\n        class SmartPhone extends Phone{\n            //构造方法\n            constructor(brand,price,color,size){\n                super(brand,price);\n                this.color = color;\n                this.size = size;\n            }\n            photo(){\n                console.log(\"拍照\");\n            }\n            playGame(){\n                console.log(\"游戏\");\n            }\n            //重写父类方法\n            call(){\n                console.log(\"我可以视频通话\");\n            }\n        }\n        const xiaomi = new SmartPhone('小米',799,'黑色','4.7inch');\n        console.log((xiaomi));\n        xiaomi.call();//我乐意视频通话\n\n    </script>\n```","source":"_posts/ES6-class.md","raw":"---\ntitle: ES6-class\ndate: 2021-06-23 10:27:33\ntags:  ES6 class\n---\n### 定义\nES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。\n\n```bash\n<script>\n    class shouji {\n        constructor(brand,price) {\n            this.brand=brand;\n            this.price=price\n        }\n\n        call(){\n            console.log('我可以打电话')\n        }\n    }\n\n    let A = new shouji('1+',1999);\n    console.log(A)\n</script>\n```\n### 静态成员\n<!-- more -->\n```bash\n<script>\n        //class静态成员\n        function phone() {  }\n        phone.name = 'shouji';\n        phone.change = function () {\n            console.log('我可以改变世界');\n          }//这两个属于函数对象，不属于实例对象\n          phone.prototype.name1 = '小豪';\n          let huawei = new phone();\n          console.log(huawei.name);//undefined\n          console.log(huawei.name1);//小豪\n\n          class Car{\n              //静态\n              static name = 'haha';\n              static change(){\n                  console.log(\"我可以改变世界\");\n              }\n          }\n          let car = new Car();\n          console.log(car.name);//undefined\n          console.log(Car.name);//haha\n    </script>\n```\n### 构造函数继承\n```bash\n<script>\n        //构造函数的继承\n        function Phone(brand,price) { \n            this.brand = brand;\n            this.price = price;\n         }\n         Phone.prototype.call = function () {\n                console.log(\"我可以打电话\");\n              }\n              function SmartPhone(brand,price,color,size) {\n                  Phone.call(this.brand,price);\n                  this.color = color;\n                  this.size = size;\n                }\n\n            //设置子级构造函数的原型\n            SmartPhone.prototype = new Phone;\n            SmartPhone.prototype.constructor = SmartPhone;\n\n            //声明子类的方法\n            SmartPhone.prototype.photo = function () {\n                console.log(\"我可以拍照\");\n              }\n              SmartPhone.prototype.playGame = function () {\n                  console.log(\"我可以玩游戏\");\n                }\n                const chuizi = new SmartPhone('锤子',2499,'黑色','5.5inch')\n                console.log(chuizi);\n    </script>\n```\n### class类继承和重写\n```bash\n    <script>\n        //类的继承\n        class Phone{\n            //构造方法\n            constructor(brand,price){\n                this.brand = brand;\n                this.price = price;\n            }\n            //父类成员属性\n            call(){\n                console.log(\"我可以打电话\");\n            }\n        }\n\n        class SmartPhone extends Phone{\n            //构造方法\n            constructor(brand,price,color,size){\n                super(brand,price);\n                this.color = color;\n                this.size = size;\n            }\n            photo(){\n                console.log(\"拍照\");\n            }\n            playGame(){\n                console.log(\"游戏\");\n            }\n            //重写父类方法\n            call(){\n                console.log(\"我可以视频通话\");\n            }\n        }\n        const xiaomi = new SmartPhone('小米',799,'黑色','4.7inch');\n        console.log((xiaomi));\n        xiaomi.call();//我乐意视频通话\n\n    </script>\n```","slug":"ES6-class","published":1,"updated":"2021-06-23T02:35:13.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a4w000a3gvo0qcmhf1w","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>ES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    class shouji &#123;</span><br><span class=\"line\">        constructor(brand,price) &#123;</span><br><span class=\"line\">            this.brand=brand;</span><br><span class=\"line\">            this.price=price</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">call</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&#x27;我可以打电话&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">let</span> A = new shouji(<span class=\"string\">&#x27;1+&#x27;</span>,1999);</span><br><span class=\"line\">    console.log(A)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><span id=\"more\"></span>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        //class静态成员</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">phone</span></span>() &#123;  &#125;</span><br><span class=\"line\">        phone.name = <span class=\"string\">&#x27;shouji&#x27;</span>;</span><br><span class=\"line\">        phone.change = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&#x27;我可以改变世界&#x27;</span>);</span><br><span class=\"line\">          &#125;//这两个属于函数对象，不属于实例对象</span><br><span class=\"line\">          phone.prototype.name1 = <span class=\"string\">&#x27;小豪&#x27;</span>;</span><br><span class=\"line\">          <span class=\"built_in\">let</span> huawei = new phone();</span><br><span class=\"line\">          console.log(huawei.name);//undefined</span><br><span class=\"line\">          console.log(huawei.name1);//小豪</span><br><span class=\"line\"></span><br><span class=\"line\">          class Car&#123;</span><br><span class=\"line\">              //静态</span><br><span class=\"line\">              static name = <span class=\"string\">&#x27;haha&#x27;</span>;</span><br><span class=\"line\">              static <span class=\"function\"><span class=\"title\">change</span></span>()&#123;</span><br><span class=\"line\">                  console.log(<span class=\"string\">&quot;我可以改变世界&quot;</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"built_in\">let</span> car = new Car();</span><br><span class=\"line\">          console.log(car.name);//undefined</span><br><span class=\"line\">          console.log(Car.name);//haha</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造函数继承\"><a href=\"#构造函数继承\" class=\"headerlink\" title=\"构造函数继承\"></a>构造函数继承</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        //构造函数的继承</span><br><span class=\"line\">        <span class=\"keyword\">function</span> Phone(brand,price) &#123; </span><br><span class=\"line\">            this.brand = brand;</span><br><span class=\"line\">            this.price = price;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         Phone.prototype.call = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">&quot;我可以打电话&quot;</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">function</span> SmartPhone(brand,price,color,size) &#123;</span><br><span class=\"line\">                  Phone.call(this.brand,price);</span><br><span class=\"line\">                  this.color = color;</span><br><span class=\"line\">                  this.size = size;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //设置子级构造函数的原型</span><br><span class=\"line\">            SmartPhone.prototype = new Phone;</span><br><span class=\"line\">            SmartPhone.prototype.constructor = SmartPhone;</span><br><span class=\"line\"></span><br><span class=\"line\">            //声明子类的方法</span><br><span class=\"line\">            SmartPhone.prototype.photo = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">&quot;我可以拍照&quot;</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              SmartPhone.prototype.playGame = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">                  console.log(<span class=\"string\">&quot;我可以玩游戏&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                const chuizi = new SmartPhone(<span class=\"string\">&#x27;锤子&#x27;</span>,2499,<span class=\"string\">&#x27;黑色&#x27;</span>,<span class=\"string\">&#x27;5.5inch&#x27;</span>)</span><br><span class=\"line\">                console.log(chuizi);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"class类继承和重写\"><a href=\"#class类继承和重写\" class=\"headerlink\" title=\"class类继承和重写\"></a>class类继承和重写</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    //类的继承</span><br><span class=\"line\">    class Phone&#123;</span><br><span class=\"line\">        //构造方法</span><br><span class=\"line\">        constructor(brand,price)&#123;</span><br><span class=\"line\">            this.brand = brand;</span><br><span class=\"line\">            this.price = price;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //父类成员属性</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">call</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;我可以打电话&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class SmartPhone extends Phone&#123;</span><br><span class=\"line\">        //构造方法</span><br><span class=\"line\">        constructor(brand,price,color,size)&#123;</span><br><span class=\"line\">            super(brand,price);</span><br><span class=\"line\">            this.color = color;</span><br><span class=\"line\">            this.size = size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">photo</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;拍照&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">playGame</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;游戏&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //重写父类方法</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">call</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;我可以视频通话&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const xiaomi = new SmartPhone(<span class=\"string\">&#x27;小米&#x27;</span>,799,<span class=\"string\">&#x27;黑色&#x27;</span>,<span class=\"string\">&#x27;4.7inch&#x27;</span>);</span><br><span class=\"line\">    console.log((xiaomi));</span><br><span class=\"line\">    xiaomi.call();//我乐意视频通话</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>ES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    class shouji &#123;</span><br><span class=\"line\">        constructor(brand,price) &#123;</span><br><span class=\"line\">            this.brand=brand;</span><br><span class=\"line\">            this.price=price</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">call</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&#x27;我可以打电话&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">let</span> A = new shouji(<span class=\"string\">&#x27;1+&#x27;</span>,1999);</span><br><span class=\"line\">    console.log(A)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        //class静态成员</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">phone</span></span>() &#123;  &#125;</span><br><span class=\"line\">        phone.name = <span class=\"string\">&#x27;shouji&#x27;</span>;</span><br><span class=\"line\">        phone.change = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&#x27;我可以改变世界&#x27;</span>);</span><br><span class=\"line\">          &#125;//这两个属于函数对象，不属于实例对象</span><br><span class=\"line\">          phone.prototype.name1 = <span class=\"string\">&#x27;小豪&#x27;</span>;</span><br><span class=\"line\">          <span class=\"built_in\">let</span> huawei = new phone();</span><br><span class=\"line\">          console.log(huawei.name);//undefined</span><br><span class=\"line\">          console.log(huawei.name1);//小豪</span><br><span class=\"line\"></span><br><span class=\"line\">          class Car&#123;</span><br><span class=\"line\">              //静态</span><br><span class=\"line\">              static name = <span class=\"string\">&#x27;haha&#x27;</span>;</span><br><span class=\"line\">              static <span class=\"function\"><span class=\"title\">change</span></span>()&#123;</span><br><span class=\"line\">                  console.log(<span class=\"string\">&quot;我可以改变世界&quot;</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"built_in\">let</span> car = new Car();</span><br><span class=\"line\">          console.log(car.name);//undefined</span><br><span class=\"line\">          console.log(Car.name);//haha</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造函数继承\"><a href=\"#构造函数继承\" class=\"headerlink\" title=\"构造函数继承\"></a>构造函数继承</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        //构造函数的继承</span><br><span class=\"line\">        <span class=\"keyword\">function</span> Phone(brand,price) &#123; </span><br><span class=\"line\">            this.brand = brand;</span><br><span class=\"line\">            this.price = price;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         Phone.prototype.call = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">&quot;我可以打电话&quot;</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">function</span> SmartPhone(brand,price,color,size) &#123;</span><br><span class=\"line\">                  Phone.call(this.brand,price);</span><br><span class=\"line\">                  this.color = color;</span><br><span class=\"line\">                  this.size = size;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //设置子级构造函数的原型</span><br><span class=\"line\">            SmartPhone.prototype = new Phone;</span><br><span class=\"line\">            SmartPhone.prototype.constructor = SmartPhone;</span><br><span class=\"line\"></span><br><span class=\"line\">            //声明子类的方法</span><br><span class=\"line\">            SmartPhone.prototype.photo = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">&quot;我可以拍照&quot;</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              SmartPhone.prototype.playGame = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">                  console.log(<span class=\"string\">&quot;我可以玩游戏&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                const chuizi = new SmartPhone(<span class=\"string\">&#x27;锤子&#x27;</span>,2499,<span class=\"string\">&#x27;黑色&#x27;</span>,<span class=\"string\">&#x27;5.5inch&#x27;</span>)</span><br><span class=\"line\">                console.log(chuizi);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"class类继承和重写\"><a href=\"#class类继承和重写\" class=\"headerlink\" title=\"class类继承和重写\"></a>class类继承和重写</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    //类的继承</span><br><span class=\"line\">    class Phone&#123;</span><br><span class=\"line\">        //构造方法</span><br><span class=\"line\">        constructor(brand,price)&#123;</span><br><span class=\"line\">            this.brand = brand;</span><br><span class=\"line\">            this.price = price;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //父类成员属性</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">call</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;我可以打电话&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class SmartPhone extends Phone&#123;</span><br><span class=\"line\">        //构造方法</span><br><span class=\"line\">        constructor(brand,price,color,size)&#123;</span><br><span class=\"line\">            super(brand,price);</span><br><span class=\"line\">            this.color = color;</span><br><span class=\"line\">            this.size = size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">photo</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;拍照&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">playGame</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;游戏&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //重写父类方法</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">call</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;我可以视频通话&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const xiaomi = new SmartPhone(<span class=\"string\">&#x27;小米&#x27;</span>,799,<span class=\"string\">&#x27;黑色&#x27;</span>,<span class=\"string\">&#x27;4.7inch&#x27;</span>);</span><br><span class=\"line\">    console.log((xiaomi));</span><br><span class=\"line\">    xiaomi.call();//我乐意视频通话</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ES6-get/set","date":"2021-06-23T02:48:25.000Z","_content":"```bash\n<script>\n        //get和set\n        class Phone{\n            get price(){\n                console.log(\"价格属性被读取\");\n                return 'xiaohao';\n            }\n            set price(newval){\n                console.log(\"价格属性被修改\");\n            }\n        }\n        //实例化对象\n        let s = new Phone();\n        console.log(s.price);\n        s.price = 'free';\n    </script>\n```","source":"_posts/ES6-get-set.md","raw":"---\ntitle: ES6-get/set\ndate: 2021-06-23 10:48:25\ntags:  ES6 get/set\n---\n```bash\n<script>\n        //get和set\n        class Phone{\n            get price(){\n                console.log(\"价格属性被读取\");\n                return 'xiaohao';\n            }\n            set price(newval){\n                console.log(\"价格属性被修改\");\n            }\n        }\n        //实例化对象\n        let s = new Phone();\n        console.log(s.price);\n        s.price = 'free';\n    </script>\n```","slug":"ES6-get-set","published":1,"updated":"2021-06-23T02:48:58.954Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a4y000d3gvo8ev4cdyz","content":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        //get和<span class=\"built_in\">set</span></span><br><span class=\"line\">        class Phone&#123;</span><br><span class=\"line\">            get <span class=\"function\"><span class=\"title\">price</span></span>()&#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">&quot;价格属性被读取&quot;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">return</span> <span class=\"string\">&#x27;xiaohao&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">set</span> price(newval)&#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">&quot;价格属性被修改&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //实例化对象</span><br><span class=\"line\">        <span class=\"built_in\">let</span> s = new Phone();</span><br><span class=\"line\">        console.log(s.price);</span><br><span class=\"line\">        s.price = <span class=\"string\">&#x27;free&#x27;</span>;</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        //get和<span class=\"built_in\">set</span></span><br><span class=\"line\">        class Phone&#123;</span><br><span class=\"line\">            get <span class=\"function\"><span class=\"title\">price</span></span>()&#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">&quot;价格属性被读取&quot;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">return</span> <span class=\"string\">&#x27;xiaohao&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">set</span> price(newval)&#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">&quot;价格属性被修改&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //实例化对象</span><br><span class=\"line\">        <span class=\"built_in\">let</span> s = new Phone();</span><br><span class=\"line\">        console.log(s.price);</span><br><span class=\"line\">        s.price = <span class=\"string\">&#x27;free&#x27;</span>;</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ES6 let和const命令","date":"2021-05-16T07:05:04.000Z","_content":"## let命令\n1.变量不能重复声明\n``` bash\nlet star='罗志祥';\nlet star='小猪'  //error\n```\n2.let有块级作用域，全局，函数，eval\n``` bash\n{\n    let girl='周扬青'\n}\nconsole.log(girl) //error\n```\n不仅仅针对花括号，例如if（）里面\n\n3.不存在变量提前\n``` bash\nconsole.log(song)   //error\nlet song='时间管理大师'\n```\n<!-- more -->\n4.不影响作用域链\n``` bash\nlet school='abc'\nfunction fn(){\n    console.log(school) //abc\n}\n```\n案例\n``` bash\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <div>\n        <div class=\"item\" style=\"width: 50px;height: 50px;background-color: red\"></div>\n        <div class=\"item\" style=\"width: 50px;height: 50px;background-color: red\"></div>\n        <div class=\"item\" style=\"width: 50px;height: 50px;background-color: red\"></div>\n    </div>\n    <script>\n        let items=document.getElementsByClassName(\"item\");\n        for (var i=0;i<items.length;i++){\n            items[i].onclick=function (){\n                items[i].style.backgroundColor='pink';\n            }\n        }\n        console.log(windows.i)  //3 \n        // 当var=3的时候，点击事件开始向外层作用域找，找不到，就是windows.i，此时是3，如果是let i，具有块级作用域，所以每一次触碰事件的i都是不同的。\n\n        //相当于这样\n        {\n            let i = 0;\n                        items[i].onclick=function (){\n                items[i].style.backgroundColor='pink';\n            }\n        }\n                {\n            let i = 1;\n                        items[i].onclick=function (){\n                items[i].style.backgroundColor='pink';\n            }\n        }\n                {\n            let i = 2;\n                        items[i].onclick=function (){\n                items[i].style.backgroundColor='pink';\n            }\n        }\n    </script>\n</body>\n</html>\n\n```\n\n## const命令\n声明常量\n``` bash\nconst AA = 'xiaohao'\n```\n1.一定要赋初始值\n2.一般常量使用大写（潜规则）\n3.常量的值不能修改\n4.也具有块级作用域\n``` bash\n{\n    const pyaler = 'uzi'\n}\nconsole.log(player) //error\n```\n5.对于数组和对象的元素修改，不算作对常量的修改\n``` bash\nconst team = ['uzi','MXLG','Ming','Letme'];\nteam.push('Meiko'); //不报错，常量地址没有发生变化,值发生改变就会报错\n\n```","source":"_posts/ES6-let和const命令.md","raw":"---\ntitle: ES6 let和const命令\ndate: 2021-05-16 15:05:04\ntags: ES6 let和const命令\n---\n## let命令\n1.变量不能重复声明\n``` bash\nlet star='罗志祥';\nlet star='小猪'  //error\n```\n2.let有块级作用域，全局，函数，eval\n``` bash\n{\n    let girl='周扬青'\n}\nconsole.log(girl) //error\n```\n不仅仅针对花括号，例如if（）里面\n\n3.不存在变量提前\n``` bash\nconsole.log(song)   //error\nlet song='时间管理大师'\n```\n<!-- more -->\n4.不影响作用域链\n``` bash\nlet school='abc'\nfunction fn(){\n    console.log(school) //abc\n}\n```\n案例\n``` bash\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <div>\n        <div class=\"item\" style=\"width: 50px;height: 50px;background-color: red\"></div>\n        <div class=\"item\" style=\"width: 50px;height: 50px;background-color: red\"></div>\n        <div class=\"item\" style=\"width: 50px;height: 50px;background-color: red\"></div>\n    </div>\n    <script>\n        let items=document.getElementsByClassName(\"item\");\n        for (var i=0;i<items.length;i++){\n            items[i].onclick=function (){\n                items[i].style.backgroundColor='pink';\n            }\n        }\n        console.log(windows.i)  //3 \n        // 当var=3的时候，点击事件开始向外层作用域找，找不到，就是windows.i，此时是3，如果是let i，具有块级作用域，所以每一次触碰事件的i都是不同的。\n\n        //相当于这样\n        {\n            let i = 0;\n                        items[i].onclick=function (){\n                items[i].style.backgroundColor='pink';\n            }\n        }\n                {\n            let i = 1;\n                        items[i].onclick=function (){\n                items[i].style.backgroundColor='pink';\n            }\n        }\n                {\n            let i = 2;\n                        items[i].onclick=function (){\n                items[i].style.backgroundColor='pink';\n            }\n        }\n    </script>\n</body>\n</html>\n\n```\n\n## const命令\n声明常量\n``` bash\nconst AA = 'xiaohao'\n```\n1.一定要赋初始值\n2.一般常量使用大写（潜规则）\n3.常量的值不能修改\n4.也具有块级作用域\n``` bash\n{\n    const pyaler = 'uzi'\n}\nconsole.log(player) //error\n```\n5.对于数组和对象的元素修改，不算作对常量的修改\n``` bash\nconst team = ['uzi','MXLG','Ming','Letme'];\nteam.push('Meiko'); //不报错，常量地址没有发生变化,值发生改变就会报错\n\n```","slug":"ES6-let和const命令","published":1,"updated":"2021-06-09T09:49:05.376Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a4z000e3gvohvu8bbow","content":"<h2 id=\"let命令\"><a href=\"#let命令\" class=\"headerlink\" title=\"let命令\"></a>let命令</h2><p>1.变量不能重复声明</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> star=<span class=\"string\">&#x27;罗志祥&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">let</span> star=<span class=\"string\">&#x27;小猪&#x27;</span>  //error</span><br></pre></td></tr></table></figure>\n<p>2.let有块级作用域，全局，函数，eval</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> girl=<span class=\"string\">&#x27;周扬青&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(girl) //error</span><br></pre></td></tr></table></figure>\n<p>不仅仅针对花括号，例如if（）里面</p>\n<p>3.不存在变量提前</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(song)   //error</span><br><span class=\"line\"><span class=\"built_in\">let</span> song=<span class=\"string\">&#x27;时间管理大师&#x27;</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>4.不影响作用域链</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> school=<span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn</span></span>()&#123;</span><br><span class=\"line\">    console.log(school) //abc</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>案例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"built_in\">head</span>&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;div class=<span class=\"string\">&quot;item&quot;</span> style=<span class=\"string\">&quot;width: 50px;height: 50px;background-color: red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=<span class=\"string\">&quot;item&quot;</span> style=<span class=\"string\">&quot;width: 50px;height: 50px;background-color: red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=<span class=\"string\">&quot;item&quot;</span> style=<span class=\"string\">&quot;width: 50px;height: 50px;background-color: red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> items=document.getElementsByClassName(<span class=\"string\">&quot;item&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (var i=0;i&lt;items.length;i++)&#123;</span><br><span class=\"line\">            items[i].onclick=<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\">                items[i].style.backgroundColor=<span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(windows.i)  //3 </span><br><span class=\"line\">        // 当var=3的时候，点击事件开始向外层作用域找，找不到，就是windows.i，此时是3，如果是<span class=\"built_in\">let</span> i，具有块级作用域，所以每一次触碰事件的i都是不同的。</span><br><span class=\"line\"></span><br><span class=\"line\">        //相当于这样</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">let</span> i = 0;</span><br><span class=\"line\">                        items[i].onclick=<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\">                items[i].style.backgroundColor=<span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">            <span class=\"built_in\">let</span> i = 1;</span><br><span class=\"line\">                        items[i].onclick=<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\">                items[i].style.backgroundColor=<span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">            <span class=\"built_in\">let</span> i = 2;</span><br><span class=\"line\">                        items[i].onclick=<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\">                items[i].style.backgroundColor=<span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"const命令\"><a href=\"#const命令\" class=\"headerlink\" title=\"const命令\"></a>const命令</h2><p>声明常量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const AA = <span class=\"string\">&#x27;xiaohao&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>1.一定要赋初始值<br>2.一般常量使用大写（潜规则）<br>3.常量的值不能修改<br>4.也具有块级作用域</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    const pyaler = <span class=\"string\">&#x27;uzi&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(player) //error</span><br></pre></td></tr></table></figure>\n<p>5.对于数组和对象的元素修改，不算作对常量的修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const team = [<span class=\"string\">&#x27;uzi&#x27;</span>,<span class=\"string\">&#x27;MXLG&#x27;</span>,<span class=\"string\">&#x27;Ming&#x27;</span>,<span class=\"string\">&#x27;Letme&#x27;</span>];</span><br><span class=\"line\">team.push(<span class=\"string\">&#x27;Meiko&#x27;</span>); //不报错，常量地址没有发生变化,值发生改变就会报错</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"let命令\"><a href=\"#let命令\" class=\"headerlink\" title=\"let命令\"></a>let命令</h2><p>1.变量不能重复声明</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> star=<span class=\"string\">&#x27;罗志祥&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">let</span> star=<span class=\"string\">&#x27;小猪&#x27;</span>  //error</span><br></pre></td></tr></table></figure>\n<p>2.let有块级作用域，全局，函数，eval</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> girl=<span class=\"string\">&#x27;周扬青&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(girl) //error</span><br></pre></td></tr></table></figure>\n<p>不仅仅针对花括号，例如if（）里面</p>\n<p>3.不存在变量提前</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(song)   //error</span><br><span class=\"line\"><span class=\"built_in\">let</span> song=<span class=\"string\">&#x27;时间管理大师&#x27;</span></span><br></pre></td></tr></table></figure>","more":"<p>4.不影响作用域链</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> school=<span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn</span></span>()&#123;</span><br><span class=\"line\">    console.log(school) //abc</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>案例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"built_in\">head</span>&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;div class=<span class=\"string\">&quot;item&quot;</span> style=<span class=\"string\">&quot;width: 50px;height: 50px;background-color: red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=<span class=\"string\">&quot;item&quot;</span> style=<span class=\"string\">&quot;width: 50px;height: 50px;background-color: red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=<span class=\"string\">&quot;item&quot;</span> style=<span class=\"string\">&quot;width: 50px;height: 50px;background-color: red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> items=document.getElementsByClassName(<span class=\"string\">&quot;item&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (var i=0;i&lt;items.length;i++)&#123;</span><br><span class=\"line\">            items[i].onclick=<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\">                items[i].style.backgroundColor=<span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(windows.i)  //3 </span><br><span class=\"line\">        // 当var=3的时候，点击事件开始向外层作用域找，找不到，就是windows.i，此时是3，如果是<span class=\"built_in\">let</span> i，具有块级作用域，所以每一次触碰事件的i都是不同的。</span><br><span class=\"line\"></span><br><span class=\"line\">        //相当于这样</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">let</span> i = 0;</span><br><span class=\"line\">                        items[i].onclick=<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\">                items[i].style.backgroundColor=<span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">            <span class=\"built_in\">let</span> i = 1;</span><br><span class=\"line\">                        items[i].onclick=<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\">                items[i].style.backgroundColor=<span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">            <span class=\"built_in\">let</span> i = 2;</span><br><span class=\"line\">                        items[i].onclick=<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\">                items[i].style.backgroundColor=<span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"const命令\"><a href=\"#const命令\" class=\"headerlink\" title=\"const命令\"></a>const命令</h2><p>声明常量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const AA = <span class=\"string\">&#x27;xiaohao&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>1.一定要赋初始值<br>2.一般常量使用大写（潜规则）<br>3.常量的值不能修改<br>4.也具有块级作用域</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    const pyaler = <span class=\"string\">&#x27;uzi&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(player) //error</span><br></pre></td></tr></table></figure>\n<p>5.对于数组和对象的元素修改，不算作对常量的修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const team = [<span class=\"string\">&#x27;uzi&#x27;</span>,<span class=\"string\">&#x27;MXLG&#x27;</span>,<span class=\"string\">&#x27;Ming&#x27;</span>,<span class=\"string\">&#x27;Letme&#x27;</span>];</span><br><span class=\"line\">team.push(<span class=\"string\">&#x27;Meiko&#x27;</span>); //不报错，常量地址没有发生变化,值发生改变就会报错</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"ES6-rest参数","date":"2021-06-03T05:52:14.000Z","_content":"ES6引入rest参数，用于获取函数的实参，用来代替arguments\n### 1.首先来看一下ES5获取参数的方式\n```bash\n            function data(){\n            console.log(arguments);\n            //获取的是一个对象\n        }\n        data(\"xiaohao\",\"ahao\",\"hexo\");\n```\n\n### 2.ES6使用rest参数\n```bash\n            function date(...args){\n            console.log(args);\n        }\n        date(\"xiaohao\",\"ahao\",\"hexo\");\n        //获取的是一个数组\n```\n<!-- more -->\nrest参数必须放到参数最后,否则就会报错\n```bash\n            function fn(a,b,...args) {\n            console.log(a);\n            console.log(b);\n            console.log(args);\n          }\n          fn(1,2,3,4,5,6,7,8,9);\n          //1\n          //2\n          //[3,4,5,6,7,8,9]\n```\nrest参数放在a和b中，获取最前面，都会报错。\n\n","source":"_posts/ES6-rest参数.md","raw":"---\ntitle: ES6-rest参数\ndate: 2021-06-03 13:52:14\ntags: ES6 rest参数\n---\nES6引入rest参数，用于获取函数的实参，用来代替arguments\n### 1.首先来看一下ES5获取参数的方式\n```bash\n            function data(){\n            console.log(arguments);\n            //获取的是一个对象\n        }\n        data(\"xiaohao\",\"ahao\",\"hexo\");\n```\n\n### 2.ES6使用rest参数\n```bash\n            function date(...args){\n            console.log(args);\n        }\n        date(\"xiaohao\",\"ahao\",\"hexo\");\n        //获取的是一个数组\n```\n<!-- more -->\nrest参数必须放到参数最后,否则就会报错\n```bash\n            function fn(a,b,...args) {\n            console.log(a);\n            console.log(b);\n            console.log(args);\n          }\n          fn(1,2,3,4,5,6,7,8,9);\n          //1\n          //2\n          //[3,4,5,6,7,8,9]\n```\nrest参数放在a和b中，获取最前面，都会报错。\n\n","slug":"ES6-rest参数","published":1,"updated":"2021-06-09T09:49:15.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a51000h3gvo1duphzpu","content":"<p>ES6引入rest参数，用于获取函数的实参，用来代替arguments</p>\n<h3 id=\"1-首先来看一下ES5获取参数的方式\"><a href=\"#1-首先来看一下ES5获取参数的方式\" class=\"headerlink\" title=\"1.首先来看一下ES5获取参数的方式\"></a>1.首先来看一下ES5获取参数的方式</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">data</span></span>()&#123;</span><br><span class=\"line\">    console.log(arguments);</span><br><span class=\"line\">    //获取的是一个对象</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">data(<span class=\"string\">&quot;xiaohao&quot;</span>,<span class=\"string\">&quot;ahao&quot;</span>,<span class=\"string\">&quot;hexo&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-ES6使用rest参数\"><a href=\"#2-ES6使用rest参数\" class=\"headerlink\" title=\"2.ES6使用rest参数\"></a>2.ES6使用rest参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"built_in\">date</span>(...args)&#123;</span><br><span class=\"line\">    console.log(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">date</span>(<span class=\"string\">&quot;xiaohao&quot;</span>,<span class=\"string\">&quot;ahao&quot;</span>,<span class=\"string\">&quot;hexo&quot;</span>);</span><br><span class=\"line\">//获取的是一个数组</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>rest参数必须放到参数最后,否则就会报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">function</span> fn(a,b,...args) &#123;</span><br><span class=\"line\">  console.log(a);</span><br><span class=\"line\">  console.log(b);</span><br><span class=\"line\">  console.log(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(1,2,3,4,5,6,7,8,9);</span><br><span class=\"line\">//1</span><br><span class=\"line\">//2</span><br><span class=\"line\">//[3,4,5,6,7,8,9]</span><br></pre></td></tr></table></figure>\n<p>rest参数放在a和b中，获取最前面，都会报错。</p>\n","site":{"data":{}},"excerpt":"<p>ES6引入rest参数，用于获取函数的实参，用来代替arguments</p>\n<h3 id=\"1-首先来看一下ES5获取参数的方式\"><a href=\"#1-首先来看一下ES5获取参数的方式\" class=\"headerlink\" title=\"1.首先来看一下ES5获取参数的方式\"></a>1.首先来看一下ES5获取参数的方式</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">data</span></span>()&#123;</span><br><span class=\"line\">    console.log(arguments);</span><br><span class=\"line\">    //获取的是一个对象</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">data(<span class=\"string\">&quot;xiaohao&quot;</span>,<span class=\"string\">&quot;ahao&quot;</span>,<span class=\"string\">&quot;hexo&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-ES6使用rest参数\"><a href=\"#2-ES6使用rest参数\" class=\"headerlink\" title=\"2.ES6使用rest参数\"></a>2.ES6使用rest参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"built_in\">date</span>(...args)&#123;</span><br><span class=\"line\">    console.log(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">date</span>(<span class=\"string\">&quot;xiaohao&quot;</span>,<span class=\"string\">&quot;ahao&quot;</span>,<span class=\"string\">&quot;hexo&quot;</span>);</span><br><span class=\"line\">//获取的是一个数组</span><br></pre></td></tr></table></figure>","more":"<p>rest参数必须放到参数最后,否则就会报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">function</span> fn(a,b,...args) &#123;</span><br><span class=\"line\">  console.log(a);</span><br><span class=\"line\">  console.log(b);</span><br><span class=\"line\">  console.log(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(1,2,3,4,5,6,7,8,9);</span><br><span class=\"line\">//1</span><br><span class=\"line\">//2</span><br><span class=\"line\">//[3,4,5,6,7,8,9]</span><br></pre></td></tr></table></figure>\n<p>rest参数放在a和b中，获取最前面，都会报错。</p>"},{"title":"ES6-变量的解构赋值","date":"2021-05-16T14:26:17.000Z","_content":"定义：ES6 允许按照一定模式从数组和对象中提取值，对变量进行赋值，这被称为解构赋值.\n\n### 数组的解构\n``` bash\n        const happy = ['aa','bb','cc','dd'];\n        let [a,b,c,d] = happy;\n        console.log(a); //aa\n        console.log(b); //bb\n        console.log(c); //cc\n        console.log(d); //dd\n```\n\n### 对象的解构\n<!-- more -->\n``` bash\n        const zhao = {\n            name:'赵本山',\n            age:'不详',\n            xiaoping: function(){\n                console.log('我可以演很多的小品');\n            }\n        }\n        let {name,age,xiaoping} = zhao;\n        console.log(xiaoping); //ƒ (){console.log('我可以演很多的小品');}\n        console.log(name); //赵本山\n        console.log(age); //不详\n        xiaoping(); //我可以演很多小品\n```","source":"_posts/ES6-变量的解构赋值.md","raw":"---\ntitle: ES6-变量的解构赋值\ndate: 2021-05-16 22:26:17\ntags:  ES6 变量的解构赋值\n---\n定义：ES6 允许按照一定模式从数组和对象中提取值，对变量进行赋值，这被称为解构赋值.\n\n### 数组的解构\n``` bash\n        const happy = ['aa','bb','cc','dd'];\n        let [a,b,c,d] = happy;\n        console.log(a); //aa\n        console.log(b); //bb\n        console.log(c); //cc\n        console.log(d); //dd\n```\n\n### 对象的解构\n<!-- more -->\n``` bash\n        const zhao = {\n            name:'赵本山',\n            age:'不详',\n            xiaoping: function(){\n                console.log('我可以演很多的小品');\n            }\n        }\n        let {name,age,xiaoping} = zhao;\n        console.log(xiaoping); //ƒ (){console.log('我可以演很多的小品');}\n        console.log(name); //赵本山\n        console.log(age); //不详\n        xiaoping(); //我可以演很多小品\n```","slug":"ES6-变量的解构赋值","published":1,"updated":"2021-06-09T09:48:07.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a53000j3gvob0r916fe","content":"<p>定义：ES6 允许按照一定模式从数组和对象中提取值，对变量进行赋值，这被称为解构赋值.</p>\n<h3 id=\"数组的解构\"><a href=\"#数组的解构\" class=\"headerlink\" title=\"数组的解构\"></a>数组的解构</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const happy = [<span class=\"string\">&#x27;aa&#x27;</span>,<span class=\"string\">&#x27;bb&#x27;</span>,<span class=\"string\">&#x27;cc&#x27;</span>,<span class=\"string\">&#x27;dd&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">let</span> [a,b,c,d] = happy;</span><br><span class=\"line\">console.log(a); //aa</span><br><span class=\"line\">console.log(b); //bb</span><br><span class=\"line\">console.log(c); //cc</span><br><span class=\"line\">console.log(d); //dd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象的解构\"><a href=\"#对象的解构\" class=\"headerlink\" title=\"对象的解构\"></a>对象的解构</h3><span id=\"more\"></span>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const zhao = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">&#x27;赵本山&#x27;</span>,</span><br><span class=\"line\">    age:<span class=\"string\">&#x27;不详&#x27;</span>,</span><br><span class=\"line\">    xiaoping: <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">&#x27;我可以演很多的小品&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">let</span> &#123;name,age,xiaoping&#125; = zhao;</span><br><span class=\"line\">console.log(xiaoping); //ƒ ()&#123;console.log(<span class=\"string\">&#x27;我可以演很多的小品&#x27;</span>);&#125;</span><br><span class=\"line\">console.log(name); //赵本山</span><br><span class=\"line\">console.log(age); //不详</span><br><span class=\"line\">xiaoping(); //我可以演很多小品</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>定义：ES6 允许按照一定模式从数组和对象中提取值，对变量进行赋值，这被称为解构赋值.</p>\n<h3 id=\"数组的解构\"><a href=\"#数组的解构\" class=\"headerlink\" title=\"数组的解构\"></a>数组的解构</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const happy = [<span class=\"string\">&#x27;aa&#x27;</span>,<span class=\"string\">&#x27;bb&#x27;</span>,<span class=\"string\">&#x27;cc&#x27;</span>,<span class=\"string\">&#x27;dd&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">let</span> [a,b,c,d] = happy;</span><br><span class=\"line\">console.log(a); //aa</span><br><span class=\"line\">console.log(b); //bb</span><br><span class=\"line\">console.log(c); //cc</span><br><span class=\"line\">console.log(d); //dd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象的解构\"><a href=\"#对象的解构\" class=\"headerlink\" title=\"对象的解构\"></a>对象的解构</h3>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const zhao = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">&#x27;赵本山&#x27;</span>,</span><br><span class=\"line\">    age:<span class=\"string\">&#x27;不详&#x27;</span>,</span><br><span class=\"line\">    xiaoping: <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">&#x27;我可以演很多的小品&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">let</span> &#123;name,age,xiaoping&#125; = zhao;</span><br><span class=\"line\">console.log(xiaoping); //ƒ ()&#123;console.log(<span class=\"string\">&#x27;我可以演很多的小品&#x27;</span>);&#125;</span><br><span class=\"line\">console.log(name); //赵本山</span><br><span class=\"line\">console.log(age); //不详</span><br><span class=\"line\">xiaoping(); //我可以演很多小品</span><br></pre></td></tr></table></figure>"},{"title":"ES6-函数参数的默认值设置","date":"2021-06-01T15:16:37.000Z","_content":"ES6 允许给函数参数赋值初始值\n### 1.形参初始值  具有默认值的参数，一般位置要靠后(潜规则)\n```bash\n            function add(a,b,c = 10) {\n                return a + b + c;\n              }\n              let result = add(1,2);\n              console.log(result);//13\n            //如果把c放在a和b中间，b就会没有赋值，打印的是NAN\n```\n\n### 2.与解构赋值结合\n```bash\n            function connect({host,username,password,port}) {\n                // console.log(option.username);//xiaohao\n                // console.log(option.password);//123456\n                //如果这样写，每次都要调用option，麻烦，可以直接使用解构赋值\n                console.log(host);//127.0.0.1\n                console.log(username);//xiaohao\n                console.log(password);//123456\n                console.log(port);//3306\n\n                //形参可以写成host=\"127.1.1.1\"默认值,如果实参没有host\n                //那console.log(host)就会打印默认值，否则就打印实参\n              }\n              connect({\n                  host:'127.0.0.1',\n                  username:'xiaohao',\n                  password:'123456',\n                  port:3306\n              })\n```\n<!-- more -->","source":"_posts/ES6-函数参数的默认值设置.md","raw":"---\ntitle: ES6-函数参数的默认值设置\ndate: 2021-06-01 23:16:37\ntags: ES6 函数参数的默认值设置\n---\nES6 允许给函数参数赋值初始值\n### 1.形参初始值  具有默认值的参数，一般位置要靠后(潜规则)\n```bash\n            function add(a,b,c = 10) {\n                return a + b + c;\n              }\n              let result = add(1,2);\n              console.log(result);//13\n            //如果把c放在a和b中间，b就会没有赋值，打印的是NAN\n```\n\n### 2.与解构赋值结合\n```bash\n            function connect({host,username,password,port}) {\n                // console.log(option.username);//xiaohao\n                // console.log(option.password);//123456\n                //如果这样写，每次都要调用option，麻烦，可以直接使用解构赋值\n                console.log(host);//127.0.0.1\n                console.log(username);//xiaohao\n                console.log(password);//123456\n                console.log(port);//3306\n\n                //形参可以写成host=\"127.1.1.1\"默认值,如果实参没有host\n                //那console.log(host)就会打印默认值，否则就打印实参\n              }\n              connect({\n                  host:'127.0.0.1',\n                  username:'xiaohao',\n                  password:'123456',\n                  port:3306\n              })\n```\n<!-- more -->","slug":"ES6-函数参数的默认值设置","published":1,"updated":"2021-06-09T09:48:38.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a55000m3gvoe0gx543r","content":"<p>ES6 允许给函数参数赋值初始值</p>\n<h3 id=\"1-形参初始值-具有默认值的参数，一般位置要靠后-潜规则\"><a href=\"#1-形参初始值-具有默认值的参数，一般位置要靠后-潜规则\" class=\"headerlink\" title=\"1.形参初始值  具有默认值的参数，一般位置要靠后(潜规则)\"></a>1.形参初始值  具有默认值的参数，一般位置要靠后(潜规则)</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> add(a,b,c = 10) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> a + b + c;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">let</span> result = add(1,2);</span><br><span class=\"line\">  console.log(result);//13</span><br><span class=\"line\">//如果把c放在a和b中间，b就会没有赋值，打印的是NAN</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-与解构赋值结合\"><a href=\"#2-与解构赋值结合\" class=\"headerlink\" title=\"2.与解构赋值结合\"></a>2.与解构赋值结合</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> connect(&#123;host,username,password,port&#125;) &#123;</span><br><span class=\"line\">    // console.log(option.username);//xiaohao</span><br><span class=\"line\">    // console.log(option.password);//123456</span><br><span class=\"line\">    //如果这样写，每次都要调用option，麻烦，可以直接使用解构赋值</span><br><span class=\"line\">    console.log(host);//127.0.0.1</span><br><span class=\"line\">    console.log(username);//xiaohao</span><br><span class=\"line\">    console.log(password);//123456</span><br><span class=\"line\">    console.log(port);//3306</span><br><span class=\"line\"></span><br><span class=\"line\">    //形参可以写成host=<span class=\"string\">&quot;127.1.1.1&quot;</span>默认值,如果实参没有host</span><br><span class=\"line\">    //那console.log(host)就会打印默认值，否则就打印实参</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  connect(&#123;</span><br><span class=\"line\">      host:<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,</span><br><span class=\"line\">      username:<span class=\"string\">&#x27;xiaohao&#x27;</span>,</span><br><span class=\"line\">      password:<span class=\"string\">&#x27;123456&#x27;</span>,</span><br><span class=\"line\">      port:3306</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>","site":{"data":{}},"excerpt":"<p>ES6 允许给函数参数赋值初始值</p>\n<h3 id=\"1-形参初始值-具有默认值的参数，一般位置要靠后-潜规则\"><a href=\"#1-形参初始值-具有默认值的参数，一般位置要靠后-潜规则\" class=\"headerlink\" title=\"1.形参初始值  具有默认值的参数，一般位置要靠后(潜规则)\"></a>1.形参初始值  具有默认值的参数，一般位置要靠后(潜规则)</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> add(a,b,c = 10) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> a + b + c;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">let</span> result = add(1,2);</span><br><span class=\"line\">  console.log(result);//13</span><br><span class=\"line\">//如果把c放在a和b中间，b就会没有赋值，打印的是NAN</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-与解构赋值结合\"><a href=\"#2-与解构赋值结合\" class=\"headerlink\" title=\"2.与解构赋值结合\"></a>2.与解构赋值结合</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> connect(&#123;host,username,password,port&#125;) &#123;</span><br><span class=\"line\">    // console.log(option.username);//xiaohao</span><br><span class=\"line\">    // console.log(option.password);//123456</span><br><span class=\"line\">    //如果这样写，每次都要调用option，麻烦，可以直接使用解构赋值</span><br><span class=\"line\">    console.log(host);//127.0.0.1</span><br><span class=\"line\">    console.log(username);//xiaohao</span><br><span class=\"line\">    console.log(password);//123456</span><br><span class=\"line\">    console.log(port);//3306</span><br><span class=\"line\"></span><br><span class=\"line\">    //形参可以写成host=<span class=\"string\">&quot;127.1.1.1&quot;</span>默认值,如果实参没有host</span><br><span class=\"line\">    //那console.log(host)就会打印默认值，否则就打印实参</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  connect(&#123;</span><br><span class=\"line\">      host:<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,</span><br><span class=\"line\">      username:<span class=\"string\">&#x27;xiaohao&#x27;</span>,</span><br><span class=\"line\">      password:<span class=\"string\">&#x27;123456&#x27;</span>,</span><br><span class=\"line\">      port:3306</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>","more":""},{"title":"ES6-对象方法扩展","date":"2021-06-23T04:25:09.000Z","_content":"```bash\n<script>\n        // 1.Object.is 判断两个值是否完全相等\n        console.log(Object.is(120,120));//true  和===差不多\n        console.log(Object.is(NaN,NaN));//true\n        console.log(NaN === NaN);//false\n\n        //2.Object.assign对象的合并\n        const config1 = {\n            host: 'localhost',\n            port: 3306,\n            name: 'root',\n            pass: 'root',\n            test1: 'test'\n        };\n        const config2 = {\n            host: 'http://xiaohao.com',\n            port: 33060,\n            name: 'xiaohao',\n            pass: 'i love you',\n            test2: 'test2'\n        };\n        console.log(Object.assign(config1,config2));//如果同名的话，后面的对象会覆盖前面的对象\n        //3.Object.setPrototypeOf 设置原型对象 Object.getPrototypeof\n        const school = {\n        name:'小豪'\n    }\n    const cities = {\n        xiaoqu:['北京','上海','广州']\n    }\n    Object.setPrototypeOf(school,cities)\n    console.log(Object.getPrototypeOf(school))  //{xiaoqu: Array(2)}\n    console.log(school)  //{name: \"小豪\"}\n    </script>\n```","source":"_posts/ES6-对象方法扩展.md","raw":"---\ntitle: ES6-对象方法扩展\ndate: 2021-06-23 12:25:09\ntags:  ES6 对象方法扩展\n---\n```bash\n<script>\n        // 1.Object.is 判断两个值是否完全相等\n        console.log(Object.is(120,120));//true  和===差不多\n        console.log(Object.is(NaN,NaN));//true\n        console.log(NaN === NaN);//false\n\n        //2.Object.assign对象的合并\n        const config1 = {\n            host: 'localhost',\n            port: 3306,\n            name: 'root',\n            pass: 'root',\n            test1: 'test'\n        };\n        const config2 = {\n            host: 'http://xiaohao.com',\n            port: 33060,\n            name: 'xiaohao',\n            pass: 'i love you',\n            test2: 'test2'\n        };\n        console.log(Object.assign(config1,config2));//如果同名的话，后面的对象会覆盖前面的对象\n        //3.Object.setPrototypeOf 设置原型对象 Object.getPrototypeof\n        const school = {\n        name:'小豪'\n    }\n    const cities = {\n        xiaoqu:['北京','上海','广州']\n    }\n    Object.setPrototypeOf(school,cities)\n    console.log(Object.getPrototypeOf(school))  //{xiaoqu: Array(2)}\n    console.log(school)  //{name: \"小豪\"}\n    </script>\n```","slug":"ES6-对象方法扩展","published":1,"updated":"2021-06-23T04:27:02.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a57000n3gvo05ewe9hl","content":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        // 1.Object.is 判断两个值是否完全相等</span><br><span class=\"line\">        console.log(Object.is(120,120));//true  和===差不多</span><br><span class=\"line\">        console.log(Object.is(NaN,NaN));//true</span><br><span class=\"line\">        console.log(NaN === NaN);//false</span><br><span class=\"line\"></span><br><span class=\"line\">        //2.Object.assign对象的合并</span><br><span class=\"line\">        const config1 = &#123;</span><br><span class=\"line\">            host: <span class=\"string\">&#x27;localhost&#x27;</span>,</span><br><span class=\"line\">            port: 3306,</span><br><span class=\"line\">            name: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">            pass: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">            test1: <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        const config2 = &#123;</span><br><span class=\"line\">            host: <span class=\"string\">&#x27;http://xiaohao.com&#x27;</span>,</span><br><span class=\"line\">            port: 33060,</span><br><span class=\"line\">            name: <span class=\"string\">&#x27;xiaohao&#x27;</span>,</span><br><span class=\"line\">            pass: <span class=\"string\">&#x27;i love you&#x27;</span>,</span><br><span class=\"line\">            test2: <span class=\"string\">&#x27;test2&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        console.log(Object.assign(config1,config2));//如果同名的话，后面的对象会覆盖前面的对象</span><br><span class=\"line\">        //3.Object.setPrototypeOf 设置原型对象 Object.getPrototypeof</span><br><span class=\"line\">        const school = &#123;</span><br><span class=\"line\">        name:<span class=\"string\">&#x27;小豪&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const cities = &#123;</span><br><span class=\"line\">        xiaoqu:[<span class=\"string\">&#x27;北京&#x27;</span>,<span class=\"string\">&#x27;上海&#x27;</span>,<span class=\"string\">&#x27;广州&#x27;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Object.setPrototypeOf(school,cities)</span><br><span class=\"line\">    console.log(Object.getPrototypeOf(school))  //&#123;xiaoqu: Array(2)&#125;</span><br><span class=\"line\">    console.log(school)  //&#123;name: <span class=\"string\">&quot;小豪&quot;</span>&#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        // 1.Object.is 判断两个值是否完全相等</span><br><span class=\"line\">        console.log(Object.is(120,120));//true  和===差不多</span><br><span class=\"line\">        console.log(Object.is(NaN,NaN));//true</span><br><span class=\"line\">        console.log(NaN === NaN);//false</span><br><span class=\"line\"></span><br><span class=\"line\">        //2.Object.assign对象的合并</span><br><span class=\"line\">        const config1 = &#123;</span><br><span class=\"line\">            host: <span class=\"string\">&#x27;localhost&#x27;</span>,</span><br><span class=\"line\">            port: 3306,</span><br><span class=\"line\">            name: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">            pass: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">            test1: <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        const config2 = &#123;</span><br><span class=\"line\">            host: <span class=\"string\">&#x27;http://xiaohao.com&#x27;</span>,</span><br><span class=\"line\">            port: 33060,</span><br><span class=\"line\">            name: <span class=\"string\">&#x27;xiaohao&#x27;</span>,</span><br><span class=\"line\">            pass: <span class=\"string\">&#x27;i love you&#x27;</span>,</span><br><span class=\"line\">            test2: <span class=\"string\">&#x27;test2&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        console.log(Object.assign(config1,config2));//如果同名的话，后面的对象会覆盖前面的对象</span><br><span class=\"line\">        //3.Object.setPrototypeOf 设置原型对象 Object.getPrototypeof</span><br><span class=\"line\">        const school = &#123;</span><br><span class=\"line\">        name:<span class=\"string\">&#x27;小豪&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const cities = &#123;</span><br><span class=\"line\">        xiaoqu:[<span class=\"string\">&#x27;北京&#x27;</span>,<span class=\"string\">&#x27;上海&#x27;</span>,<span class=\"string\">&#x27;广州&#x27;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Object.setPrototypeOf(school,cities)</span><br><span class=\"line\">    console.log(Object.getPrototypeOf(school))  //&#123;xiaoqu: Array(2)&#125;</span><br><span class=\"line\">    console.log(school)  //&#123;name: <span class=\"string\">&quot;小豪&quot;</span>&#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ES6-对象的简化写法","date":"2021-05-16T14:41:04.000Z","_content":"ES6允许在大括号里面，直接写入变量和函数，作为对象的属性和方法\n``` bash\n        let name = 'aaa';\n        let change = function(){\n            console.log('aaa');\n}\n        const school = {\n            name,\n            change,\n            improve(){\n                consolg.log('bbb');\n            }\n                //相当于\n                //improve:function(){\n                // console.log('bbb');\n                // }\n}\nconsole.log(school.improve);\n```\n<!-- more -->","source":"_posts/ES6-对象的简化写法.md","raw":"---\ntitle: ES6-对象的简化写法\ndate: 2021-05-16 22:41:04\ntags: ES6 对象的简化写法\n---\nES6允许在大括号里面，直接写入变量和函数，作为对象的属性和方法\n``` bash\n        let name = 'aaa';\n        let change = function(){\n            console.log('aaa');\n}\n        const school = {\n            name,\n            change,\n            improve(){\n                consolg.log('bbb');\n            }\n                //相当于\n                //improve:function(){\n                // console.log('bbb');\n                // }\n}\nconsole.log(school.improve);\n```\n<!-- more -->","slug":"ES6-对象的简化写法","published":1,"updated":"2021-06-09T09:48:29.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a59000q3gvo1usqetfr","content":"<p>ES6允许在大括号里面，直接写入变量和函数，作为对象的属性和方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">        <span class=\"built_in\">let</span> name = <span class=\"string\">&#x27;aaa&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> change = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&#x27;aaa&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">        const school = &#123;</span><br><span class=\"line\">            name,</span><br><span class=\"line\">            change,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">improve</span></span>()&#123;</span><br><span class=\"line\">                consolg.log(<span class=\"string\">&#x27;bbb&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                //相当于</span><br><span class=\"line\">                //improve:<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">                // console.log(<span class=\"string\">&#x27;bbb&#x27;</span>);</span><br><span class=\"line\">                // &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(school.improve);</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>","site":{"data":{}},"excerpt":"<p>ES6允许在大括号里面，直接写入变量和函数，作为对象的属性和方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">        <span class=\"built_in\">let</span> name = <span class=\"string\">&#x27;aaa&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> change = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&#x27;aaa&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">        const school = &#123;</span><br><span class=\"line\">            name,</span><br><span class=\"line\">            change,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">improve</span></span>()&#123;</span><br><span class=\"line\">                consolg.log(<span class=\"string\">&#x27;bbb&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                //相当于</span><br><span class=\"line\">                //improve:<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">                // console.log(<span class=\"string\">&#x27;bbb&#x27;</span>);</span><br><span class=\"line\">                // &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(school.improve);</span><br></pre></td></tr></table></figure>","more":""},{"title":"ES6-扩展运算符","date":"2021-06-03T06:05:39.000Z","_content":"### [..]扩展运算符能将[数组]转换为逗号分隔的[参数序列]\n```bash\n        //声明一个数组...\n        const tfboys = ['易烊千玺','王源','王俊凯'];\n        \n        //声明一个函数\n        function wang() {\n            console.log(arguments);\n          }\n          wang(tfboys);//0: (3) [\"易烊千玺\", \"王源\", \"王俊凯\"] 只有一个\n          wang(...tfboys);\n        //   0: \"易烊千玺\"\n        //   1: \"王源\"\n        //   2: \"王俊凯\"\n```\n### 扩展运算符的应用\n1)数组的合并\n<!-- more -->\n```bash\n        const kuaizi = ['王太利','肖央'];\n        const fenghuang = ['曾毅','玲花'];\n        //以前的做法就是concat()\n        // const zuixuanxiaopingguo = kuaizi.concat(fenghuang);\n\n        //但现在可以使用扩展运算符\n        const  zuixuanxiaopingguo = [...kuaizi,...fenghuang];\n        console.log(zuixuanxiaopingguo);//['王太利','肖央','曾毅','玲花']\n```\n\n2)数组克隆\n```bash\n        const sanzhihua = ['E','G','M'];\n        const sanyecao = [...sanzhihua];\n        console.log(sanyecao);//['E','G','M']\n```\n\n3)将伪数组转为真正的数组\n```bash \n<body>\n    <div></div>\n    <div></div>\n    <div></div>\n    <script>\n        const divs = document.querySelectorAll('div');\n        const divArr = [...divs];\n        console.log(divArr);//[div,div,div] 变成真正的数组    \n    </script>\n</body>\n```\n\n\n","source":"_posts/ES6-扩展运算符.md","raw":"---\ntitle: ES6-扩展运算符\ndate: 2021-06-03 14:05:39\ntags: ES6 扩展运算符\n---\n### [..]扩展运算符能将[数组]转换为逗号分隔的[参数序列]\n```bash\n        //声明一个数组...\n        const tfboys = ['易烊千玺','王源','王俊凯'];\n        \n        //声明一个函数\n        function wang() {\n            console.log(arguments);\n          }\n          wang(tfboys);//0: (3) [\"易烊千玺\", \"王源\", \"王俊凯\"] 只有一个\n          wang(...tfboys);\n        //   0: \"易烊千玺\"\n        //   1: \"王源\"\n        //   2: \"王俊凯\"\n```\n### 扩展运算符的应用\n1)数组的合并\n<!-- more -->\n```bash\n        const kuaizi = ['王太利','肖央'];\n        const fenghuang = ['曾毅','玲花'];\n        //以前的做法就是concat()\n        // const zuixuanxiaopingguo = kuaizi.concat(fenghuang);\n\n        //但现在可以使用扩展运算符\n        const  zuixuanxiaopingguo = [...kuaizi,...fenghuang];\n        console.log(zuixuanxiaopingguo);//['王太利','肖央','曾毅','玲花']\n```\n\n2)数组克隆\n```bash\n        const sanzhihua = ['E','G','M'];\n        const sanyecao = [...sanzhihua];\n        console.log(sanyecao);//['E','G','M']\n```\n\n3)将伪数组转为真正的数组\n```bash \n<body>\n    <div></div>\n    <div></div>\n    <div></div>\n    <script>\n        const divs = document.querySelectorAll('div');\n        const divArr = [...divs];\n        console.log(divArr);//[div,div,div] 变成真正的数组    \n    </script>\n</body>\n```\n\n\n","slug":"ES6-扩展运算符","published":1,"updated":"2021-06-09T09:48:54.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a5b000s3gvogcze1wci","content":"<h3 id=\"扩展运算符能将-数组-转换为逗号分隔的-参数序列\"><a href=\"#扩展运算符能将-数组-转换为逗号分隔的-参数序列\" class=\"headerlink\" title=\"[..]扩展运算符能将[数组]转换为逗号分隔的[参数序列]\"></a>[..]扩展运算符能将[数组]转换为逗号分隔的[参数序列]</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//声明一个数组...</span><br><span class=\"line\">const tfboys = [<span class=\"string\">&#x27;易烊千玺&#x27;</span>,<span class=\"string\">&#x27;王源&#x27;</span>,<span class=\"string\">&#x27;王俊凯&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">//声明一个函数</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">wang</span></span>() &#123;</span><br><span class=\"line\">    console.log(arguments);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  wang(tfboys);//0: (3) [<span class=\"string\">&quot;易烊千玺&quot;</span>, <span class=\"string\">&quot;王源&quot;</span>, <span class=\"string\">&quot;王俊凯&quot;</span>] 只有一个</span><br><span class=\"line\">  wang(...tfboys);</span><br><span class=\"line\">//   0: <span class=\"string\">&quot;易烊千玺&quot;</span></span><br><span class=\"line\">//   1: <span class=\"string\">&quot;王源&quot;</span></span><br><span class=\"line\">//   2: <span class=\"string\">&quot;王俊凯&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"扩展运算符的应用\"><a href=\"#扩展运算符的应用\" class=\"headerlink\" title=\"扩展运算符的应用\"></a>扩展运算符的应用</h3><p>1)数组的合并</p>\n<span id=\"more\"></span>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const kuaizi = [<span class=\"string\">&#x27;王太利&#x27;</span>,<span class=\"string\">&#x27;肖央&#x27;</span>];</span><br><span class=\"line\">const fenghuang = [<span class=\"string\">&#x27;曾毅&#x27;</span>,<span class=\"string\">&#x27;玲花&#x27;</span>];</span><br><span class=\"line\">//以前的做法就是concat()</span><br><span class=\"line\">// const zuixuanxiaopingguo = kuaizi.concat(fenghuang);</span><br><span class=\"line\"></span><br><span class=\"line\">//但现在可以使用扩展运算符</span><br><span class=\"line\">const  zuixuanxiaopingguo = [...kuaizi,...fenghuang];</span><br><span class=\"line\">console.log(zuixuanxiaopingguo);//[<span class=\"string\">&#x27;王太利&#x27;</span>,<span class=\"string\">&#x27;肖央&#x27;</span>,<span class=\"string\">&#x27;曾毅&#x27;</span>,<span class=\"string\">&#x27;玲花&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>2)数组克隆</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const sanzhihua = [<span class=\"string\">&#x27;E&#x27;</span>,<span class=\"string\">&#x27;G&#x27;</span>,<span class=\"string\">&#x27;M&#x27;</span>];</span><br><span class=\"line\">const sanyecao = [...sanzhihua];</span><br><span class=\"line\">console.log(sanyecao);//[<span class=\"string\">&#x27;E&#x27;</span>,<span class=\"string\">&#x27;G&#x27;</span>,<span class=\"string\">&#x27;M&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>3)将伪数组转为真正的数组</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        const divs = document.querySelectorAll(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">        const divArr = [...divs];</span><br><span class=\"line\">        console.log(divArr);//[div,div,div] 变成真正的数组    </span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"<h3 id=\"扩展运算符能将-数组-转换为逗号分隔的-参数序列\"><a href=\"#扩展运算符能将-数组-转换为逗号分隔的-参数序列\" class=\"headerlink\" title=\"[..]扩展运算符能将[数组]转换为逗号分隔的[参数序列]\"></a>[..]扩展运算符能将[数组]转换为逗号分隔的[参数序列]</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//声明一个数组...</span><br><span class=\"line\">const tfboys = [<span class=\"string\">&#x27;易烊千玺&#x27;</span>,<span class=\"string\">&#x27;王源&#x27;</span>,<span class=\"string\">&#x27;王俊凯&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">//声明一个函数</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">wang</span></span>() &#123;</span><br><span class=\"line\">    console.log(arguments);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  wang(tfboys);//0: (3) [<span class=\"string\">&quot;易烊千玺&quot;</span>, <span class=\"string\">&quot;王源&quot;</span>, <span class=\"string\">&quot;王俊凯&quot;</span>] 只有一个</span><br><span class=\"line\">  wang(...tfboys);</span><br><span class=\"line\">//   0: <span class=\"string\">&quot;易烊千玺&quot;</span></span><br><span class=\"line\">//   1: <span class=\"string\">&quot;王源&quot;</span></span><br><span class=\"line\">//   2: <span class=\"string\">&quot;王俊凯&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"扩展运算符的应用\"><a href=\"#扩展运算符的应用\" class=\"headerlink\" title=\"扩展运算符的应用\"></a>扩展运算符的应用</h3><p>1)数组的合并</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const kuaizi = [<span class=\"string\">&#x27;王太利&#x27;</span>,<span class=\"string\">&#x27;肖央&#x27;</span>];</span><br><span class=\"line\">const fenghuang = [<span class=\"string\">&#x27;曾毅&#x27;</span>,<span class=\"string\">&#x27;玲花&#x27;</span>];</span><br><span class=\"line\">//以前的做法就是concat()</span><br><span class=\"line\">// const zuixuanxiaopingguo = kuaizi.concat(fenghuang);</span><br><span class=\"line\"></span><br><span class=\"line\">//但现在可以使用扩展运算符</span><br><span class=\"line\">const  zuixuanxiaopingguo = [...kuaizi,...fenghuang];</span><br><span class=\"line\">console.log(zuixuanxiaopingguo);//[<span class=\"string\">&#x27;王太利&#x27;</span>,<span class=\"string\">&#x27;肖央&#x27;</span>,<span class=\"string\">&#x27;曾毅&#x27;</span>,<span class=\"string\">&#x27;玲花&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>2)数组克隆</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const sanzhihua = [<span class=\"string\">&#x27;E&#x27;</span>,<span class=\"string\">&#x27;G&#x27;</span>,<span class=\"string\">&#x27;M&#x27;</span>];</span><br><span class=\"line\">const sanyecao = [...sanzhihua];</span><br><span class=\"line\">console.log(sanyecao);//[<span class=\"string\">&#x27;E&#x27;</span>,<span class=\"string\">&#x27;G&#x27;</span>,<span class=\"string\">&#x27;M&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>3)将伪数组转为真正的数组</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        const divs = document.querySelectorAll(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">        const divArr = [...divs];</span><br><span class=\"line\">        console.log(divArr);//[div,div,div] 变成真正的数组    </span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ES6-数值扩展","date":"2021-06-23T04:10:35.000Z","_content":"```bash\n<script>\n   // Number.EPSILON是 JavaScript的最小精度，属性的值接近于 2.22044...E-16\n   function equal(a,b){\n       if(Math.abs(a-b) < Number.EPSILON){\n           return true;\n       }else {\n           return false;\n       }\n   }\n\n   console.log(equal(0.1 + 0.2 === 0.3))  //false\n   console.log(equal(0.1+0.2,0.3))  //true\n```\n<!-- more -->\n```bash\n   //二进制和八进制\n   let b = 0b1010; //2进制\n   let o = 0o777;  //8进制\n   let d = 100;    //10进制\n   let x = 0xff;   //16进制\n   console.log(x)   //255\n\n   //检测一个数是否为有限数\n   console.log(Number.isFinite(100));  //true\n   console.log(Number.isFinite(100/0));  //false\n   console.log(Number.isFinite(Infinity));  //false\n\n   //检测一个数值是否为NaN\n   console.log(Number.isNaN(123))  //false\n\n   //字符串转整数\n   console.log(Number.parseInt('5213123love')); //5213123\n   console.log(Number.parseFloat('5.123123神器')); //5.123123\n\n   //判断是否为整数\n   console.log(Number.isInteger(5));  //true\n   console.log(Number.isInteger(2.5)); //false\n   \n   //将小数部分抹除\n   console.log(Math.trunc(3.45345345345)) //3\n\n   //检测一个数到底是正数、负数、还是0\n   console.log(Math.sign(100)) //1\n   console.log(Math.sign(0))  //0\n   console.log(Math.sign(-123)) //-1\n</script>\n```\n","source":"_posts/ES6-数值扩展.md","raw":"---\ntitle: ES6-数值扩展\ndate: 2021-06-23 12:10:35\ntags:  ES6 数值扩展\n---\n```bash\n<script>\n   // Number.EPSILON是 JavaScript的最小精度，属性的值接近于 2.22044...E-16\n   function equal(a,b){\n       if(Math.abs(a-b) < Number.EPSILON){\n           return true;\n       }else {\n           return false;\n       }\n   }\n\n   console.log(equal(0.1 + 0.2 === 0.3))  //false\n   console.log(equal(0.1+0.2,0.3))  //true\n```\n<!-- more -->\n```bash\n   //二进制和八进制\n   let b = 0b1010; //2进制\n   let o = 0o777;  //8进制\n   let d = 100;    //10进制\n   let x = 0xff;   //16进制\n   console.log(x)   //255\n\n   //检测一个数是否为有限数\n   console.log(Number.isFinite(100));  //true\n   console.log(Number.isFinite(100/0));  //false\n   console.log(Number.isFinite(Infinity));  //false\n\n   //检测一个数值是否为NaN\n   console.log(Number.isNaN(123))  //false\n\n   //字符串转整数\n   console.log(Number.parseInt('5213123love')); //5213123\n   console.log(Number.parseFloat('5.123123神器')); //5.123123\n\n   //判断是否为整数\n   console.log(Number.isInteger(5));  //true\n   console.log(Number.isInteger(2.5)); //false\n   \n   //将小数部分抹除\n   console.log(Math.trunc(3.45345345345)) //3\n\n   //检测一个数到底是正数、负数、还是0\n   console.log(Math.sign(100)) //1\n   console.log(Math.sign(0))  //0\n   console.log(Math.sign(-123)) //-1\n</script>\n```\n","slug":"ES6-数值扩展","published":1,"updated":"2021-06-23T04:26:33.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a5d000v3gvo26ko1r4q","content":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">   // Number.EPSILON是 JavaScript的最小精度，属性的值接近于 2.22044...E-16</span><br><span class=\"line\">   <span class=\"keyword\">function</span> equal(a,b)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(Math.abs(a-b) &lt; Number.EPSILON)&#123;</span><br><span class=\"line\">           <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   console.log(equal(0.1 + 0.2 === 0.3))  //false</span><br><span class=\"line\">   console.log(equal(0.1+0.2,0.3))  //true</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">   //二进制和八进制</span><br><span class=\"line\">   <span class=\"built_in\">let</span> b = 0b1010; //2进制</span><br><span class=\"line\">   <span class=\"built_in\">let</span> o = 0o777;  //8进制</span><br><span class=\"line\">   <span class=\"built_in\">let</span> d = 100;    //10进制</span><br><span class=\"line\">   <span class=\"built_in\">let</span> x = 0xff;   //16进制</span><br><span class=\"line\">   console.log(x)   //255</span><br><span class=\"line\"></span><br><span class=\"line\">   //检测一个数是否为有限数</span><br><span class=\"line\">   console.log(Number.isFinite(100));  //true</span><br><span class=\"line\">   console.log(Number.isFinite(100/0));  //false</span><br><span class=\"line\">   console.log(Number.isFinite(Infinity));  //false</span><br><span class=\"line\"></span><br><span class=\"line\">   //检测一个数值是否为NaN</span><br><span class=\"line\">   console.log(Number.isNaN(123))  //false</span><br><span class=\"line\"></span><br><span class=\"line\">   //字符串转整数</span><br><span class=\"line\">   console.log(Number.parseInt(<span class=\"string\">&#x27;5213123love&#x27;</span>)); //5213123</span><br><span class=\"line\">   console.log(Number.parseFloat(<span class=\"string\">&#x27;5.123123神器&#x27;</span>)); //5.123123</span><br><span class=\"line\"></span><br><span class=\"line\">   //判断是否为整数</span><br><span class=\"line\">   console.log(Number.isInteger(5));  //true</span><br><span class=\"line\">   console.log(Number.isInteger(2.5)); //false</span><br><span class=\"line\">   </span><br><span class=\"line\">   //将小数部分抹除</span><br><span class=\"line\">   console.log(Math.trunc(3.45345345345)) //3</span><br><span class=\"line\"></span><br><span class=\"line\">   //检测一个数到底是正数、负数、还是0</span><br><span class=\"line\">   console.log(Math.sign(100)) //1</span><br><span class=\"line\">   console.log(Math.sign(0))  //0</span><br><span class=\"line\">   console.log(Math.sign(-123)) //-1</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">   // Number.EPSILON是 JavaScript的最小精度，属性的值接近于 2.22044...E-16</span><br><span class=\"line\">   <span class=\"keyword\">function</span> equal(a,b)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(Math.abs(a-b) &lt; Number.EPSILON)&#123;</span><br><span class=\"line\">           <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   console.log(equal(0.1 + 0.2 === 0.3))  //false</span><br><span class=\"line\">   console.log(equal(0.1+0.2,0.3))  //true</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">   //二进制和八进制</span><br><span class=\"line\">   <span class=\"built_in\">let</span> b = 0b1010; //2进制</span><br><span class=\"line\">   <span class=\"built_in\">let</span> o = 0o777;  //8进制</span><br><span class=\"line\">   <span class=\"built_in\">let</span> d = 100;    //10进制</span><br><span class=\"line\">   <span class=\"built_in\">let</span> x = 0xff;   //16进制</span><br><span class=\"line\">   console.log(x)   //255</span><br><span class=\"line\"></span><br><span class=\"line\">   //检测一个数是否为有限数</span><br><span class=\"line\">   console.log(Number.isFinite(100));  //true</span><br><span class=\"line\">   console.log(Number.isFinite(100/0));  //false</span><br><span class=\"line\">   console.log(Number.isFinite(Infinity));  //false</span><br><span class=\"line\"></span><br><span class=\"line\">   //检测一个数值是否为NaN</span><br><span class=\"line\">   console.log(Number.isNaN(123))  //false</span><br><span class=\"line\"></span><br><span class=\"line\">   //字符串转整数</span><br><span class=\"line\">   console.log(Number.parseInt(<span class=\"string\">&#x27;5213123love&#x27;</span>)); //5213123</span><br><span class=\"line\">   console.log(Number.parseFloat(<span class=\"string\">&#x27;5.123123神器&#x27;</span>)); //5.123123</span><br><span class=\"line\"></span><br><span class=\"line\">   //判断是否为整数</span><br><span class=\"line\">   console.log(Number.isInteger(5));  //true</span><br><span class=\"line\">   console.log(Number.isInteger(2.5)); //false</span><br><span class=\"line\">   </span><br><span class=\"line\">   //将小数部分抹除</span><br><span class=\"line\">   console.log(Math.trunc(3.45345345345)) //3</span><br><span class=\"line\"></span><br><span class=\"line\">   //检测一个数到底是正数、负数、还是0</span><br><span class=\"line\">   console.log(Math.sign(100)) //1</span><br><span class=\"line\">   console.log(Math.sign(0))  //0</span><br><span class=\"line\">   console.log(Math.sign(-123)) //-1</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ES6-模板字符串","date":"2021-05-16T14:34:24.000Z","_content":"### 1.声明\n``` bash\n        let str = `这么巧，我也是一个字符串！`;\n        console.log(str,typeof str);\n```\n    \n### 2.内容中可以直接出现换行符\n在使用append时，就知道有多算爽了\n注意：使用的是``,TAB键上面那个符号\n``` bash\n        let ul = `<ul>\n\t\t\t        <li>xiaohao</li>\n\t\t\t        <li>小豪</li>\n                    <li>小豪豪</li>\n                    <li>宝贝</li>\n\t\t          </ul>`\n        console.log(ul);\n```\n\n### 3.拼接字符串\n``` bash\n        let name = '小豪';\n        let out = `${name}是最帅的`;\n        console.log(out);\n```\n<!-- more -->","source":"_posts/ES6-模板字符串.md","raw":"---\ntitle: ES6-模板字符串\ndate: 2021-05-16 22:34:24\ntags: ES6 模板字符串\n---\n### 1.声明\n``` bash\n        let str = `这么巧，我也是一个字符串！`;\n        console.log(str,typeof str);\n```\n    \n### 2.内容中可以直接出现换行符\n在使用append时，就知道有多算爽了\n注意：使用的是``,TAB键上面那个符号\n``` bash\n        let ul = `<ul>\n\t\t\t        <li>xiaohao</li>\n\t\t\t        <li>小豪</li>\n                    <li>小豪豪</li>\n                    <li>宝贝</li>\n\t\t          </ul>`\n        console.log(ul);\n```\n\n### 3.拼接字符串\n``` bash\n        let name = '小豪';\n        let out = `${name}是最帅的`;\n        console.log(out);\n```\n<!-- more -->","slug":"ES6-模板字符串","published":1,"updated":"2021-06-09T09:49:00.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a5e000w3gvo0d3n8qh8","content":"<h3 id=\"1-声明\"><a href=\"#1-声明\" class=\"headerlink\" title=\"1.声明\"></a>1.声明</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> str = `这么巧，我也是一个字符串！`;</span><br><span class=\"line\">console.log(str,typeof str);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-内容中可以直接出现换行符\"><a href=\"#2-内容中可以直接出现换行符\" class=\"headerlink\" title=\"2.内容中可以直接出现换行符\"></a>2.内容中可以直接出现换行符</h3><p>在使用append时，就知道有多算爽了<br>注意：使用的是``,TAB键上面那个符号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> ul = `&lt;ul&gt;</span><br><span class=\"line\">   &lt;li&gt;xiaohao&lt;/li&gt;</span><br><span class=\"line\">   &lt;li&gt;小豪&lt;/li&gt;</span><br><span class=\"line\">            &lt;li&gt;小豪豪&lt;/li&gt;</span><br><span class=\"line\">            &lt;li&gt;宝贝&lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;`</span><br><span class=\"line\">console.log(ul);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-拼接字符串\"><a href=\"#3-拼接字符串\" class=\"headerlink\" title=\"3.拼接字符串\"></a>3.拼接字符串</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> name = <span class=\"string\">&#x27;小豪&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">let</span> out = `<span class=\"variable\">$&#123;name&#125;</span>是最帅的`;</span><br><span class=\"line\">console.log(out);</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>","site":{"data":{}},"excerpt":"<h3 id=\"1-声明\"><a href=\"#1-声明\" class=\"headerlink\" title=\"1.声明\"></a>1.声明</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> str = `这么巧，我也是一个字符串！`;</span><br><span class=\"line\">console.log(str,typeof str);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-内容中可以直接出现换行符\"><a href=\"#2-内容中可以直接出现换行符\" class=\"headerlink\" title=\"2.内容中可以直接出现换行符\"></a>2.内容中可以直接出现换行符</h3><p>在使用append时，就知道有多算爽了<br>注意：使用的是``,TAB键上面那个符号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> ul = `&lt;ul&gt;</span><br><span class=\"line\">   &lt;li&gt;xiaohao&lt;/li&gt;</span><br><span class=\"line\">   &lt;li&gt;小豪&lt;/li&gt;</span><br><span class=\"line\">            &lt;li&gt;小豪豪&lt;/li&gt;</span><br><span class=\"line\">            &lt;li&gt;宝贝&lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;`</span><br><span class=\"line\">console.log(ul);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-拼接字符串\"><a href=\"#3-拼接字符串\" class=\"headerlink\" title=\"3.拼接字符串\"></a>3.拼接字符串</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> name = <span class=\"string\">&#x27;小豪&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">let</span> out = `<span class=\"variable\">$&#123;name&#125;</span>是最帅的`;</span><br><span class=\"line\">console.log(out);</span><br></pre></td></tr></table></figure>","more":""},{"title":"ES6-箭头函数","date":"2021-05-16T14:50:11.000Z","_content":"ES6允许使用箭头（=>）定义函数,俗称箭头函数\n``` bash\n       //普通写法\n       let fn = function(){\n           return a + b;\n       }\n       //箭头函数写法\n        let fn = (a,b) => {\n            return a + b;\n        }\n        let result = fn(1,2);\n        console.log(result);\n```\n### 1.this是静态的，this始终指向函数声明所在作用域下的this的值\n``` bash\n        function getName() {\n            console.log(this.name);\n          }\n          let getName2 = () =>{\n              console.log(this.name);\n          }\n          //设置window对象的name属性\n          window.name = 'xiaohao';\n          const shcool = {\n              name:'小豪'\n          }\n          //直接调用\n          getName();//xiaohao\n          getName2();//xiaohao\n\n          //call方法调用\n          getName.call(shcool);//小豪\n          getName2.call(shcool);//xiaohao\n```\n<!-- more -->\n### 2.不能作为构造函数\n``` bash\n           let Person = (name,age) => {\n               this.name = name;\n               this.age = age;\n            }\n           let me = new Person('xiaohao',30);\n           console.log(me);//报错\n```\n\n### 3.不能使用arguments变量\n``` bash\n           let fn = () => {console.log(arguments);}\n           fn(1,2,3);\n```\n\n### 4.箭头函数的简写\n1)省略小括号，当形参有且只有一个的时候\n``` bash\n          let add = n => { //let add = (n) => {}\n              return n + n;\n          }\n          console.log(add(9));//18\n```\n2)省略花括号，当代码体只有一条语句的时候，此时return必须省略\n``` bash\n          let pow = n => n * n;//let pow = (n) => {return n * n;}\n          console.log(pow(9));//81\n```\n\n## 箭头函数实践\n1)点击div，两秒后背景颜色变为粉色\n``` bash\n    <style>\n        #ad{\n            width: 100px;\n            height: 100px;\n            background: blue;\n        }\n    </style>\n\n    <div id=\"ad\"></div>\n\n     let ad = document.getElementById('ad');\n          ad.addEventListener(\"click\",function () {\n              //以前的做法\n                //保存this的值\n               let _this = this;\n               setTimeout(function () {\n                   console.log(_this);\n                   _this.style.background = 'pink';\n                 },2000);\n\n            //使用箭头函数\n            //箭头函数指向声明时所在作用域下,this是事件源ad\n                setTimeout(()  => {\n                  console.log(this);\n                  this.style.background = 'pink';\n                },2000);\n            });\n```\n\n2)筛选数组中属于偶数的数\n``` bash\n const arr = [1,6,4,23,26,47];\n                //以前的做法\n            const result = arr.filter(function (item) {\n                if(item % 2 === 0){\n                    return true;\n                    // console.log(result);\n                }else{\n                    return false;\n                }\n              });\n\n              //使用箭头函数\n              const result = arr.filter(item => item % 2 === 0);\n              console.log(result);\n```\n\n·箭头函数适合于this无关的回调：定时器，数组的方法回调\n·箭头函数不适合与this有关的问题：事件回调，对象的方法\n如：\n``` bash\n             let aq = {\n                  name :'nihao',\n                  getName: ()=>{\n                      this.name;//此时的this指向外层作用域\n                      console.log(this.name);\n                  }\n              }\n            aq.getName()\n```","source":"_posts/ES6-箭头函数.md","raw":"---\ntitle: ES6-箭头函数\ndate: 2021-05-16 22:50:11\ntags: ES6 箭头函数\n---\nES6允许使用箭头（=>）定义函数,俗称箭头函数\n``` bash\n       //普通写法\n       let fn = function(){\n           return a + b;\n       }\n       //箭头函数写法\n        let fn = (a,b) => {\n            return a + b;\n        }\n        let result = fn(1,2);\n        console.log(result);\n```\n### 1.this是静态的，this始终指向函数声明所在作用域下的this的值\n``` bash\n        function getName() {\n            console.log(this.name);\n          }\n          let getName2 = () =>{\n              console.log(this.name);\n          }\n          //设置window对象的name属性\n          window.name = 'xiaohao';\n          const shcool = {\n              name:'小豪'\n          }\n          //直接调用\n          getName();//xiaohao\n          getName2();//xiaohao\n\n          //call方法调用\n          getName.call(shcool);//小豪\n          getName2.call(shcool);//xiaohao\n```\n<!-- more -->\n### 2.不能作为构造函数\n``` bash\n           let Person = (name,age) => {\n               this.name = name;\n               this.age = age;\n            }\n           let me = new Person('xiaohao',30);\n           console.log(me);//报错\n```\n\n### 3.不能使用arguments变量\n``` bash\n           let fn = () => {console.log(arguments);}\n           fn(1,2,3);\n```\n\n### 4.箭头函数的简写\n1)省略小括号，当形参有且只有一个的时候\n``` bash\n          let add = n => { //let add = (n) => {}\n              return n + n;\n          }\n          console.log(add(9));//18\n```\n2)省略花括号，当代码体只有一条语句的时候，此时return必须省略\n``` bash\n          let pow = n => n * n;//let pow = (n) => {return n * n;}\n          console.log(pow(9));//81\n```\n\n## 箭头函数实践\n1)点击div，两秒后背景颜色变为粉色\n``` bash\n    <style>\n        #ad{\n            width: 100px;\n            height: 100px;\n            background: blue;\n        }\n    </style>\n\n    <div id=\"ad\"></div>\n\n     let ad = document.getElementById('ad');\n          ad.addEventListener(\"click\",function () {\n              //以前的做法\n                //保存this的值\n               let _this = this;\n               setTimeout(function () {\n                   console.log(_this);\n                   _this.style.background = 'pink';\n                 },2000);\n\n            //使用箭头函数\n            //箭头函数指向声明时所在作用域下,this是事件源ad\n                setTimeout(()  => {\n                  console.log(this);\n                  this.style.background = 'pink';\n                },2000);\n            });\n```\n\n2)筛选数组中属于偶数的数\n``` bash\n const arr = [1,6,4,23,26,47];\n                //以前的做法\n            const result = arr.filter(function (item) {\n                if(item % 2 === 0){\n                    return true;\n                    // console.log(result);\n                }else{\n                    return false;\n                }\n              });\n\n              //使用箭头函数\n              const result = arr.filter(item => item % 2 === 0);\n              console.log(result);\n```\n\n·箭头函数适合于this无关的回调：定时器，数组的方法回调\n·箭头函数不适合与this有关的问题：事件回调，对象的方法\n如：\n``` bash\n             let aq = {\n                  name :'nihao',\n                  getName: ()=>{\n                      this.name;//此时的this指向外层作用域\n                      console.log(this.name);\n                  }\n              }\n            aq.getName()\n```","slug":"ES6-箭头函数","published":1,"updated":"2021-06-09T09:48:44.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a5f000y3gvocywee19i","content":"<p>ES6允许使用箭头（=&gt;）定义函数,俗称箭头函数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//普通写法</span><br><span class=\"line\"><span class=\"built_in\">let</span> fn = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//箭头函数写法</span><br><span class=\"line\"> <span class=\"built_in\">let</span> fn = (a,b) =&gt; &#123;</span><br><span class=\"line\">     <span class=\"built_in\">return</span> a + b;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"built_in\">let</span> result = fn(1,2);</span><br><span class=\"line\"> console.log(result);</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-this是静态的，this始终指向函数声明所在作用域下的this的值\"><a href=\"#1-this是静态的，this始终指向函数声明所在作用域下的this的值\" class=\"headerlink\" title=\"1.this是静态的，this始终指向函数声明所在作用域下的this的值\"></a>1.this是静态的，this始终指向函数声明所在作用域下的this的值</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">getName</span></span>() &#123;</span><br><span class=\"line\">    console.log(this.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">let</span> getName2 = () =&gt;&#123;</span><br><span class=\"line\">      console.log(this.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //设置window对象的name属性</span><br><span class=\"line\">  window.name = <span class=\"string\">&#x27;xiaohao&#x27;</span>;</span><br><span class=\"line\">  const shcool = &#123;</span><br><span class=\"line\">      name:<span class=\"string\">&#x27;小豪&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //直接调用</span><br><span class=\"line\">  getName();//xiaohao</span><br><span class=\"line\">  getName2();//xiaohao</span><br><span class=\"line\"></span><br><span class=\"line\">  //call方法调用</span><br><span class=\"line\">  getName.call(shcool);//小豪</span><br><span class=\"line\">  getName2.call(shcool);//xiaohao</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"2-不能作为构造函数\"><a href=\"#2-不能作为构造函数\" class=\"headerlink\" title=\"2.不能作为构造函数\"></a>2.不能作为构造函数</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> Person = (name,age) =&gt; &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"built_in\">let</span> me = new Person(<span class=\"string\">&#x27;xiaohao&#x27;</span>,30);</span><br><span class=\"line\">console.log(me);//报错</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-不能使用arguments变量\"><a href=\"#3-不能使用arguments变量\" class=\"headerlink\" title=\"3.不能使用arguments变量\"></a>3.不能使用arguments变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> fn = () =&gt; &#123;console.log(arguments);&#125;</span><br><span class=\"line\">fn(1,2,3);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-箭头函数的简写\"><a href=\"#4-箭头函数的简写\" class=\"headerlink\" title=\"4.箭头函数的简写\"></a>4.箭头函数的简写</h3><p>1)省略小括号，当形参有且只有一个的时候</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> add = n =&gt; &#123; //let add = (n) =&gt; &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> n + n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(add(9));//18</span><br></pre></td></tr></table></figure>\n<p>2)省略花括号，当代码体只有一条语句的时候，此时return必须省略</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> pow = n =&gt; n * n;//let pow = (n) =&gt; &#123;<span class=\"built_in\">return</span> n * n;&#125;</span><br><span class=\"line\">console.log(pow(9));//81</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"箭头函数实践\"><a href=\"#箭头函数实践\" class=\"headerlink\" title=\"箭头函数实践\"></a>箭头函数实践</h2><p>1)点击div，两秒后背景颜色变为粉色</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    <span class=\"comment\">#ad&#123;</span></span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        height: 100px;</span><br><span class=\"line\">        background: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div <span class=\"built_in\">id</span>=<span class=\"string\">&quot;ad&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">let</span> ad = document.getElementById(<span class=\"string\">&#x27;ad&#x27;</span>);</span><br><span class=\"line\">      ad.addEventListener(<span class=\"string\">&quot;click&quot;</span>,<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">          //以前的做法</span><br><span class=\"line\">            //保存this的值</span><br><span class=\"line\">           <span class=\"built_in\">let</span> _this = this;</span><br><span class=\"line\">           setTimeout(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">               console.log(_this);</span><br><span class=\"line\">               _this.style.background = <span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">             &#125;,2000);</span><br><span class=\"line\"></span><br><span class=\"line\">        //使用箭头函数</span><br><span class=\"line\">        //箭头函数指向声明时所在作用域下,this是事件源ad</span><br><span class=\"line\">            setTimeout(()  =&gt; &#123;</span><br><span class=\"line\">              console.log(this);</span><br><span class=\"line\">              this.style.background = <span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">            &#125;,2000);</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>2)筛选数组中属于偶数的数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const arr = [1,6,4,23,26,47];</span><br><span class=\"line\">               //以前的做法</span><br><span class=\"line\">           const result = arr.filter(<span class=\"keyword\">function</span> (item) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(item % 2 === 0)&#123;</span><br><span class=\"line\">                   <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                   // console.log(result);</span><br><span class=\"line\">               &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                   <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">             //使用箭头函数</span><br><span class=\"line\">             const result = arr.filter(item =&gt; item % 2 === 0);</span><br><span class=\"line\">             console.log(result);</span><br></pre></td></tr></table></figure>\n\n<p>·箭头函数适合于this无关的回调：定时器，数组的方法回调<br>·箭头函数不适合与this有关的问题：事件回调，对象的方法<br>如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">let</span> aq = &#123;</span><br><span class=\"line\">      name :<span class=\"string\">&#x27;nihao&#x27;</span>,</span><br><span class=\"line\">      getName: ()=&gt;&#123;</span><br><span class=\"line\">          this.name;//此时的this指向外层作用域</span><br><span class=\"line\">          console.log(this.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">aq.getName()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>ES6允许使用箭头（=&gt;）定义函数,俗称箭头函数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//普通写法</span><br><span class=\"line\"><span class=\"built_in\">let</span> fn = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//箭头函数写法</span><br><span class=\"line\"> <span class=\"built_in\">let</span> fn = (a,b) =&gt; &#123;</span><br><span class=\"line\">     <span class=\"built_in\">return</span> a + b;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"built_in\">let</span> result = fn(1,2);</span><br><span class=\"line\"> console.log(result);</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-this是静态的，this始终指向函数声明所在作用域下的this的值\"><a href=\"#1-this是静态的，this始终指向函数声明所在作用域下的this的值\" class=\"headerlink\" title=\"1.this是静态的，this始终指向函数声明所在作用域下的this的值\"></a>1.this是静态的，this始终指向函数声明所在作用域下的this的值</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">getName</span></span>() &#123;</span><br><span class=\"line\">    console.log(this.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">let</span> getName2 = () =&gt;&#123;</span><br><span class=\"line\">      console.log(this.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //设置window对象的name属性</span><br><span class=\"line\">  window.name = <span class=\"string\">&#x27;xiaohao&#x27;</span>;</span><br><span class=\"line\">  const shcool = &#123;</span><br><span class=\"line\">      name:<span class=\"string\">&#x27;小豪&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //直接调用</span><br><span class=\"line\">  getName();//xiaohao</span><br><span class=\"line\">  getName2();//xiaohao</span><br><span class=\"line\"></span><br><span class=\"line\">  //call方法调用</span><br><span class=\"line\">  getName.call(shcool);//小豪</span><br><span class=\"line\">  getName2.call(shcool);//xiaohao</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"2-不能作为构造函数\"><a href=\"#2-不能作为构造函数\" class=\"headerlink\" title=\"2.不能作为构造函数\"></a>2.不能作为构造函数</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> Person = (name,age) =&gt; &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"built_in\">let</span> me = new Person(<span class=\"string\">&#x27;xiaohao&#x27;</span>,30);</span><br><span class=\"line\">console.log(me);//报错</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-不能使用arguments变量\"><a href=\"#3-不能使用arguments变量\" class=\"headerlink\" title=\"3.不能使用arguments变量\"></a>3.不能使用arguments变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> fn = () =&gt; &#123;console.log(arguments);&#125;</span><br><span class=\"line\">fn(1,2,3);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-箭头函数的简写\"><a href=\"#4-箭头函数的简写\" class=\"headerlink\" title=\"4.箭头函数的简写\"></a>4.箭头函数的简写</h3><p>1)省略小括号，当形参有且只有一个的时候</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> add = n =&gt; &#123; //let add = (n) =&gt; &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> n + n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(add(9));//18</span><br></pre></td></tr></table></figure>\n<p>2)省略花括号，当代码体只有一条语句的时候，此时return必须省略</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> pow = n =&gt; n * n;//let pow = (n) =&gt; &#123;<span class=\"built_in\">return</span> n * n;&#125;</span><br><span class=\"line\">console.log(pow(9));//81</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"箭头函数实践\"><a href=\"#箭头函数实践\" class=\"headerlink\" title=\"箭头函数实践\"></a>箭头函数实践</h2><p>1)点击div，两秒后背景颜色变为粉色</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    <span class=\"comment\">#ad&#123;</span></span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        height: 100px;</span><br><span class=\"line\">        background: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div <span class=\"built_in\">id</span>=<span class=\"string\">&quot;ad&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">let</span> ad = document.getElementById(<span class=\"string\">&#x27;ad&#x27;</span>);</span><br><span class=\"line\">      ad.addEventListener(<span class=\"string\">&quot;click&quot;</span>,<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">          //以前的做法</span><br><span class=\"line\">            //保存this的值</span><br><span class=\"line\">           <span class=\"built_in\">let</span> _this = this;</span><br><span class=\"line\">           setTimeout(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">               console.log(_this);</span><br><span class=\"line\">               _this.style.background = <span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">             &#125;,2000);</span><br><span class=\"line\"></span><br><span class=\"line\">        //使用箭头函数</span><br><span class=\"line\">        //箭头函数指向声明时所在作用域下,this是事件源ad</span><br><span class=\"line\">            setTimeout(()  =&gt; &#123;</span><br><span class=\"line\">              console.log(this);</span><br><span class=\"line\">              this.style.background = <span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">            &#125;,2000);</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>2)筛选数组中属于偶数的数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const arr = [1,6,4,23,26,47];</span><br><span class=\"line\">               //以前的做法</span><br><span class=\"line\">           const result = arr.filter(<span class=\"keyword\">function</span> (item) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(item % 2 === 0)&#123;</span><br><span class=\"line\">                   <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                   // console.log(result);</span><br><span class=\"line\">               &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                   <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">             //使用箭头函数</span><br><span class=\"line\">             const result = arr.filter(item =&gt; item % 2 === 0);</span><br><span class=\"line\">             console.log(result);</span><br></pre></td></tr></table></figure>\n\n<p>·箭头函数适合于this无关的回调：定时器，数组的方法回调<br>·箭头函数不适合与this有关的问题：事件回调，对象的方法<br>如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">let</span> aq = &#123;</span><br><span class=\"line\">      name :<span class=\"string\">&#x27;nihao&#x27;</span>,</span><br><span class=\"line\">      getName: ()=&gt;&#123;</span><br><span class=\"line\">          this.name;//此时的this指向外层作用域</span><br><span class=\"line\">          console.log(this.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">aq.getName()</span><br></pre></td></tr></table></figure>"},{"title":"ES6-迭代器","date":"2021-06-09T09:03:06.000Z","_content":"![alt](one.png)\n<!-- more -->\n![alt](two.png)\n```bash\n   <script>\n        //声明一个数组\n        const xiyou = ['唐僧','孙悟空','猪八戒','沙僧'];\n        for(let v in xiyou){ //保存键名\n            console.log(v);\n        }\n        for(let v of xiyou){ //保存键值\n            console.log(v);\n        }\n\n        let iterator = xiyou[Symbol.iterator]();\n        //调用对象的next方法，每次返回value的值，和done的状态\n        console.log(iterator.next());//{value: \"唐僧\", done: false}\n        console.log(iterator.next());//{value: \"孙悟空\", done: false}\n        console.log(iterator.next());//{value: \"猪八戒\", done: false}\n        console.log(iterator.next());//{value: \"沙僧\", done: false}\n        console.log(iterator.next());//{value: undefined, done: true}\n\n        //应用\n        const banji = {\n    name : \"终极一班\",\n    stus: [\n        'aa',\n        'bb',\n        'cc',\n        'dd'\n    ],\n    [Symbol.iterator](){\n        let index = 0;\n        let _this = this;\n        return {\n            next: () => {\n                if(index < this.stus.length){\n                    const result = {value: _this.stus[index],done: false};\n                    //下标自增\n                    index++;\n                    //返回结果\n                    return result;\n                }else {\n                    return {value: underfined,done:true};\n                }\n            }\n        }\n    }\n}\nfor(let v of banji){\n    console.log(v);  // aa bb cc dd\n}\n        \n    </script>\n```","source":"_posts/ES6-迭代器.md","raw":"---\ntitle: ES6-迭代器\ndate: 2021-06-09 17:03:06\ntags: ES6 迭代器\n---\n![alt](one.png)\n<!-- more -->\n![alt](two.png)\n```bash\n   <script>\n        //声明一个数组\n        const xiyou = ['唐僧','孙悟空','猪八戒','沙僧'];\n        for(let v in xiyou){ //保存键名\n            console.log(v);\n        }\n        for(let v of xiyou){ //保存键值\n            console.log(v);\n        }\n\n        let iterator = xiyou[Symbol.iterator]();\n        //调用对象的next方法，每次返回value的值，和done的状态\n        console.log(iterator.next());//{value: \"唐僧\", done: false}\n        console.log(iterator.next());//{value: \"孙悟空\", done: false}\n        console.log(iterator.next());//{value: \"猪八戒\", done: false}\n        console.log(iterator.next());//{value: \"沙僧\", done: false}\n        console.log(iterator.next());//{value: undefined, done: true}\n\n        //应用\n        const banji = {\n    name : \"终极一班\",\n    stus: [\n        'aa',\n        'bb',\n        'cc',\n        'dd'\n    ],\n    [Symbol.iterator](){\n        let index = 0;\n        let _this = this;\n        return {\n            next: () => {\n                if(index < this.stus.length){\n                    const result = {value: _this.stus[index],done: false};\n                    //下标自增\n                    index++;\n                    //返回结果\n                    return result;\n                }else {\n                    return {value: underfined,done:true};\n                }\n            }\n        }\n    }\n}\nfor(let v of banji){\n    console.log(v);  // aa bb cc dd\n}\n        \n    </script>\n```","slug":"ES6-迭代器","published":1,"updated":"2021-06-09T09:47:25.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a5f00103gvogdcd9kl9","content":"<p><img src=\"one.png\" alt=\"alt\"></p>\n<span id=\"more\"></span>\n<p><img src=\"two.png\" alt=\"alt\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">   &lt;script&gt;</span><br><span class=\"line\">        //声明一个数组</span><br><span class=\"line\">        const xiyou = [<span class=\"string\">&#x27;唐僧&#x27;</span>,<span class=\"string\">&#x27;孙悟空&#x27;</span>,<span class=\"string\">&#x27;猪八戒&#x27;</span>,<span class=\"string\">&#x27;沙僧&#x27;</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> v <span class=\"keyword\">in</span> xiyou)&#123; //保存键名</span><br><span class=\"line\">            console.log(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> v of xiyou)&#123; //保存键值</span><br><span class=\"line\">            console.log(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">let</span> iterator = xiyou[Symbol.iterator]();</span><br><span class=\"line\">        //调用对象的next方法，每次返回value的值，和<span class=\"keyword\">done</span>的状态</span><br><span class=\"line\">        console.log(iterator.next());//&#123;value: <span class=\"string\">&quot;唐僧&quot;</span>, <span class=\"keyword\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        console.log(iterator.next());//&#123;value: <span class=\"string\">&quot;孙悟空&quot;</span>, <span class=\"keyword\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        console.log(iterator.next());//&#123;value: <span class=\"string\">&quot;猪八戒&quot;</span>, <span class=\"keyword\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        console.log(iterator.next());//&#123;value: <span class=\"string\">&quot;沙僧&quot;</span>, <span class=\"keyword\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        console.log(iterator.next());//&#123;value: undefined, <span class=\"keyword\">done</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //应用</span><br><span class=\"line\">        const banji = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">&quot;终极一班&quot;</span>,</span><br><span class=\"line\">    stus: [</span><br><span class=\"line\">        <span class=\"string\">&#x27;aa&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;bb&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;cc&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;dd&#x27;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [Symbol.iterator]()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> index = 0;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> _this = this;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">            next: () =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(index &lt; this.stus.length)&#123;</span><br><span class=\"line\">                    const result = &#123;value: _this.stus[index],<span class=\"keyword\">done</span>: <span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">                    //下标自增</span><br><span class=\"line\">                    index++;</span><br><span class=\"line\">                    //返回结果</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> result;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> &#123;value: underfined,<span class=\"keyword\">done</span>:<span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> v of banji)&#123;</span><br><span class=\"line\">    console.log(v);  // aa bb cc <span class=\"built_in\">dd</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><img src=\"one.png\" alt=\"alt\"></p>","more":"<p><img src=\"two.png\" alt=\"alt\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">   &lt;script&gt;</span><br><span class=\"line\">        //声明一个数组</span><br><span class=\"line\">        const xiyou = [<span class=\"string\">&#x27;唐僧&#x27;</span>,<span class=\"string\">&#x27;孙悟空&#x27;</span>,<span class=\"string\">&#x27;猪八戒&#x27;</span>,<span class=\"string\">&#x27;沙僧&#x27;</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> v <span class=\"keyword\">in</span> xiyou)&#123; //保存键名</span><br><span class=\"line\">            console.log(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> v of xiyou)&#123; //保存键值</span><br><span class=\"line\">            console.log(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">let</span> iterator = xiyou[Symbol.iterator]();</span><br><span class=\"line\">        //调用对象的next方法，每次返回value的值，和<span class=\"keyword\">done</span>的状态</span><br><span class=\"line\">        console.log(iterator.next());//&#123;value: <span class=\"string\">&quot;唐僧&quot;</span>, <span class=\"keyword\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        console.log(iterator.next());//&#123;value: <span class=\"string\">&quot;孙悟空&quot;</span>, <span class=\"keyword\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        console.log(iterator.next());//&#123;value: <span class=\"string\">&quot;猪八戒&quot;</span>, <span class=\"keyword\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        console.log(iterator.next());//&#123;value: <span class=\"string\">&quot;沙僧&quot;</span>, <span class=\"keyword\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        console.log(iterator.next());//&#123;value: undefined, <span class=\"keyword\">done</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //应用</span><br><span class=\"line\">        const banji = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">&quot;终极一班&quot;</span>,</span><br><span class=\"line\">    stus: [</span><br><span class=\"line\">        <span class=\"string\">&#x27;aa&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;bb&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;cc&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;dd&#x27;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [Symbol.iterator]()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> index = 0;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> _this = this;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">            next: () =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(index &lt; this.stus.length)&#123;</span><br><span class=\"line\">                    const result = &#123;value: _this.stus[index],<span class=\"keyword\">done</span>: <span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">                    //下标自增</span><br><span class=\"line\">                    index++;</span><br><span class=\"line\">                    //返回结果</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> result;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> &#123;value: underfined,<span class=\"keyword\">done</span>:<span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> v of banji)&#123;</span><br><span class=\"line\">    console.log(v);  // aa bb cc <span class=\"built_in\">dd</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ES6-集合","date":"2021-06-22T12:59:58.000Z","_content":"### 定义\nES6提供了新的数据结构set(集合）。它类似于数组，但成员的值都是唯一的，集合实现了iterator接口，所以可以使用「扩展运算符』和「 for…of…』进行遍历，集合的属性和方法:\n\n· size返回集合的元素个数\n· add增加一个新元素，返回当前集合\n· delete删除元素，返回boolean值has检测集合中是否包含某个元素，返回boolean值\n\n```bash\n<script>\n    let s = new Set();\n    let s2 = new Set(['1','2','3','4','5']);\n    //元素个数\n    console.log(s2.size);//5\n    //添加新的元素\n    s2.add('6'); //Set(5) {\"1\", \"2\", \"3\", \"4\", \"5\",\"6\"}\n    //删除元素\n    s2.delete('5');\n    console.log(s2); //Set(5) {\"1\", \"2\", \"3\", \"4\",\"6\"}\n    //检测\n    console.log(s2.has('6')); //true\n    //清空\n    s2.clear();\n    console.log(s2);\n\n    //实现了iterator接口，可以使用for of遍历元素\n    for(v of s2){\n        console.log(v);\n    }\n```\n### 集合的应用\n<!-- more -->\n```bash\n    let arr = [1,2,3,4,5,4,3,2,1];\n    //1.数组去重\n    // let result = [...new Set(arr)];\n    //2.交集\n    let arr2 = [4,5,6,5,6];\n    let result = [...new Set(arr)].filter(item=>{\n        let s2 = new Set(arr2);\n        if(s2.has(item)){\n            return true;\n        }else{\n            return false;\n        }\n    });\n    //简化\n    // let result = [...new Set(arr)].filter(item=>new Set(arr2).has(item));\n    console.log(result);\n\n    //3.并集\n    let union = [...new Set([...arr,...arr2])];\n    console.log(union);\n\n    //4.差集\n    let diff = [...new Set(arr)].filter(item=>!(new Set(arr2).has(item)));\n    console.log(diff);\n</script>\n```\n","source":"_posts/ES6-集合.md","raw":"---\ntitle: ES6-集合\ndate: 2021-06-22 20:59:58\ntags:  ES6 集合\n---\n### 定义\nES6提供了新的数据结构set(集合）。它类似于数组，但成员的值都是唯一的，集合实现了iterator接口，所以可以使用「扩展运算符』和「 for…of…』进行遍历，集合的属性和方法:\n\n· size返回集合的元素个数\n· add增加一个新元素，返回当前集合\n· delete删除元素，返回boolean值has检测集合中是否包含某个元素，返回boolean值\n\n```bash\n<script>\n    let s = new Set();\n    let s2 = new Set(['1','2','3','4','5']);\n    //元素个数\n    console.log(s2.size);//5\n    //添加新的元素\n    s2.add('6'); //Set(5) {\"1\", \"2\", \"3\", \"4\", \"5\",\"6\"}\n    //删除元素\n    s2.delete('5');\n    console.log(s2); //Set(5) {\"1\", \"2\", \"3\", \"4\",\"6\"}\n    //检测\n    console.log(s2.has('6')); //true\n    //清空\n    s2.clear();\n    console.log(s2);\n\n    //实现了iterator接口，可以使用for of遍历元素\n    for(v of s2){\n        console.log(v);\n    }\n```\n### 集合的应用\n<!-- more -->\n```bash\n    let arr = [1,2,3,4,5,4,3,2,1];\n    //1.数组去重\n    // let result = [...new Set(arr)];\n    //2.交集\n    let arr2 = [4,5,6,5,6];\n    let result = [...new Set(arr)].filter(item=>{\n        let s2 = new Set(arr2);\n        if(s2.has(item)){\n            return true;\n        }else{\n            return false;\n        }\n    });\n    //简化\n    // let result = [...new Set(arr)].filter(item=>new Set(arr2).has(item));\n    console.log(result);\n\n    //3.并集\n    let union = [...new Set([...arr,...arr2])];\n    console.log(union);\n\n    //4.差集\n    let diff = [...new Set(arr)].filter(item=>!(new Set(arr2).has(item)));\n    console.log(diff);\n</script>\n```\n","slug":"ES6-集合","published":1,"updated":"2021-09-25T11:55:27.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a5g00123gvo99w7498j","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>ES6提供了新的数据结构set(集合）。它类似于数组，但成员的值都是唯一的，集合实现了iterator接口，所以可以使用「扩展运算符』和「 for…of…』进行遍历，集合的属性和方法:</p>\n<p>· size返回集合的元素个数<br>· add增加一个新元素，返回当前集合<br>· delete删除元素，返回boolean值has检测集合中是否包含某个元素，返回boolean值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> s = new Set();</span><br><span class=\"line\">    <span class=\"built_in\">let</span> s2 = new Set([<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"string\">&#x27;5&#x27;</span>]);</span><br><span class=\"line\">    //元素个数</span><br><span class=\"line\">    console.log(s2.size);//5</span><br><span class=\"line\">    //添加新的元素</span><br><span class=\"line\">    s2.add(<span class=\"string\">&#x27;6&#x27;</span>); //Set(5) &#123;<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>, <span class=\"string\">&quot;5&quot;</span>,<span class=\"string\">&quot;6&quot;</span>&#125;</span><br><span class=\"line\">    //删除元素</span><br><span class=\"line\">    s2.delete(<span class=\"string\">&#x27;5&#x27;</span>);</span><br><span class=\"line\">    console.log(s2); //Set(5) &#123;<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>,<span class=\"string\">&quot;6&quot;</span>&#125;</span><br><span class=\"line\">    //检测</span><br><span class=\"line\">    console.log(s2.has(<span class=\"string\">&#x27;6&#x27;</span>)); //true</span><br><span class=\"line\">    //清空</span><br><span class=\"line\">    s2.clear();</span><br><span class=\"line\">    console.log(s2);</span><br><span class=\"line\"></span><br><span class=\"line\">    //实现了iterator接口，可以使用<span class=\"keyword\">for</span> of遍历元素</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(v of s2)&#123;</span><br><span class=\"line\">        console.log(v);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"集合的应用\"><a href=\"#集合的应用\" class=\"headerlink\" title=\"集合的应用\"></a>集合的应用</h3><span id=\"more\"></span>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">let</span> arr = [1,2,3,4,5,4,3,2,1];</span><br><span class=\"line\">    //1.数组去重</span><br><span class=\"line\">    // <span class=\"built_in\">let</span> result = [...new Set(arr)];</span><br><span class=\"line\">    //2.交集</span><br><span class=\"line\">    <span class=\"built_in\">let</span> arr2 = [4,5,6,5,6];</span><br><span class=\"line\">    <span class=\"built_in\">let</span> result = [...new Set(arr)].filter(item=&gt;&#123;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> s2 = new Set(arr2);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s2.has(item))&#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    //简化</span><br><span class=\"line\">    // <span class=\"built_in\">let</span> result = [...new Set(arr)].filter(item=&gt;new Set(arr2).has(item));</span><br><span class=\"line\">    console.log(result);</span><br><span class=\"line\"></span><br><span class=\"line\">    //3.并集</span><br><span class=\"line\">    <span class=\"built_in\">let</span> union = [...new Set([...arr,...arr2])];</span><br><span class=\"line\">    console.log(union);</span><br><span class=\"line\"></span><br><span class=\"line\">    //4.差集</span><br><span class=\"line\">    <span class=\"built_in\">let</span> diff = [...new Set(arr)].filter(item=&gt;!(new Set(arr2).has(item)));</span><br><span class=\"line\">    console.log(diff);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>ES6提供了新的数据结构set(集合）。它类似于数组，但成员的值都是唯一的，集合实现了iterator接口，所以可以使用「扩展运算符』和「 for…of…』进行遍历，集合的属性和方法:</p>\n<p>· size返回集合的元素个数<br>· add增加一个新元素，返回当前集合<br>· delete删除元素，返回boolean值has检测集合中是否包含某个元素，返回boolean值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> s = new Set();</span><br><span class=\"line\">    <span class=\"built_in\">let</span> s2 = new Set([<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"string\">&#x27;5&#x27;</span>]);</span><br><span class=\"line\">    //元素个数</span><br><span class=\"line\">    console.log(s2.size);//5</span><br><span class=\"line\">    //添加新的元素</span><br><span class=\"line\">    s2.add(<span class=\"string\">&#x27;6&#x27;</span>); //Set(5) &#123;<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>, <span class=\"string\">&quot;5&quot;</span>,<span class=\"string\">&quot;6&quot;</span>&#125;</span><br><span class=\"line\">    //删除元素</span><br><span class=\"line\">    s2.delete(<span class=\"string\">&#x27;5&#x27;</span>);</span><br><span class=\"line\">    console.log(s2); //Set(5) &#123;<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>,<span class=\"string\">&quot;6&quot;</span>&#125;</span><br><span class=\"line\">    //检测</span><br><span class=\"line\">    console.log(s2.has(<span class=\"string\">&#x27;6&#x27;</span>)); //true</span><br><span class=\"line\">    //清空</span><br><span class=\"line\">    s2.clear();</span><br><span class=\"line\">    console.log(s2);</span><br><span class=\"line\"></span><br><span class=\"line\">    //实现了iterator接口，可以使用<span class=\"keyword\">for</span> of遍历元素</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(v of s2)&#123;</span><br><span class=\"line\">        console.log(v);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"集合的应用\"><a href=\"#集合的应用\" class=\"headerlink\" title=\"集合的应用\"></a>集合的应用</h3>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">let</span> arr = [1,2,3,4,5,4,3,2,1];</span><br><span class=\"line\">    //1.数组去重</span><br><span class=\"line\">    // <span class=\"built_in\">let</span> result = [...new Set(arr)];</span><br><span class=\"line\">    //2.交集</span><br><span class=\"line\">    <span class=\"built_in\">let</span> arr2 = [4,5,6,5,6];</span><br><span class=\"line\">    <span class=\"built_in\">let</span> result = [...new Set(arr)].filter(item=&gt;&#123;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> s2 = new Set(arr2);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s2.has(item))&#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    //简化</span><br><span class=\"line\">    // <span class=\"built_in\">let</span> result = [...new Set(arr)].filter(item=&gt;new Set(arr2).has(item));</span><br><span class=\"line\">    console.log(result);</span><br><span class=\"line\"></span><br><span class=\"line\">    //3.并集</span><br><span class=\"line\">    <span class=\"built_in\">let</span> union = [...new Set([...arr,...arr2])];</span><br><span class=\"line\">    console.log(union);</span><br><span class=\"line\"></span><br><span class=\"line\">    //4.差集</span><br><span class=\"line\">    <span class=\"built_in\">let</span> diff = [...new Set(arr)].filter(item=&gt;!(new Set(arr2).has(item)));</span><br><span class=\"line\">    console.log(diff);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\njs中的DOM操作\nhttps://www.cnblogs.com/zxt-17862802783/p/7498790.html\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\njs中的DOM操作\nhttps://www.cnblogs.com/zxt-17862802783/p/7498790.html\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-04-03T15:33:56.747Z","updated":"2021-06-06T15:16:19.802Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a5h00153gvo7gjge25r","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<p>js中的DOM操作<br><a href=\"https://www.cnblogs.com/zxt-17862802783/p/7498790.html\">https://www.cnblogs.com/zxt-17862802783/p/7498790.html</a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<p>js中的DOM操作<br><a href=\"https://www.cnblogs.com/zxt-17862802783/p/7498790.html\">https://www.cnblogs.com/zxt-17862802783/p/7498790.html</a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"My New Post","date":"2022-04-02T09:02:06.000Z","_content":"\n## 数字相关的正则表达式\n```\n去空格： /^\\s+|\\s+$/g\n数字： ^[0-9]*$\nn位定长的数字： ^\\d{n}$\nm-n位之间的数字： ^\\d{m,n}$\n零和非零开头的数字： ^(0|[1-9][0-9]*)$\n非零开头的最多带两位小数的数字： ^([1-9][0-9]*)+(.[0-9]{1,2})?$\n带1-2位小数的正数或负数： ^(\\-)?\\d+(\\.\\d{1,2})?$\n正数、负数、和小数： ^(\\-|\\+)?\\d+(\\.\\d+)?$\n有两位小数的正实数： ^[0-9]+(.[0-9]{2})?$\n有1~3位小数的正实数： ^[0-9]+(.[0-9]{1,3})?$\n正整数： ^\\d+$ 或 ^[1-9]\\d*|0$\n负整数： ^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$\n正浮点数： \n^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ \n^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$\n负浮点数： \n^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$\n ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$\n浮点数： ^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$\n```\n## 字符相关的正则表达式\n```\n汉字： ^[\\u4e00-\\u9fa5]{0,}$\n长度为3-20的所有字符： ^.{3,20}$\n由数字和26个英文字母组成的字符串： ^[A-Za-z0-9]+$\n由数字、26个英文字母或者下划线组成的字符串： ^\\w+$ 或 ^\\w{3,20}$\n中文、英文、数字包括下划线： ^[\\u4E00-\\u9FA5A-Za-z0-9_]+$\n中文、英文、数字但不包括下划线等符号： \n^[\\u4E00-\\u9FA5A-Za-z0-9]+$ \n ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$\n帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)： \n^[a-zA-Z][a-zA-Z0-9_]{4,15}$\n密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)： \n^[a-zA-Z]\\w{5,17}$\n强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：\n ^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$\n```\n## 固定格式约定俗成的正则表达式\n```\nEmail地址： ^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$\n网站域名： [a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?\nURL网址： ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=]*)?$\n手机号码： \n^(13[0-9]|17[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$\n\n电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、\n”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)： \n^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$\n国内电话号码(0511-4405222、021-87888822)： \\d{3}-\\d{8}|\\d{4}-\\d{7}\n身份证号(15位、18位数字)： ^\\d{15}|\\d{18}$\n日期格式： ^\\d{4}-\\d{1,2}-\\d{1,2}\n一年的12个月(01～09和1～12)： ^(0?[1-9]|1[0-2])$\n一个月的31天(01～09和1～31)： ^((0?[1-9])|((1|2)[0-9])|30|31)$\n腾讯QQ号： [1-9][0-9]{4,8} (腾讯QQ号从10000开始，目前最长为10位)\n中国邮政编码： [1-9]\\d{5}(?!\\d) (中国邮政编码为6位数字)\nIP地址： \\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用)\nIP地址： ((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))\n```\n## 常用的方法\n### 1.test() \n#### 在字符串中查找符合正则的内容，若查找到返回true,反之返回false.\n```\nvar str = '374829348791';\nvar re = /\\D/; //  \\D代表非数字\nif (re.test(str)) { // 返回true,代表在字符串中找到了非数字。\n    alert('不全是数字');\n} else {\n    alert('全是数字');\n}\n```\n### 2.search() \n####  在字符串搜索符合正则的内容，搜索到就返回出现的位置\n#### （从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1\n```\nvar str = \"abc\"\nvar string = 'abbbbccbebababccbaabcbccbaabbccabcc'\n\nfunction regex(str1, str2) {\n    let regex = new RegExp(str1, \"g\");\n    console.log(str2.search(regex));\n}\nregex(str, string)\n```\n### 3.match() \n#### 在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\n```\nvar str = 'haj123sdk54hask33dkhalsd879';\nvar re = /\\d+/g; // 每次匹配至少一个数字  且全局匹配  如果不是全局匹配，当找到数字123，它就会停止了。就只会弹出123.加上全局匹配，就会从开始到结束一直去搜索符合规则的。如果没有加号，匹配的结果就是1，2，3，5，4，3，3，879并不是我们想要的，有了加号，每次匹配的数字就是至少一个了。\nalert(str.match(re)); // [123，54，33，879]\n```\n### replace() \n#### 查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。 \n```\nvar str = \"我爱北京天安门，天安门上太阳升。\";\nvar re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配\nvar str2 = str.replace(re,'*'); \nalert(str2)  //我爱**，*上太阳升 \n\n//这种只是把找到的变成了一个*，并不能几个字就对应几个*。\nvar str = \"我爱北京天安门，天安门上太阳升。\";\nvar re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配\nvar str2 = str.replace(re,function(str){\n              alert(str); //用来测试：函数的第一个参数代表每次搜索到的符合正则的字符，所以第一次str指的是北京 第二次str是天安门 第三次str是天安门\n            var result = '';\n            for(var i=0;i<str.length;i++){\n                result += '*';\n            }              \n            return result; //所以搜索到了几个字就返回几个* \n        });\nalert(str2)  //我爱*****，***上太阳升         \n\n//整个过程就是，找到北京，替换成了两个*，找到天安门替换成了3个*，找到天安门替换成3个*。\n```\n把2013-6-7替换成2013.6.7\n```\n//整个过程就是利用子项把2013- 6- 分别替换成了2013. 6.  最终弹出2013.6.7\nvar str = '2013-6-7';\nvar re = /(\\d+)(-)/g;\n\nstr = str.replace(re,function($0,$1,$2){\n\n      //replace()中如果有子项，\n      //第一个参数：$0（匹配成功后的整体结果  2013-  6-）,\n      // 第二个参数 : $1(匹配成功的第一个分组，这里指的是\\d   2013, 6)\n      //第三个参数 : $1(匹配成功的第二个分组，这里指的是-    - - )   \n    return $1 + '.';  //分别返回2013.   6.\n\n});\n\nalert( str );   //2013.6.7\n```\n\n找重复项最多的字符个数\n```\n// split():字符串中的方法，把字符串转成数组。\n// sort():数组中的排序方法，按照ACALL码进行排序。\n// join():数组中的方法，把数组转换为字符串\n\nvar str = 'assssjdssskssalsssdkjsssdss';\nvar arr = str.split(''); //把字符串转换为数组\nstr = arr.sort().join(''); //首先进行排序，这样结果会把相同的字符放在一起，然后再转换为字符串\n//alert(str);  // aaddjjkklsssssssssssssssss\n\nvar value = '';\nvar index = 0;\nvar re = /(\\w)\\1+/g;  //匹配字符，且重复这个字符，重复次数至少一次。\nstr.replace(re,function($0,$1){\n  //alert($0);   代表每次匹配成功的结果 : aa dd jj kk l sssssssssssssssss\n  //alert($1);  代表每次匹配成功的第一个子项，也就是\\w:  a d j k l S\n  if(index<$0.length){  //如果index保存的值小于$0的长度就进行下面的操作\n    index = $0.length;  // 这样index一直保存的就在最大的长度\n    value = $1;  //value保存的是出现最多的这个字符\n  }\n});\nconsole.log('最多的字符:'+value+',重复的次数:'+index);  // s   17\n```\n\n查找字符串'abc'在字符串'abbbbccbebababccbaabcbccbaabbccabcc'第一次出现的位置\n```\nvar str = \"abc\"\nvar string = 'abbbbccbebababccbaabcbccbaabbccabcc'\nfunction regex(str1,str2){\n    let regex = new RegExp(str1,\"g\");\n    console.log(str2.search(regex));\n}\nregex(str,string)\n```\n\n","source":"_posts/My-New-Post.md","raw":"---\ntitle: My New Post\ncategories: 正则表达式\ndate: 2022-04-02 17:02:06\ntags:\n  - 正则表达式\n---\n\n## 数字相关的正则表达式\n```\n去空格： /^\\s+|\\s+$/g\n数字： ^[0-9]*$\nn位定长的数字： ^\\d{n}$\nm-n位之间的数字： ^\\d{m,n}$\n零和非零开头的数字： ^(0|[1-9][0-9]*)$\n非零开头的最多带两位小数的数字： ^([1-9][0-9]*)+(.[0-9]{1,2})?$\n带1-2位小数的正数或负数： ^(\\-)?\\d+(\\.\\d{1,2})?$\n正数、负数、和小数： ^(\\-|\\+)?\\d+(\\.\\d+)?$\n有两位小数的正实数： ^[0-9]+(.[0-9]{2})?$\n有1~3位小数的正实数： ^[0-9]+(.[0-9]{1,3})?$\n正整数： ^\\d+$ 或 ^[1-9]\\d*|0$\n负整数： ^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$\n正浮点数： \n^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ \n^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$\n负浮点数： \n^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$\n ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$\n浮点数： ^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$\n```\n## 字符相关的正则表达式\n```\n汉字： ^[\\u4e00-\\u9fa5]{0,}$\n长度为3-20的所有字符： ^.{3,20}$\n由数字和26个英文字母组成的字符串： ^[A-Za-z0-9]+$\n由数字、26个英文字母或者下划线组成的字符串： ^\\w+$ 或 ^\\w{3,20}$\n中文、英文、数字包括下划线： ^[\\u4E00-\\u9FA5A-Za-z0-9_]+$\n中文、英文、数字但不包括下划线等符号： \n^[\\u4E00-\\u9FA5A-Za-z0-9]+$ \n ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$\n帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)： \n^[a-zA-Z][a-zA-Z0-9_]{4,15}$\n密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)： \n^[a-zA-Z]\\w{5,17}$\n强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：\n ^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$\n```\n## 固定格式约定俗成的正则表达式\n```\nEmail地址： ^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$\n网站域名： [a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?\nURL网址： ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=]*)?$\n手机号码： \n^(13[0-9]|17[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$\n\n电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、\n”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)： \n^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$\n国内电话号码(0511-4405222、021-87888822)： \\d{3}-\\d{8}|\\d{4}-\\d{7}\n身份证号(15位、18位数字)： ^\\d{15}|\\d{18}$\n日期格式： ^\\d{4}-\\d{1,2}-\\d{1,2}\n一年的12个月(01～09和1～12)： ^(0?[1-9]|1[0-2])$\n一个月的31天(01～09和1～31)： ^((0?[1-9])|((1|2)[0-9])|30|31)$\n腾讯QQ号： [1-9][0-9]{4,8} (腾讯QQ号从10000开始，目前最长为10位)\n中国邮政编码： [1-9]\\d{5}(?!\\d) (中国邮政编码为6位数字)\nIP地址： \\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用)\nIP地址： ((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))\n```\n## 常用的方法\n### 1.test() \n#### 在字符串中查找符合正则的内容，若查找到返回true,反之返回false.\n```\nvar str = '374829348791';\nvar re = /\\D/; //  \\D代表非数字\nif (re.test(str)) { // 返回true,代表在字符串中找到了非数字。\n    alert('不全是数字');\n} else {\n    alert('全是数字');\n}\n```\n### 2.search() \n####  在字符串搜索符合正则的内容，搜索到就返回出现的位置\n#### （从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1\n```\nvar str = \"abc\"\nvar string = 'abbbbccbebababccbaabcbccbaabbccabcc'\n\nfunction regex(str1, str2) {\n    let regex = new RegExp(str1, \"g\");\n    console.log(str2.search(regex));\n}\nregex(str, string)\n```\n### 3.match() \n#### 在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\n```\nvar str = 'haj123sdk54hask33dkhalsd879';\nvar re = /\\d+/g; // 每次匹配至少一个数字  且全局匹配  如果不是全局匹配，当找到数字123，它就会停止了。就只会弹出123.加上全局匹配，就会从开始到结束一直去搜索符合规则的。如果没有加号，匹配的结果就是1，2，3，5，4，3，3，879并不是我们想要的，有了加号，每次匹配的数字就是至少一个了。\nalert(str.match(re)); // [123，54，33，879]\n```\n### replace() \n#### 查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。 \n```\nvar str = \"我爱北京天安门，天安门上太阳升。\";\nvar re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配\nvar str2 = str.replace(re,'*'); \nalert(str2)  //我爱**，*上太阳升 \n\n//这种只是把找到的变成了一个*，并不能几个字就对应几个*。\nvar str = \"我爱北京天安门，天安门上太阳升。\";\nvar re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配\nvar str2 = str.replace(re,function(str){\n              alert(str); //用来测试：函数的第一个参数代表每次搜索到的符合正则的字符，所以第一次str指的是北京 第二次str是天安门 第三次str是天安门\n            var result = '';\n            for(var i=0;i<str.length;i++){\n                result += '*';\n            }              \n            return result; //所以搜索到了几个字就返回几个* \n        });\nalert(str2)  //我爱*****，***上太阳升         \n\n//整个过程就是，找到北京，替换成了两个*，找到天安门替换成了3个*，找到天安门替换成3个*。\n```\n把2013-6-7替换成2013.6.7\n```\n//整个过程就是利用子项把2013- 6- 分别替换成了2013. 6.  最终弹出2013.6.7\nvar str = '2013-6-7';\nvar re = /(\\d+)(-)/g;\n\nstr = str.replace(re,function($0,$1,$2){\n\n      //replace()中如果有子项，\n      //第一个参数：$0（匹配成功后的整体结果  2013-  6-）,\n      // 第二个参数 : $1(匹配成功的第一个分组，这里指的是\\d   2013, 6)\n      //第三个参数 : $1(匹配成功的第二个分组，这里指的是-    - - )   \n    return $1 + '.';  //分别返回2013.   6.\n\n});\n\nalert( str );   //2013.6.7\n```\n\n找重复项最多的字符个数\n```\n// split():字符串中的方法，把字符串转成数组。\n// sort():数组中的排序方法，按照ACALL码进行排序。\n// join():数组中的方法，把数组转换为字符串\n\nvar str = 'assssjdssskssalsssdkjsssdss';\nvar arr = str.split(''); //把字符串转换为数组\nstr = arr.sort().join(''); //首先进行排序，这样结果会把相同的字符放在一起，然后再转换为字符串\n//alert(str);  // aaddjjkklsssssssssssssssss\n\nvar value = '';\nvar index = 0;\nvar re = /(\\w)\\1+/g;  //匹配字符，且重复这个字符，重复次数至少一次。\nstr.replace(re,function($0,$1){\n  //alert($0);   代表每次匹配成功的结果 : aa dd jj kk l sssssssssssssssss\n  //alert($1);  代表每次匹配成功的第一个子项，也就是\\w:  a d j k l S\n  if(index<$0.length){  //如果index保存的值小于$0的长度就进行下面的操作\n    index = $0.length;  // 这样index一直保存的就在最大的长度\n    value = $1;  //value保存的是出现最多的这个字符\n  }\n});\nconsole.log('最多的字符:'+value+',重复的次数:'+index);  // s   17\n```\n\n查找字符串'abc'在字符串'abbbbccbebababccbaabcbccbaabbccabcc'第一次出现的位置\n```\nvar str = \"abc\"\nvar string = 'abbbbccbebababccbaabcbccbaabbccabcc'\nfunction regex(str1,str2){\n    let regex = new RegExp(str1,\"g\");\n    console.log(str2.search(regex));\n}\nregex(str,string)\n```\n\n","slug":"My-New-Post","published":1,"updated":"2022-04-03T17:03:01.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a5i00163gvo006c66eh","content":"<h2 id=\"数字相关的正则表达式\"><a href=\"#数字相关的正则表达式\" class=\"headerlink\" title=\"数字相关的正则表达式\"></a>数字相关的正则表达式</h2><figure class=\"highlight subunit\"><table><tr><td class=\"code\"><pre><span class=\"line\">去空格： /^\\s+|\\s+$/g</span><br><span class=\"line\">数字： ^[0<span class=\"string\">-9</span>]*$</span><br><span class=\"line\">n位定长的数字： ^\\d&#123;n&#125;$</span><br><span class=\"line\">m-n位之间的数字： ^\\d&#123;m,n&#125;$</span><br><span class=\"line\">零和非零开头的数字： ^(0|[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)$</span><br><span class=\"line\">非零开头的最多带两位小数的数字： ^([1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)+(.[0<span class=\"string\">-9</span>]&#123;1,2&#125;)?$</span><br><span class=\"line\">带1<span class=\"string\">-2</span>位小数的正数或负数： ^(\\-)?\\d+(\\.\\d&#123;1,2&#125;)?$</span><br><span class=\"line\">正数、负数、和小数： ^(\\-|\\+)?\\d+(\\.\\d+)?$</span><br><span class=\"line\">有两位小数的正实数： ^[0<span class=\"string\">-9</span>]+(.[0<span class=\"string\">-9</span>]&#123;2&#125;)?$</span><br><span class=\"line\">有1~3位小数的正实数： ^[0<span class=\"string\">-9</span>]+(.[0<span class=\"string\">-9</span>]&#123;1,3&#125;)?$</span><br><span class=\"line\">正整数： ^\\d+$ 或 ^[1<span class=\"string\">-9</span>]\\d*|0$</span><br><span class=\"line\">负整数： ^-[1<span class=\"string\">-9</span>]\\d*|0$ 或 ^((-\\d+)|(0+))$</span><br><span class=\"line\">正浮点数： </span><br><span class=\"line\">^[1<span class=\"string\">-9</span>]\\d*\\.\\d*|0\\.\\d*[1<span class=\"string\">-9</span>]\\d*$ </span><br><span class=\"line\">^(([0<span class=\"string\">-9</span>]+\\.[0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*\\.[0<span class=\"string\">-9</span>]+)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*))$</span><br><span class=\"line\">负浮点数： </span><br><span class=\"line\">^-([1<span class=\"string\">-9</span>]\\d*\\.\\d*|0\\.\\d*[1<span class=\"string\">-9</span>]\\d*)$</span><br><span class=\"line\"> ^(-(([0<span class=\"string\">-9</span>]+\\.[0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*\\.[0<span class=\"string\">-9</span>]+)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)))$</span><br><span class=\"line\">浮点数： ^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1<span class=\"string\">-9</span>]\\d*\\.\\d*|0\\.\\d*[1<span class=\"string\">-9</span>]\\d*|0?\\.0+|0)$</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符相关的正则表达式\"><a href=\"#字符相关的正则表达式\" class=\"headerlink\" title=\"字符相关的正则表达式\"></a>字符相关的正则表达式</h2><figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">汉字： ^<span class=\"selector-attr\">[\\u4e00-\\u9fa5]</span>&#123;<span class=\"number\">0</span>,&#125;$</span><br><span class=\"line\">长度为<span class=\"number\">3</span>-<span class=\"number\">20</span>的所有字符： ^.&#123;<span class=\"number\">3</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\">由数字和<span class=\"number\">26</span>个英文字母组成的字符串： ^<span class=\"selector-attr\">[A-Za-z0-9]</span>+$</span><br><span class=\"line\">由数字、<span class=\"number\">26</span>个英文字母或者下划线组成的字符串： ^\\w+$ 或 ^\\w&#123;<span class=\"number\">3</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\">中文、英文、数字包括下划线： ^<span class=\"selector-attr\">[\\u4E00-\\u9FA5A-Za-z0-9_]</span>+$</span><br><span class=\"line\">中文、英文、数字但不包括下划线等符号： </span><br><span class=\"line\">^<span class=\"selector-attr\">[\\u4E00-\\u9FA5A-Za-z0-9]</span>+$ </span><br><span class=\"line\"> ^<span class=\"selector-attr\">[\\u4E00-\\u9FA5A-Za-z0-9]</span>&#123;<span class=\"number\">2</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\">帐号是否合法(字母开头，允许<span class=\"number\">5</span>-<span class=\"number\">16</span>字节，允许字母数字下划线)： </span><br><span class=\"line\">^<span class=\"selector-attr\">[a-zA-Z]</span><span class=\"selector-attr\">[a-zA-Z0-9_]</span>&#123;<span class=\"number\">4</span>,<span class=\"number\">15</span>&#125;$</span><br><span class=\"line\">密码(以字母开头，长度在<span class=\"number\">6</span>~<span class=\"number\">18</span>之间，只能包含字母、数字和下划线)： </span><br><span class=\"line\">^<span class=\"selector-attr\">[a-zA-Z]</span>\\w&#123;<span class=\"number\">5</span>,<span class=\"number\">17</span>&#125;$</span><br><span class=\"line\">强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在<span class=\"number\">8</span>-<span class=\"number\">10</span>之间)：</span><br><span class=\"line\"> ^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;<span class=\"number\">8</span>,<span class=\"number\">10</span>&#125;$</span><br></pre></td></tr></table></figure>\n<h2 id=\"固定格式约定俗成的正则表达式\"><a href=\"#固定格式约定俗成的正则表达式\" class=\"headerlink\" title=\"固定格式约定俗成的正则表达式\"></a>固定格式约定俗成的正则表达式</h2><figure class=\"highlight gherkin\"><table><tr><td class=\"code\"><pre><span class=\"line\">Email地址： ^\\w+([-+.]\\w+)<span class=\"symbol\">*</span><span class=\"meta\">@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$</span></span><br><span class=\"line\">网站域名： [a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span><br><span class=\"line\">URL网址： ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]<span class=\"symbol\">*</span>)?$</span><br><span class=\"line\">手机号码： </span><br><span class=\"line\">^(13[0-9]|<span class=\"string\">17[0-9]</span>|<span class=\"string\">14[5</span>|<span class=\"string\">7]</span>|<span class=\"string\">15[0</span>|<span class=\"string\">1</span>|<span class=\"string\">2</span>|<span class=\"string\">3</span>|<span class=\"string\">5</span>|<span class=\"string\">6</span>|<span class=\"string\">7</span>|<span class=\"string\">8</span>|<span class=\"string\">9]</span>|<span class=\"string\">18[0</span>|<span class=\"string\">1</span>|<span class=\"string\">2</span>|<span class=\"string\">3</span>|<span class=\"string\">5</span>|<span class=\"string\">6</span>|<span class=\"string\">7</span>|<span class=\"string\">8</span>|<span class=\"string\">9])\\d&#123;8&#125;$</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、</span></span><br><span class=\"line\"><span class=\"string\">”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)： </span></span><br><span class=\"line\"><span class=\"string\">^(\\(\\d&#123;3,4&#125;-)</span>|<span class=\"string\">\\d&#123;3.4&#125;-)?\\d&#123;7,8&#125;$</span></span><br><span class=\"line\"><span class=\"string\">国内电话号码(0511-4405222、021-87888822)： \\d&#123;3&#125;-\\d&#123;8&#125;</span>|<span class=\"string\">\\d&#123;4&#125;-\\d&#123;7&#125;</span></span><br><span class=\"line\"><span class=\"string\">身份证号(15位、18位数字)： ^\\d&#123;15&#125;</span>|<span class=\"string\">\\d&#123;18&#125;$</span></span><br><span class=\"line\"><span class=\"string\">日期格式： ^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;</span></span><br><span class=\"line\"><span class=\"string\">一年的12个月(01～09和1～12)： ^(0?[1-9]</span>|<span class=\"string\">1[0-2])$</span></span><br><span class=\"line\"><span class=\"string\">一个月的31天(01～09和1～31)： ^((0?[1-9])</span>|<span class=\"string\">((1</span>|<span class=\"string\">2)[0-9])</span>|<span class=\"string\">30</span>|<span class=\"string\">31)$</span></span><br><span class=\"line\"><span class=\"string\">腾讯QQ号： [1-9][0-9]&#123;4,8&#125; (腾讯QQ号从10000开始，目前最长为10位)</span></span><br><span class=\"line\"><span class=\"string\">中国邮政编码： [1-9]\\d&#123;5&#125;(?!\\d) (中国邮政编码为6位数字)</span></span><br><span class=\"line\"><span class=\"string\">IP地址： \\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用)</span></span><br><span class=\"line\"><span class=\"string\">IP地址： ((?:(?:25[0-5]</span>|<span class=\"string\">2[0-4]\\\\d</span>|<span class=\"string\">[01]?\\\\d?\\\\d)\\\\.)&#123;3&#125;(?:25[0-5]</span>|<span class=\"string\">2[0-4]\\\\d</span>|<span class=\"string\">[01]?\\\\d?\\\\d))</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"常用的方法\"><a href=\"#常用的方法\" class=\"headerlink\" title=\"常用的方法\"></a>常用的方法</h2><h3 id=\"1-test\"><a href=\"#1-test\" class=\"headerlink\" title=\"1.test()\"></a>1.test()</h3><h4 id=\"在字符串中查找符合正则的内容，若查找到返回true-反之返回false\"><a href=\"#在字符串中查找符合正则的内容，若查找到返回true-反之返回false\" class=\"headerlink\" title=\"在字符串中查找符合正则的内容，若查找到返回true,反之返回false.\"></a>在字符串中查找符合正则的内容，若查找到返回true,反之返回false.</h4><figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;374829348791&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/\\D/</span>; <span class=\"comment\">//  \\D代表非数字</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (re.test(str)) &#123; <span class=\"comment\">// 返回true,代表在字符串中找到了非数字。</span></span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;不全是数字&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;全是数字&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-search\"><a href=\"#2-search\" class=\"headerlink\" title=\"2.search()\"></a>2.search()</h3><h4 id=\"在字符串搜索符合正则的内容，搜索到就返回出现的位置\"><a href=\"#在字符串搜索符合正则的内容，搜索到就返回出现的位置\" class=\"headerlink\" title=\"在字符串搜索符合正则的内容，搜索到就返回出现的位置\"></a>在字符串搜索符合正则的内容，搜索到就返回出现的位置</h4><h4 id=\"（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置），-如果搜索失败就返回-1\"><a href=\"#（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置），-如果搜索失败就返回-1\" class=\"headerlink\" title=\"（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1\"></a>（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1</h4><figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;abbbbccbebababccbaabcbccbaabbccabcc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">regex</span>(<span class=\"params\">str1, str2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(str1, <span class=\"string\">&quot;g&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str2.search(regex));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">regex(str, <span class=\"built_in\">string</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-match\"><a href=\"#3-match\" class=\"headerlink\" title=\"3.match()\"></a>3.match()</h3><h4 id=\"在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\"><a href=\"#在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\" class=\"headerlink\" title=\"在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\"></a>在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。</h4><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">var</span> str = &#x27;haj123sdk54hask33dkhalsd879&#x27;;</span><br><span class=\"line\"><span class=\"attribute\">var</span> re = /\\d+/g; // 每次匹配至少一个数字  且全局匹配  如果不是全局匹配，当找到数字<span class=\"number\">123</span>，它就会停止了。就只会弹出<span class=\"number\">123</span>.加上全局匹配，就会从开始到结束一直去搜索符合规则的。如果没有加号，匹配的结果就是<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>，<span class=\"number\">5</span>，<span class=\"number\">4</span>，<span class=\"number\">3</span>，<span class=\"number\">3</span>，<span class=\"number\">879</span>并不是我们想要的，有了加号，每次匹配的数字就是至少一个了。</span><br><span class=\"line\"><span class=\"attribute\">alert</span>(str.match(re)); //<span class=\"meta\"> [123，54，33，879]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace()\"></a>replace()</h3><h4 id=\"查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。\"><a href=\"#查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。\" class=\"headerlink\" title=\"查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。\"></a>查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。</h4><figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;我爱北京天安门，天安门上太阳升。&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/北京|天安门/g</span>;  <span class=\"comment\">//  找到北京 或者天安门 全局匹配</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = str.<span class=\"built_in\">replace</span>(re,<span class=\"string\">&#x27;*&#x27;</span>); </span><br><span class=\"line\">alert(str2)  <span class=\"comment\">//我爱**，*上太阳升 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这种只是把找到的变成了一个*，并不能几个字就对应几个*。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;我爱北京天安门，天安门上太阳升。&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/北京|天安门/g</span>;  <span class=\"comment\">//  找到北京 或者天安门 全局匹配</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = str.<span class=\"built_in\">replace</span>(re,<span class=\"keyword\">function</span>(<span class=\"params\">str</span>)&#123;</span><br><span class=\"line\">              alert(str); <span class=\"comment\">//用来测试：函数的第一个参数代表每次搜索到的符合正则的字符，所以第一次str指的是北京 第二次str是天安门 第三次str是天安门</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;str.<span class=\"built_in\">length</span>;i++)&#123;</span><br><span class=\"line\">                result += <span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\">            &#125;              </span><br><span class=\"line\">            <span class=\"keyword\">return</span> result; <span class=\"comment\">//所以搜索到了几个字就返回几个* </span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">alert(str2)  <span class=\"comment\">//我爱*****，***上太阳升         </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//整个过程就是，找到北京，替换成了两个*，找到天安门替换成了3个*，找到天安门替换成3个*。</span></span><br></pre></td></tr></table></figure>\n<p>把2013-6-7替换成2013.6.7</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>整个过程就是利用子项把<span class=\"number\">2013</span>- <span class=\"number\">6</span>- 分别替换成了<span class=\"number\">2013</span>. <span class=\"number\">6</span>.  最终弹出<span class=\"number\">2013.6</span>.<span class=\"number\">7</span></span><br><span class=\"line\">var str = <span class=\"string\">&#x27;2013-6-7&#x27;</span>;</span><br><span class=\"line\">var re = <span class=\"regexp\">/(\\d+)(-)/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">str = str.replace(re,<span class=\"keyword\">function</span>(<span class=\"variable\">$0</span>,<span class=\"variable\">$1</span>,<span class=\"variable\">$2</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"regexp\">//</span>replace()中如果有子项，</span><br><span class=\"line\">      <span class=\"regexp\">//</span>第一个参数：<span class=\"variable\">$0</span>（匹配成功后的整体结果  <span class=\"number\">2013</span>-  <span class=\"number\">6</span>-）,</span><br><span class=\"line\">      <span class=\"regexp\">//</span> 第二个参数 : <span class=\"variable\">$1</span>(匹配成功的第一个分组，这里指的是\\d   <span class=\"number\">2013</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">      <span class=\"regexp\">//</span>第三个参数 : <span class=\"variable\">$1</span>(匹配成功的第二个分组，这里指的是-    - - )   </span><br><span class=\"line\">    return <span class=\"variable\">$1</span> + <span class=\"string\">&#x27;.&#x27;</span>;  <span class=\"regexp\">//</span>分别返回<span class=\"number\">2013</span>.   <span class=\"number\">6</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">alert( str );   <span class=\"regexp\">//</span><span class=\"number\">2013.6</span>.<span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<p>找重复项最多的字符个数</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> split():字符串中的方法，把字符串转成数组。</span><br><span class=\"line\"><span class=\"regexp\">//</span> sort():数组中的排序方法，按照ACALL码进行排序。</span><br><span class=\"line\"><span class=\"regexp\">//</span> join():数组中的方法，把数组转换为字符串</span><br><span class=\"line\"></span><br><span class=\"line\">var str = <span class=\"string\">&#x27;assssjdssskssalsssdkjsssdss&#x27;</span>;</span><br><span class=\"line\">var arr = str.split(<span class=\"string\">&#x27;&#x27;</span>); <span class=\"regexp\">//</span>把字符串转换为数组</span><br><span class=\"line\">str = arr.sort().join(<span class=\"string\">&#x27;&#x27;</span>); <span class=\"regexp\">//</span>首先进行排序，这样结果会把相同的字符放在一起，然后再转换为字符串</span><br><span class=\"line\"><span class=\"regexp\">//</span>alert(str);  <span class=\"regexp\">//</span> aaddjjkklsssssssssssssssss</span><br><span class=\"line\"></span><br><span class=\"line\">var value = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">var index = <span class=\"number\">0</span>;</span><br><span class=\"line\">var re = <span class=\"regexp\">/(\\w)\\1+/g</span>;  <span class=\"regexp\">//</span>匹配字符，且重复这个字符，重复次数至少一次。</span><br><span class=\"line\">str.replace(re,<span class=\"keyword\">function</span>(<span class=\"variable\">$0</span>,<span class=\"variable\">$1</span>)&#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span>alert(<span class=\"variable\">$0</span>);   代表每次匹配成功的结果 : aa dd jj kk l sssssssssssssssss</span><br><span class=\"line\">  <span class=\"regexp\">//</span>alert(<span class=\"variable\">$1</span>);  代表每次匹配成功的第一个子项，也就是\\w:  a d j k l S</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(index&lt;<span class=\"variable\">$0</span>.length)&#123;  <span class=\"regexp\">//</span>如果index保存的值小于<span class=\"variable\">$0</span>的长度就进行下面的操作</span><br><span class=\"line\">    index = <span class=\"variable\">$0</span>.length;  <span class=\"regexp\">//</span> 这样index一直保存的就在最大的长度</span><br><span class=\"line\">    value = <span class=\"variable\">$1</span>;  <span class=\"regexp\">//</span>value保存的是出现最多的这个字符</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(<span class=\"string\">&#x27;最多的字符:&#x27;</span>+value+<span class=\"string\">&#x27;,重复的次数:&#x27;</span>+index);  <span class=\"regexp\">//</span> s   <span class=\"number\">17</span></span><br></pre></td></tr></table></figure>\n\n<p>查找字符串’abc’在字符串’abbbbccbebababccbaabcbccbaabbccabcc’第一次出现的位置</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;abbbbccbebababccbaabcbccbaabbccabcc&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">regex</span>(<span class=\"params\">str1,str2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(str1,<span class=\"string\">&quot;g&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str2.search(regex));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">regex(str,<span class=\"built_in\">string</span>)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数字相关的正则表达式\"><a href=\"#数字相关的正则表达式\" class=\"headerlink\" title=\"数字相关的正则表达式\"></a>数字相关的正则表达式</h2><figure class=\"highlight subunit\"><table><tr><td class=\"code\"><pre><span class=\"line\">去空格： /^\\s+|\\s+$/g</span><br><span class=\"line\">数字： ^[0<span class=\"string\">-9</span>]*$</span><br><span class=\"line\">n位定长的数字： ^\\d&#123;n&#125;$</span><br><span class=\"line\">m-n位之间的数字： ^\\d&#123;m,n&#125;$</span><br><span class=\"line\">零和非零开头的数字： ^(0|[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)$</span><br><span class=\"line\">非零开头的最多带两位小数的数字： ^([1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)+(.[0<span class=\"string\">-9</span>]&#123;1,2&#125;)?$</span><br><span class=\"line\">带1<span class=\"string\">-2</span>位小数的正数或负数： ^(\\-)?\\d+(\\.\\d&#123;1,2&#125;)?$</span><br><span class=\"line\">正数、负数、和小数： ^(\\-|\\+)?\\d+(\\.\\d+)?$</span><br><span class=\"line\">有两位小数的正实数： ^[0<span class=\"string\">-9</span>]+(.[0<span class=\"string\">-9</span>]&#123;2&#125;)?$</span><br><span class=\"line\">有1~3位小数的正实数： ^[0<span class=\"string\">-9</span>]+(.[0<span class=\"string\">-9</span>]&#123;1,3&#125;)?$</span><br><span class=\"line\">正整数： ^\\d+$ 或 ^[1<span class=\"string\">-9</span>]\\d*|0$</span><br><span class=\"line\">负整数： ^-[1<span class=\"string\">-9</span>]\\d*|0$ 或 ^((-\\d+)|(0+))$</span><br><span class=\"line\">正浮点数： </span><br><span class=\"line\">^[1<span class=\"string\">-9</span>]\\d*\\.\\d*|0\\.\\d*[1<span class=\"string\">-9</span>]\\d*$ </span><br><span class=\"line\">^(([0<span class=\"string\">-9</span>]+\\.[0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*\\.[0<span class=\"string\">-9</span>]+)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*))$</span><br><span class=\"line\">负浮点数： </span><br><span class=\"line\">^-([1<span class=\"string\">-9</span>]\\d*\\.\\d*|0\\.\\d*[1<span class=\"string\">-9</span>]\\d*)$</span><br><span class=\"line\"> ^(-(([0<span class=\"string\">-9</span>]+\\.[0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*\\.[0<span class=\"string\">-9</span>]+)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)))$</span><br><span class=\"line\">浮点数： ^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1<span class=\"string\">-9</span>]\\d*\\.\\d*|0\\.\\d*[1<span class=\"string\">-9</span>]\\d*|0?\\.0+|0)$</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符相关的正则表达式\"><a href=\"#字符相关的正则表达式\" class=\"headerlink\" title=\"字符相关的正则表达式\"></a>字符相关的正则表达式</h2><figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">汉字： ^<span class=\"selector-attr\">[\\u4e00-\\u9fa5]</span>&#123;<span class=\"number\">0</span>,&#125;$</span><br><span class=\"line\">长度为<span class=\"number\">3</span>-<span class=\"number\">20</span>的所有字符： ^.&#123;<span class=\"number\">3</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\">由数字和<span class=\"number\">26</span>个英文字母组成的字符串： ^<span class=\"selector-attr\">[A-Za-z0-9]</span>+$</span><br><span class=\"line\">由数字、<span class=\"number\">26</span>个英文字母或者下划线组成的字符串： ^\\w+$ 或 ^\\w&#123;<span class=\"number\">3</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\">中文、英文、数字包括下划线： ^<span class=\"selector-attr\">[\\u4E00-\\u9FA5A-Za-z0-9_]</span>+$</span><br><span class=\"line\">中文、英文、数字但不包括下划线等符号： </span><br><span class=\"line\">^<span class=\"selector-attr\">[\\u4E00-\\u9FA5A-Za-z0-9]</span>+$ </span><br><span class=\"line\"> ^<span class=\"selector-attr\">[\\u4E00-\\u9FA5A-Za-z0-9]</span>&#123;<span class=\"number\">2</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\">帐号是否合法(字母开头，允许<span class=\"number\">5</span>-<span class=\"number\">16</span>字节，允许字母数字下划线)： </span><br><span class=\"line\">^<span class=\"selector-attr\">[a-zA-Z]</span><span class=\"selector-attr\">[a-zA-Z0-9_]</span>&#123;<span class=\"number\">4</span>,<span class=\"number\">15</span>&#125;$</span><br><span class=\"line\">密码(以字母开头，长度在<span class=\"number\">6</span>~<span class=\"number\">18</span>之间，只能包含字母、数字和下划线)： </span><br><span class=\"line\">^<span class=\"selector-attr\">[a-zA-Z]</span>\\w&#123;<span class=\"number\">5</span>,<span class=\"number\">17</span>&#125;$</span><br><span class=\"line\">强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在<span class=\"number\">8</span>-<span class=\"number\">10</span>之间)：</span><br><span class=\"line\"> ^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;<span class=\"number\">8</span>,<span class=\"number\">10</span>&#125;$</span><br></pre></td></tr></table></figure>\n<h2 id=\"固定格式约定俗成的正则表达式\"><a href=\"#固定格式约定俗成的正则表达式\" class=\"headerlink\" title=\"固定格式约定俗成的正则表达式\"></a>固定格式约定俗成的正则表达式</h2><figure class=\"highlight gherkin\"><table><tr><td class=\"code\"><pre><span class=\"line\">Email地址： ^\\w+([-+.]\\w+)<span class=\"symbol\">*</span><span class=\"meta\">@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$</span></span><br><span class=\"line\">网站域名： [a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span><br><span class=\"line\">URL网址： ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]<span class=\"symbol\">*</span>)?$</span><br><span class=\"line\">手机号码： </span><br><span class=\"line\">^(13[0-9]|<span class=\"string\">17[0-9]</span>|<span class=\"string\">14[5</span>|<span class=\"string\">7]</span>|<span class=\"string\">15[0</span>|<span class=\"string\">1</span>|<span class=\"string\">2</span>|<span class=\"string\">3</span>|<span class=\"string\">5</span>|<span class=\"string\">6</span>|<span class=\"string\">7</span>|<span class=\"string\">8</span>|<span class=\"string\">9]</span>|<span class=\"string\">18[0</span>|<span class=\"string\">1</span>|<span class=\"string\">2</span>|<span class=\"string\">3</span>|<span class=\"string\">5</span>|<span class=\"string\">6</span>|<span class=\"string\">7</span>|<span class=\"string\">8</span>|<span class=\"string\">9])\\d&#123;8&#125;$</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、</span></span><br><span class=\"line\"><span class=\"string\">”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)： </span></span><br><span class=\"line\"><span class=\"string\">^(\\(\\d&#123;3,4&#125;-)</span>|<span class=\"string\">\\d&#123;3.4&#125;-)?\\d&#123;7,8&#125;$</span></span><br><span class=\"line\"><span class=\"string\">国内电话号码(0511-4405222、021-87888822)： \\d&#123;3&#125;-\\d&#123;8&#125;</span>|<span class=\"string\">\\d&#123;4&#125;-\\d&#123;7&#125;</span></span><br><span class=\"line\"><span class=\"string\">身份证号(15位、18位数字)： ^\\d&#123;15&#125;</span>|<span class=\"string\">\\d&#123;18&#125;$</span></span><br><span class=\"line\"><span class=\"string\">日期格式： ^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;</span></span><br><span class=\"line\"><span class=\"string\">一年的12个月(01～09和1～12)： ^(0?[1-9]</span>|<span class=\"string\">1[0-2])$</span></span><br><span class=\"line\"><span class=\"string\">一个月的31天(01～09和1～31)： ^((0?[1-9])</span>|<span class=\"string\">((1</span>|<span class=\"string\">2)[0-9])</span>|<span class=\"string\">30</span>|<span class=\"string\">31)$</span></span><br><span class=\"line\"><span class=\"string\">腾讯QQ号： [1-9][0-9]&#123;4,8&#125; (腾讯QQ号从10000开始，目前最长为10位)</span></span><br><span class=\"line\"><span class=\"string\">中国邮政编码： [1-9]\\d&#123;5&#125;(?!\\d) (中国邮政编码为6位数字)</span></span><br><span class=\"line\"><span class=\"string\">IP地址： \\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用)</span></span><br><span class=\"line\"><span class=\"string\">IP地址： ((?:(?:25[0-5]</span>|<span class=\"string\">2[0-4]\\\\d</span>|<span class=\"string\">[01]?\\\\d?\\\\d)\\\\.)&#123;3&#125;(?:25[0-5]</span>|<span class=\"string\">2[0-4]\\\\d</span>|<span class=\"string\">[01]?\\\\d?\\\\d))</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"常用的方法\"><a href=\"#常用的方法\" class=\"headerlink\" title=\"常用的方法\"></a>常用的方法</h2><h3 id=\"1-test\"><a href=\"#1-test\" class=\"headerlink\" title=\"1.test()\"></a>1.test()</h3><h4 id=\"在字符串中查找符合正则的内容，若查找到返回true-反之返回false\"><a href=\"#在字符串中查找符合正则的内容，若查找到返回true-反之返回false\" class=\"headerlink\" title=\"在字符串中查找符合正则的内容，若查找到返回true,反之返回false.\"></a>在字符串中查找符合正则的内容，若查找到返回true,反之返回false.</h4><figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;374829348791&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/\\D/</span>; <span class=\"comment\">//  \\D代表非数字</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (re.test(str)) &#123; <span class=\"comment\">// 返回true,代表在字符串中找到了非数字。</span></span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;不全是数字&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;全是数字&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-search\"><a href=\"#2-search\" class=\"headerlink\" title=\"2.search()\"></a>2.search()</h3><h4 id=\"在字符串搜索符合正则的内容，搜索到就返回出现的位置\"><a href=\"#在字符串搜索符合正则的内容，搜索到就返回出现的位置\" class=\"headerlink\" title=\"在字符串搜索符合正则的内容，搜索到就返回出现的位置\"></a>在字符串搜索符合正则的内容，搜索到就返回出现的位置</h4><h4 id=\"（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置），-如果搜索失败就返回-1\"><a href=\"#（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置），-如果搜索失败就返回-1\" class=\"headerlink\" title=\"（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1\"></a>（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1</h4><figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;abbbbccbebababccbaabcbccbaabbccabcc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">regex</span>(<span class=\"params\">str1, str2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(str1, <span class=\"string\">&quot;g&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str2.search(regex));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">regex(str, <span class=\"built_in\">string</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-match\"><a href=\"#3-match\" class=\"headerlink\" title=\"3.match()\"></a>3.match()</h3><h4 id=\"在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\"><a href=\"#在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\" class=\"headerlink\" title=\"在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\"></a>在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。</h4><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">var</span> str = &#x27;haj123sdk54hask33dkhalsd879&#x27;;</span><br><span class=\"line\"><span class=\"attribute\">var</span> re = /\\d+/g; // 每次匹配至少一个数字  且全局匹配  如果不是全局匹配，当找到数字<span class=\"number\">123</span>，它就会停止了。就只会弹出<span class=\"number\">123</span>.加上全局匹配，就会从开始到结束一直去搜索符合规则的。如果没有加号，匹配的结果就是<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>，<span class=\"number\">5</span>，<span class=\"number\">4</span>，<span class=\"number\">3</span>，<span class=\"number\">3</span>，<span class=\"number\">879</span>并不是我们想要的，有了加号，每次匹配的数字就是至少一个了。</span><br><span class=\"line\"><span class=\"attribute\">alert</span>(str.match(re)); //<span class=\"meta\"> [123，54，33，879]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace()\"></a>replace()</h3><h4 id=\"查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。\"><a href=\"#查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。\" class=\"headerlink\" title=\"查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。\"></a>查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。</h4><figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;我爱北京天安门，天安门上太阳升。&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/北京|天安门/g</span>;  <span class=\"comment\">//  找到北京 或者天安门 全局匹配</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = str.<span class=\"built_in\">replace</span>(re,<span class=\"string\">&#x27;*&#x27;</span>); </span><br><span class=\"line\">alert(str2)  <span class=\"comment\">//我爱**，*上太阳升 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这种只是把找到的变成了一个*，并不能几个字就对应几个*。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;我爱北京天安门，天安门上太阳升。&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/北京|天安门/g</span>;  <span class=\"comment\">//  找到北京 或者天安门 全局匹配</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = str.<span class=\"built_in\">replace</span>(re,<span class=\"keyword\">function</span>(<span class=\"params\">str</span>)&#123;</span><br><span class=\"line\">              alert(str); <span class=\"comment\">//用来测试：函数的第一个参数代表每次搜索到的符合正则的字符，所以第一次str指的是北京 第二次str是天安门 第三次str是天安门</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;str.<span class=\"built_in\">length</span>;i++)&#123;</span><br><span class=\"line\">                result += <span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\">            &#125;              </span><br><span class=\"line\">            <span class=\"keyword\">return</span> result; <span class=\"comment\">//所以搜索到了几个字就返回几个* </span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">alert(str2)  <span class=\"comment\">//我爱*****，***上太阳升         </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//整个过程就是，找到北京，替换成了两个*，找到天安门替换成了3个*，找到天安门替换成3个*。</span></span><br></pre></td></tr></table></figure>\n<p>把2013-6-7替换成2013.6.7</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>整个过程就是利用子项把<span class=\"number\">2013</span>- <span class=\"number\">6</span>- 分别替换成了<span class=\"number\">2013</span>. <span class=\"number\">6</span>.  最终弹出<span class=\"number\">2013.6</span>.<span class=\"number\">7</span></span><br><span class=\"line\">var str = <span class=\"string\">&#x27;2013-6-7&#x27;</span>;</span><br><span class=\"line\">var re = <span class=\"regexp\">/(\\d+)(-)/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">str = str.replace(re,<span class=\"keyword\">function</span>(<span class=\"variable\">$0</span>,<span class=\"variable\">$1</span>,<span class=\"variable\">$2</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"regexp\">//</span>replace()中如果有子项，</span><br><span class=\"line\">      <span class=\"regexp\">//</span>第一个参数：<span class=\"variable\">$0</span>（匹配成功后的整体结果  <span class=\"number\">2013</span>-  <span class=\"number\">6</span>-）,</span><br><span class=\"line\">      <span class=\"regexp\">//</span> 第二个参数 : <span class=\"variable\">$1</span>(匹配成功的第一个分组，这里指的是\\d   <span class=\"number\">2013</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">      <span class=\"regexp\">//</span>第三个参数 : <span class=\"variable\">$1</span>(匹配成功的第二个分组，这里指的是-    - - )   </span><br><span class=\"line\">    return <span class=\"variable\">$1</span> + <span class=\"string\">&#x27;.&#x27;</span>;  <span class=\"regexp\">//</span>分别返回<span class=\"number\">2013</span>.   <span class=\"number\">6</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">alert( str );   <span class=\"regexp\">//</span><span class=\"number\">2013.6</span>.<span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<p>找重复项最多的字符个数</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> split():字符串中的方法，把字符串转成数组。</span><br><span class=\"line\"><span class=\"regexp\">//</span> sort():数组中的排序方法，按照ACALL码进行排序。</span><br><span class=\"line\"><span class=\"regexp\">//</span> join():数组中的方法，把数组转换为字符串</span><br><span class=\"line\"></span><br><span class=\"line\">var str = <span class=\"string\">&#x27;assssjdssskssalsssdkjsssdss&#x27;</span>;</span><br><span class=\"line\">var arr = str.split(<span class=\"string\">&#x27;&#x27;</span>); <span class=\"regexp\">//</span>把字符串转换为数组</span><br><span class=\"line\">str = arr.sort().join(<span class=\"string\">&#x27;&#x27;</span>); <span class=\"regexp\">//</span>首先进行排序，这样结果会把相同的字符放在一起，然后再转换为字符串</span><br><span class=\"line\"><span class=\"regexp\">//</span>alert(str);  <span class=\"regexp\">//</span> aaddjjkklsssssssssssssssss</span><br><span class=\"line\"></span><br><span class=\"line\">var value = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">var index = <span class=\"number\">0</span>;</span><br><span class=\"line\">var re = <span class=\"regexp\">/(\\w)\\1+/g</span>;  <span class=\"regexp\">//</span>匹配字符，且重复这个字符，重复次数至少一次。</span><br><span class=\"line\">str.replace(re,<span class=\"keyword\">function</span>(<span class=\"variable\">$0</span>,<span class=\"variable\">$1</span>)&#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span>alert(<span class=\"variable\">$0</span>);   代表每次匹配成功的结果 : aa dd jj kk l sssssssssssssssss</span><br><span class=\"line\">  <span class=\"regexp\">//</span>alert(<span class=\"variable\">$1</span>);  代表每次匹配成功的第一个子项，也就是\\w:  a d j k l S</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(index&lt;<span class=\"variable\">$0</span>.length)&#123;  <span class=\"regexp\">//</span>如果index保存的值小于<span class=\"variable\">$0</span>的长度就进行下面的操作</span><br><span class=\"line\">    index = <span class=\"variable\">$0</span>.length;  <span class=\"regexp\">//</span> 这样index一直保存的就在最大的长度</span><br><span class=\"line\">    value = <span class=\"variable\">$1</span>;  <span class=\"regexp\">//</span>value保存的是出现最多的这个字符</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(<span class=\"string\">&#x27;最多的字符:&#x27;</span>+value+<span class=\"string\">&#x27;,重复的次数:&#x27;</span>+index);  <span class=\"regexp\">//</span> s   <span class=\"number\">17</span></span><br></pre></td></tr></table></figure>\n\n<p>查找字符串’abc’在字符串’abbbbccbebababccbaabcbccbaabbccabcc’第一次出现的位置</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;abbbbccbebababccbaabcbccbaabbccabcc&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">regex</span>(<span class=\"params\">str1,str2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(str1,<span class=\"string\">&quot;g&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str2.search(regex));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">regex(str,<span class=\"built_in\">string</span>)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"凛冬不至","date":"2021-05-16T03:46:09.000Z","_content":"![alt](/second/diary3.jpg)\n有一次，跟朋友讨论《冰与火之歌》里，史塔克家族家训“凛冬将至”的逼格何在？\n最终达成了谜一般的结论，它跟“中华民族到了最危险的时候”的意境是一样的…\n其实不无道理。起风了，唯努力生存。\n希望每个人都能在这个时节照顾好自己。\n\n而深圳的冬天，却完全没有这种“居安思危”的警醒和敬畏。\n早上你觉得挺凉的，中午日头招摇过市，热气又慢慢回升了。\n而且好几个同事都还没见过雪呢。\n他们过来问我我都胡乱说，一会说雪像盐，一会说像糖，还可以舔。\n因为有时候我觉得，深圳的冬天确实需要点乐趣的。\n<!-- more -->\n上周部门举办了年会，这次的主题是“we ara young”。\n晚会party过后已经快11点了，我不喜欢在这种场合喝酒，直接回了酒店。\n加上没有中大奖，感觉并没有尽兴。\n我就想，如果我现在是18岁，会干点什么呢？\n对了，去网吧玩吧！\n\n于是真的和朋友驱车到了三公里外。\n其实最近两个月真的觉得压力很大，生活比游戏更能体现什么叫做“绝地求生”。\n但至少，这个冬天的夜晚变得欢愉起来，把烦恼一扫而光。\n回来已经4点，看到群里通知说，第二天下午还是要上班的…顿时傻了眼。\n这说明我的确not young了，已经有了许多桎梏。\n\n好在后面就是周末了。\n沉沉地睡了一觉，梦中有白色的羽毛，它们张开嘴巴咿咿呀呀地唱歌，然后还有彩色的潮水开始上涨。\n好似触电般的惊醒，我在朦胧中看了下日历和天气，突然兴奋了起来！\n它们要回来了。\n\n是的，我自认为深圳冬天为数不多的两个趣事：\n一是异木棉花开，二是候鸟的归来。\n异木棉一个月前已经开放，这时该轮到鸟儿的登场了。\n端上相机我就直奔海边，每年的这个时候，我都会去海边看一下它们。\n\n以前我特别喜欢看《迁徙的鸟》。导演雅克贝汉说，这是一个关于承诺的故事。\n人的老去，很多是因为“忘记年轻”了。\n他们忘了年少的欢乐与抱负，经历散失与背叛，又陷入怀疑与困惑。\n傻鸟儿们当然不管这些，它们日夜兼程，就可以回到这个凛冬不至的海岸，兑现永恒的承诺。\n\n![alt](/second/diary-32.jpg)\n\n![alt](/second/diary-33.jpg)\n\n![alt](/second/diary-34.jpg)\n\n![alt](/second/diary-35.jpg)\n\n![alt](/second/diary-36.jpg)","source":"_posts/second.md","raw":"---\ntitle: 凛冬不至\ndate: 2021-05-16 11:46:09\ntags:\n---\n![alt](/second/diary3.jpg)\n有一次，跟朋友讨论《冰与火之歌》里，史塔克家族家训“凛冬将至”的逼格何在？\n最终达成了谜一般的结论，它跟“中华民族到了最危险的时候”的意境是一样的…\n其实不无道理。起风了，唯努力生存。\n希望每个人都能在这个时节照顾好自己。\n\n而深圳的冬天，却完全没有这种“居安思危”的警醒和敬畏。\n早上你觉得挺凉的，中午日头招摇过市，热气又慢慢回升了。\n而且好几个同事都还没见过雪呢。\n他们过来问我我都胡乱说，一会说雪像盐，一会说像糖，还可以舔。\n因为有时候我觉得，深圳的冬天确实需要点乐趣的。\n<!-- more -->\n上周部门举办了年会，这次的主题是“we ara young”。\n晚会party过后已经快11点了，我不喜欢在这种场合喝酒，直接回了酒店。\n加上没有中大奖，感觉并没有尽兴。\n我就想，如果我现在是18岁，会干点什么呢？\n对了，去网吧玩吧！\n\n于是真的和朋友驱车到了三公里外。\n其实最近两个月真的觉得压力很大，生活比游戏更能体现什么叫做“绝地求生”。\n但至少，这个冬天的夜晚变得欢愉起来，把烦恼一扫而光。\n回来已经4点，看到群里通知说，第二天下午还是要上班的…顿时傻了眼。\n这说明我的确not young了，已经有了许多桎梏。\n\n好在后面就是周末了。\n沉沉地睡了一觉，梦中有白色的羽毛，它们张开嘴巴咿咿呀呀地唱歌，然后还有彩色的潮水开始上涨。\n好似触电般的惊醒，我在朦胧中看了下日历和天气，突然兴奋了起来！\n它们要回来了。\n\n是的，我自认为深圳冬天为数不多的两个趣事：\n一是异木棉花开，二是候鸟的归来。\n异木棉一个月前已经开放，这时该轮到鸟儿的登场了。\n端上相机我就直奔海边，每年的这个时候，我都会去海边看一下它们。\n\n以前我特别喜欢看《迁徙的鸟》。导演雅克贝汉说，这是一个关于承诺的故事。\n人的老去，很多是因为“忘记年轻”了。\n他们忘了年少的欢乐与抱负，经历散失与背叛，又陷入怀疑与困惑。\n傻鸟儿们当然不管这些，它们日夜兼程，就可以回到这个凛冬不至的海岸，兑现永恒的承诺。\n\n![alt](/second/diary-32.jpg)\n\n![alt](/second/diary-33.jpg)\n\n![alt](/second/diary-34.jpg)\n\n![alt](/second/diary-35.jpg)\n\n![alt](/second/diary-36.jpg)","slug":"second","published":1,"updated":"2021-05-16T06:38:44.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a5j00183gvo1bo3h1ry","content":"<p><img src=\"/second/diary3.jpg\" alt=\"alt\"><br>有一次，跟朋友讨论《冰与火之歌》里，史塔克家族家训“凛冬将至”的逼格何在？<br>最终达成了谜一般的结论，它跟“中华民族到了最危险的时候”的意境是一样的…<br>其实不无道理。起风了，唯努力生存。<br>希望每个人都能在这个时节照顾好自己。</p>\n<p>而深圳的冬天，却完全没有这种“居安思危”的警醒和敬畏。<br>早上你觉得挺凉的，中午日头招摇过市，热气又慢慢回升了。<br>而且好几个同事都还没见过雪呢。<br>他们过来问我我都胡乱说，一会说雪像盐，一会说像糖，还可以舔。<br>因为有时候我觉得，深圳的冬天确实需要点乐趣的。</p>\n<span id=\"more\"></span>\n<p>上周部门举办了年会，这次的主题是“we ara young”。<br>晚会party过后已经快11点了，我不喜欢在这种场合喝酒，直接回了酒店。<br>加上没有中大奖，感觉并没有尽兴。<br>我就想，如果我现在是18岁，会干点什么呢？<br>对了，去网吧玩吧！</p>\n<p>于是真的和朋友驱车到了三公里外。<br>其实最近两个月真的觉得压力很大，生活比游戏更能体现什么叫做“绝地求生”。<br>但至少，这个冬天的夜晚变得欢愉起来，把烦恼一扫而光。<br>回来已经4点，看到群里通知说，第二天下午还是要上班的…顿时傻了眼。<br>这说明我的确not young了，已经有了许多桎梏。</p>\n<p>好在后面就是周末了。<br>沉沉地睡了一觉，梦中有白色的羽毛，它们张开嘴巴咿咿呀呀地唱歌，然后还有彩色的潮水开始上涨。<br>好似触电般的惊醒，我在朦胧中看了下日历和天气，突然兴奋了起来！<br>它们要回来了。</p>\n<p>是的，我自认为深圳冬天为数不多的两个趣事：<br>一是异木棉花开，二是候鸟的归来。<br>异木棉一个月前已经开放，这时该轮到鸟儿的登场了。<br>端上相机我就直奔海边，每年的这个时候，我都会去海边看一下它们。</p>\n<p>以前我特别喜欢看《迁徙的鸟》。导演雅克贝汉说，这是一个关于承诺的故事。<br>人的老去，很多是因为“忘记年轻”了。<br>他们忘了年少的欢乐与抱负，经历散失与背叛，又陷入怀疑与困惑。<br>傻鸟儿们当然不管这些，它们日夜兼程，就可以回到这个凛冬不至的海岸，兑现永恒的承诺。</p>\n<p><img src=\"/second/diary-32.jpg\" alt=\"alt\"></p>\n<p><img src=\"/second/diary-33.jpg\" alt=\"alt\"></p>\n<p><img src=\"/second/diary-34.jpg\" alt=\"alt\"></p>\n<p><img src=\"/second/diary-35.jpg\" alt=\"alt\"></p>\n<p><img src=\"/second/diary-36.jpg\" alt=\"alt\"></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/second/diary3.jpg\" alt=\"alt\"><br>有一次，跟朋友讨论《冰与火之歌》里，史塔克家族家训“凛冬将至”的逼格何在？<br>最终达成了谜一般的结论，它跟“中华民族到了最危险的时候”的意境是一样的…<br>其实不无道理。起风了，唯努力生存。<br>希望每个人都能在这个时节照顾好自己。</p>\n<p>而深圳的冬天，却完全没有这种“居安思危”的警醒和敬畏。<br>早上你觉得挺凉的，中午日头招摇过市，热气又慢慢回升了。<br>而且好几个同事都还没见过雪呢。<br>他们过来问我我都胡乱说，一会说雪像盐，一会说像糖，还可以舔。<br>因为有时候我觉得，深圳的冬天确实需要点乐趣的。</p>","more":"<p>上周部门举办了年会，这次的主题是“we ara young”。<br>晚会party过后已经快11点了，我不喜欢在这种场合喝酒，直接回了酒店。<br>加上没有中大奖，感觉并没有尽兴。<br>我就想，如果我现在是18岁，会干点什么呢？<br>对了，去网吧玩吧！</p>\n<p>于是真的和朋友驱车到了三公里外。<br>其实最近两个月真的觉得压力很大，生活比游戏更能体现什么叫做“绝地求生”。<br>但至少，这个冬天的夜晚变得欢愉起来，把烦恼一扫而光。<br>回来已经4点，看到群里通知说，第二天下午还是要上班的…顿时傻了眼。<br>这说明我的确not young了，已经有了许多桎梏。</p>\n<p>好在后面就是周末了。<br>沉沉地睡了一觉，梦中有白色的羽毛，它们张开嘴巴咿咿呀呀地唱歌，然后还有彩色的潮水开始上涨。<br>好似触电般的惊醒，我在朦胧中看了下日历和天气，突然兴奋了起来！<br>它们要回来了。</p>\n<p>是的，我自认为深圳冬天为数不多的两个趣事：<br>一是异木棉花开，二是候鸟的归来。<br>异木棉一个月前已经开放，这时该轮到鸟儿的登场了。<br>端上相机我就直奔海边，每年的这个时候，我都会去海边看一下它们。</p>\n<p>以前我特别喜欢看《迁徙的鸟》。导演雅克贝汉说，这是一个关于承诺的故事。<br>人的老去，很多是因为“忘记年轻”了。<br>他们忘了年少的欢乐与抱负，经历散失与背叛，又陷入怀疑与困惑。<br>傻鸟儿们当然不管这些，它们日夜兼程，就可以回到这个凛冬不至的海岸，兑现永恒的承诺。</p>\n<p><img src=\"/second/diary-32.jpg\" alt=\"alt\"></p>\n<p><img src=\"/second/diary-33.jpg\" alt=\"alt\"></p>\n<p><img src=\"/second/diary-34.jpg\" alt=\"alt\"></p>\n<p><img src=\"/second/diary-35.jpg\" alt=\"alt\"></p>\n<p><img src=\"/second/diary-36.jpg\" alt=\"alt\"></p>"},{"title":"First title","date":"2021-05-16T03:11:58.000Z","_content":"welcome to xiaohao title!","source":"_posts/title.md","raw":"---\ntitle: First title\ndate: 2021-05-16 11:11:58\ntags:\n---\nwelcome to xiaohao title!","slug":"title","published":1,"updated":"2021-05-16T03:13:53.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1k46a5k001b3gvobgdn1cuj","content":"<p>welcome to xiaohao title!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>welcome to xiaohao title!</p>\n"}],"PostAsset":[{"_id":"source/_posts/ES6-Symbol的应用/微信图片_20210605110724.png","post":"cl1k46a4s00063gvod7uzhrfu","slug":"微信图片_20210605110724.png","modified":1,"renderable":1},{"_id":"source/_posts/ES6-Symbol的应用/微信图片_20210605110750.png","post":"cl1k46a4s00063gvod7uzhrfu","slug":"微信图片_20210605110750.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cl1k46a4s00063gvod7uzhrfu","category_id":"cl1k46a4w00093gvo4btv69bl","_id":"cl1k46a54000k3gvofy5ih8gh"},{"post_id":"cl1k46a4v00083gvo3hj1fvfz","category_id":"cl1k46a4w00093gvo4btv69bl","_id":"cl1k46a58000o3gvo6su39fzk"},{"post_id":"cl1k46a5i00163gvo006c66eh","category_id":"cl1k46a5k001a3gvo0lgz8bx5","_id":"cl1k46a5m001g3gvog13gdo19"}],"PostTag":[{"post_id":"cl1k46a4l00013gvohkixftbd","tag_id":"cl1k46a4q00043gvobod5al4s","_id":"cl1k46a4y000c3gvoe1zv9nr7"},{"post_id":"cl1k46a4p00033gvobtu47g8t","tag_id":"cl1k46a4x000b3gvo2vqc6fum","_id":"cl1k46a52000i3gvo277zc3f3"},{"post_id":"cl1k46a4s00063gvod7uzhrfu","tag_id":"cl1k46a51000g3gvo4wtcgcfc","_id":"cl1k46a5b000r3gvocute826a"},{"post_id":"cl1k46a4s00063gvod7uzhrfu","tag_id":"cl1k46a54000l3gvo5g59g61i","_id":"cl1k46a5c000t3gvo8vcz22rs"},{"post_id":"cl1k46a4v00083gvo3hj1fvfz","tag_id":"cl1k46a51000g3gvo4wtcgcfc","_id":"cl1k46a5f000z3gvo2n52ae23"},{"post_id":"cl1k46a4v00083gvo3hj1fvfz","tag_id":"cl1k46a54000l3gvo5g59g61i","_id":"cl1k46a5g00113gvo9kcxfnsv"},{"post_id":"cl1k46a4w000a3gvo0qcmhf1w","tag_id":"cl1k46a5e000x3gvods7q42r0","_id":"cl1k46a5h00143gvo1r6t9i6t"},{"post_id":"cl1k46a4y000d3gvo8ev4cdyz","tag_id":"cl1k46a5h00133gvo16pbec5a","_id":"cl1k46a5j00193gvofojcdp1u"},{"post_id":"cl1k46a4z000e3gvohvu8bbow","tag_id":"cl1k46a5j00173gvo7rnyatbf","_id":"cl1k46a5l001d3gvo1qyn4bi8"},{"post_id":"cl1k46a51000h3gvo1duphzpu","tag_id":"cl1k46a5l001c3gvo09dbe2tk","_id":"cl1k46a5m001f3gvoc20b3hc8"},{"post_id":"cl1k46a53000j3gvob0r916fe","tag_id":"cl1k46a5l001e3gvofanc08yr","_id":"cl1k46a5m001i3gvo0wkefvbk"},{"post_id":"cl1k46a55000m3gvoe0gx543r","tag_id":"cl1k46a5m001h3gvoduvdaja1","_id":"cl1k46a5m001k3gvoben9ff31"},{"post_id":"cl1k46a57000n3gvo05ewe9hl","tag_id":"cl1k46a5m001j3gvo3olq8fhi","_id":"cl1k46a5n001m3gvohtsu58ah"},{"post_id":"cl1k46a59000q3gvo1usqetfr","tag_id":"cl1k46a5n001l3gvoe45c191o","_id":"cl1k46a5n001o3gvoajduf0u7"},{"post_id":"cl1k46a5b000s3gvogcze1wci","tag_id":"cl1k46a5n001n3gvocwsu16sh","_id":"cl1k46a5o001q3gvo2pj6bkbn"},{"post_id":"cl1k46a5d000v3gvo26ko1r4q","tag_id":"cl1k46a5n001p3gvoau7p0487","_id":"cl1k46a5o001s3gvo89bz55u5"},{"post_id":"cl1k46a5e000w3gvo0d3n8qh8","tag_id":"cl1k46a5o001r3gvohaecfd6d","_id":"cl1k46a5p001u3gvoctg73tt1"},{"post_id":"cl1k46a5f000y3gvocywee19i","tag_id":"cl1k46a5p001t3gvo7o3c20sc","_id":"cl1k46a5q001w3gvofhrf5lbv"},{"post_id":"cl1k46a5f00103gvogdcd9kl9","tag_id":"cl1k46a5p001v3gvob2acbr16","_id":"cl1k46a5q001y3gvo6x1qguny"},{"post_id":"cl1k46a5g00123gvo99w7498j","tag_id":"cl1k46a5q001x3gvod1ab8on6","_id":"cl1k46a5r00203gvo5irn3jb4"},{"post_id":"cl1k46a5i00163gvo006c66eh","tag_id":"cl1k46a5q001z3gvoadqz0vsl","_id":"cl1k46a5r00213gvo0759bimt"}],"Tag":[{"name":"ES6 Map","_id":"cl1k46a4q00043gvobod5al4s"},{"name":"ES6 Promise","_id":"cl1k46a4x000b3gvo2vqc6fum"},{"name":"ES6","_id":"cl1k46a51000g3gvo4wtcgcfc"},{"name":"Symbol","_id":"cl1k46a54000l3gvo5g59g61i"},{"name":"ES6 class","_id":"cl1k46a5e000x3gvods7q42r0"},{"name":"ES6 get/set","_id":"cl1k46a5h00133gvo16pbec5a"},{"name":"ES6 let和const命令","_id":"cl1k46a5j00173gvo7rnyatbf"},{"name":"ES6 rest参数","_id":"cl1k46a5l001c3gvo09dbe2tk"},{"name":"ES6 变量的解构赋值","_id":"cl1k46a5l001e3gvofanc08yr"},{"name":"ES6 函数参数的默认值设置","_id":"cl1k46a5m001h3gvoduvdaja1"},{"name":"ES6 对象方法扩展","_id":"cl1k46a5m001j3gvo3olq8fhi"},{"name":"ES6 对象的简化写法","_id":"cl1k46a5n001l3gvoe45c191o"},{"name":"ES6 扩展运算符","_id":"cl1k46a5n001n3gvocwsu16sh"},{"name":"ES6 数值扩展","_id":"cl1k46a5n001p3gvoau7p0487"},{"name":"ES6 模板字符串","_id":"cl1k46a5o001r3gvohaecfd6d"},{"name":"ES6 箭头函数","_id":"cl1k46a5p001t3gvo7o3c20sc"},{"name":"ES6 迭代器","_id":"cl1k46a5p001v3gvob2acbr16"},{"name":"ES6 集合","_id":"cl1k46a5q001x3gvod1ab8on6"},{"name":"正则表达式","_id":"cl1k46a5q001z3gvoadqz0vsl"}]}}