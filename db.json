{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/quiet/source/css/about.css","path":"css/about.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/archive.css","path":"css/archive.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/atom-one-dark.css","path":"css/atom-one-dark.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/categories.css","path":"css/categories.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/food.css","path":"css/food.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/header.css","path":"css/header.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/home.css","path":"css/home.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/links.css","path":"css/links.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/page.css","path":"css/page.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/page_cente.css","path":"css/page_cente.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/tag.css","path":"css/tag.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/css/tags.css","path":"css/tags.css","modified":1,"renderable":1},{"_id":"themes/quiet/source/image/favicon.ico","path":"image/favicon.ico","modified":1,"renderable":1},{"_id":"themes/quiet/source/image/img.ico","path":"image/img.ico","modified":1,"renderable":1},{"_id":"themes/quiet/source/image/img.jpg","path":"image/img.jpg","modified":1,"renderable":1},{"_id":"themes/quiet/source/image/logo.png","path":"image/logo.png","modified":1,"renderable":1},{"_id":"themes/quiet/source/image/pattern.png","path":"image/pattern.png","modified":1,"renderable":1},{"_id":"themes/quiet/source/image/微信图片_20210605110724.png","path":"image/微信图片_20210605110724.png","modified":1,"renderable":1},{"_id":"themes/quiet/source/image/微信图片_20210605110750.png","path":"image/微信图片_20210605110750.png","modified":1,"renderable":1},{"_id":"themes/quiet/source/js/gotop.js","path":"js/gotop.js","modified":1,"renderable":1},{"_id":"themes/quiet/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/quiet/.DS_Store","hash":"d6b0bd348c278071914e2dee0dfe4123fecf375f","modified":1648886892867},{"_id":"themes/quiet/LICENSE","hash":"a0da6b64f5ac3c2be67e22af05669c299eaa8c84","modified":1648886892867},{"_id":"themes/quiet/README.md","hash":"029fba4d4abe72177ae38e103d49581428ec6575","modified":1648886892868},{"_id":"themes/quiet/README-EN.md","hash":"8a14c4a1b8880c1b389c18e832ba7e0437c6a480","modified":1648886892868},{"_id":"themes/quiet/layout/404.ejs","hash":"d24c2375e0e927085e6dbeb788fde5e119bcc9b8","modified":1648886892869},{"_id":"themes/quiet/_config.yml","hash":"b3f2f75673067c794c12dc826e8415e31b86f287","modified":1649071767166},{"_id":"themes/quiet/layout/.DS_Store","hash":"46cf1797a08a1ea0f0cdb2af9ebf7d59bd6d976a","modified":1648886892868},{"_id":"themes/quiet/layout/about.ejs","hash":"4e1ec51bfd4823d8f0a2ab4c06c06f79bae8541a","modified":1648886892871},{"_id":"themes/quiet/layout/archive.ejs","hash":"f52c5efa03a863204ddf5921144d2608858e0482","modified":1648886892871},{"_id":"themes/quiet/layout/index.ejs","hash":"b36963002a0fafb093db68c77eb0f2d0b5e7ded6","modified":1648886892872},{"_id":"themes/quiet/layout/categories.ejs","hash":"bc3bb7a3276d6aa25b805e73addbea778c198605","modified":1648886892871},{"_id":"themes/quiet/layout/layout.ejs","hash":"1de4d59c593645e3dd2f7953e3c4dda73606b8c3","modified":1648886892872},{"_id":"themes/quiet/layout/links.ejs","hash":"c1db6ee6b94ac0693926ba64c46d6ddd0cf18c69","modified":1648886892872},{"_id":"themes/quiet/layout/post.ejs","hash":"10c5eab4b9964b3565ab3ee3e793364032ec04da","modified":1648886892872},{"_id":"themes/quiet/layout/tag.ejs","hash":"1fa7d8d5a5db1bd817090f8998d985316f33e2b0","modified":1648886892872},{"_id":"themes/quiet/layout/tags.ejs","hash":"587bd14d96946c117b1ef6d2e612cd20e23b59ab","modified":1648886892872},{"_id":"themes/quiet/source/.DS_Store","hash":"2fe0ee40294946d656b103cef8719c97924075f1","modified":1648886892873},{"_id":"themes/quiet/layout/_partial/.DS_Store","hash":"db62fbf1993ecd5d9e70a49a58be69ac7e7a4485","modified":1648886892869},{"_id":"themes/quiet/layout/_partial/head.ejs","hash":"d7536b46c02d8acba84d21b8ad62edefb7ce86da","modified":1648886892869},{"_id":"themes/quiet/layout/_partial/foot.ejs","hash":"46a4066ca2ded09bc14b2b5e722f6916439170a1","modified":1648886892869},{"_id":"themes/quiet/layout/_partial/header.ejs","hash":"60f6d69505c64f628c9ace9325aa28950730852b","modified":1648886892869},{"_id":"themes/quiet/layout/_partial/post_centent.ejs","hash":"b6bb8b8e04433b37854e8c8df79c72de182f4496","modified":1648886892870},{"_id":"themes/quiet/layout/_partial/home.ejs","hash":"094e3dc189406526d3934894cf0352b26ce28f13","modified":1648886892869},{"_id":"themes/quiet/layout/_partial/post_head.ejs","hash":"be2f5a2d0d91ddb529c0508183d57ad105fedefa","modified":1648886892870},{"_id":"themes/quiet/layout/_partial/post_pn.ejs","hash":"7fab46ce1199e5e792d6f7c597690ad768f9730c","modified":1648886892870},{"_id":"themes/quiet/layout/_widget/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1648886892870},{"_id":"themes/quiet/layout/_widget/analytics.ejs","hash":"c48c85b36c50cd18b018d0d3a08981dfb1a37bf5","modified":1648886892870},{"_id":"themes/quiet/layout/_widget/gotop.ejs","hash":"fdc070e8dbd81198bbd36cdf46e8b7c33ecdeaf0","modified":1648886892871},{"_id":"themes/quiet/layout/_widget/sidebar.ejs","hash":"1e60a534616fdcf97a4d61ef25648af263ffa6e1","modified":1648886892871},{"_id":"themes/quiet/source/css/.DS_Store","hash":"75b22b6a020bdf7a452db2f4d29044b8a88a6661","modified":1648886892873},{"_id":"themes/quiet/source/css/about.css","hash":"d3d7ae17f0571f1cec4514135d644c6590118bd0","modified":1648886892873},{"_id":"themes/quiet/source/css/archive.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1648886892873},{"_id":"themes/quiet/source/css/atom-one-dark.css","hash":"c3e2c329a09062a1702f0f51639e2068a0799fe4","modified":1648886892873},{"_id":"themes/quiet/source/css/categories.css","hash":"06b727d6e2e21b1e5ab12de073406517c32dfe93","modified":1648886892874},{"_id":"themes/quiet/source/css/food.css","hash":"10a0e21ef9b2e4a6af9328be51e1c0368ca91f4e","modified":1648886892874},{"_id":"themes/quiet/source/css/header.css","hash":"e3ce1dbac2e258f0943c5aebdd89b29702246baa","modified":1648886892874},{"_id":"themes/quiet/source/css/home.css","hash":"e474078a73fa75f23f37092f01505dd8063ffc38","modified":1648886892874},{"_id":"themes/quiet/source/css/links.css","hash":"c7afe457cea5d996ee86cfc47174aa114e458fb0","modified":1648886892874},{"_id":"themes/quiet/source/css/page.css","hash":"0514b75a35c93c10826cd861f0dd380d90ba8e41","modified":1648886892874},{"_id":"themes/quiet/source/css/page_cente.css","hash":"b0849bad170ffdd2a4bd095584fcf551b00865c7","modified":1649077091026},{"_id":"themes/quiet/source/css/tag.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1648886892875},{"_id":"themes/quiet/source/image/.DS_Store","hash":"3128ff56de5645c269da786b475fd357f1db7a5f","modified":1648886892875},{"_id":"themes/quiet/source/css/tags.css","hash":"b2de1e197efba0a058f1a5d37aa014fcfc0016ff","modified":1648886892875},{"_id":"themes/quiet/source/image/favicon.ico","hash":"fad2c16f133094e29f9c4aa8a946b7aa200ec98b","modified":1648886892875},{"_id":"themes/quiet/source/image/img.jpg","hash":"32a6010e5d1e590081eeb9292ac989181bf5421e","modified":1647825928021},{"_id":"themes/quiet/source/image/img.ico","hash":"f2c09c9bab4f94e8b24a131ee8527e22fba2c6eb","modified":1648888283136},{"_id":"themes/quiet/source/image/logo.png","hash":"3487c0299f2f69abc8bbbd5d7c61ad77b311c801","modified":1648886892875},{"_id":"themes/quiet/source/image/pattern.png","hash":"e9a79b9b5716c781e8f5acf3462e42fae7f39741","modified":1648886892876},{"_id":"themes/quiet/source/js/.DS_Store","hash":"0f43f1407d3b3df9e865a28f4c9ef13640ad739b","modified":1648886892876},{"_id":"themes/quiet/source/js/gotop.js","hash":"2bd969b8dd7b81626dcd2a3d8a1b1bbb4e0fc33c","modified":1648886892876},{"_id":"themes/quiet/source/js/jquery.min.js","hash":"a9d8678047219b378ddf3addf4b44650b677eec7","modified":1648886892877},{"_id":"themes/quiet/source/image/微信图片_20210605110750.png","hash":"eea61043c49fddc3b54bb4b6fb9c4eefaeff5a1f","modified":1622862472117},{"_id":"themes/quiet/source/image/微信图片_20210605110724.png","hash":"3a28cc77fde2be67bedf97880a8eae376a3a58e9","modified":1622862465557},{"_id":"source/about/index.md","hash":"bde5016bd8d2234dc50648d4a6b925e55a2722b9","modified":1649047211248},{"_id":"source/categories/index.md","hash":"e0f8317ea0453171a1e884ca166abf03b747b755","modified":1648887295870},{"_id":"source/links/index.md","hash":"6c6935c231c9f42713ed18f15dade7049d9a1985","modified":1648887275490},{"_id":"source/tags/index.md","hash":"43564b357f48c6fa79cfa856fa3493997d14231f","modified":1648887130147},{"_id":"source/_posts/2021/07/世界看不见我.md","hash":"594a715c7cdd0fa7ed417fa6b031b7a0eb1acfac","modified":1649073408404},{"_id":"source/_posts/2021/07/唯独你带着喜欢.md","hash":"b5d2ad0c03d3e94b31b55c7d4ea0b6dd44b9b394","modified":1649072673820},{"_id":"source/_posts/2021/07/废墟里的光是自己.md","hash":"600c39f442e5043aaa0debc01abccded5c185d2b","modified":1649072673824},{"_id":"source/_posts/2021/07/归来仍是少年.md","hash":"73ac77094e3830bd369f800ec254ef2278983d25","modified":1649077335965},{"_id":"source/_posts/2021/07/有我一喊就颤心得名字.md","hash":"d7bbb098a9b085570bc8c7cdad4c0bd4f0ef05b3","modified":1649072673829},{"_id":"source/_posts/2021/07/我于硝烟之处重生.md","hash":"c665234477e067b4bc4de42c87b7efa66e24e8a0","modified":1649073873961},{"_id":"source/_posts/2021/07/每一种距离和遗憾都有它存在的意义.md","hash":"7229f1487b7876cf05fd337de74541e9c9561abf","modified":1649072673800},{"_id":"source/_posts/2021/07/生于海归于海.md","hash":"48fbb58d4aafb9e4d4a563fd13f0989aef2a24d6","modified":1649074329117},{"_id":"source/_posts/2021/07/约着见一面吧.md","hash":"f04f606337421ebb5e5a81d1bd842c9bb7368c51","modified":1649072673836},{"_id":"source/_posts/2021/07/缘.md","hash":"8a75e95c4b504957ca5238df4fd2e55851247884","modified":1649074526774},{"_id":"source/_posts/2021/05/ES6-对象的简化写法.md","hash":"0dc1a10af73959d2581f1ee694b82095a1de6a6d","modified":1649072673777},{"_id":"source/_posts/2021/05/ES6-变量的解构赋值.md","hash":"d2b48a8095b2b3b8b557b9475e1d909fd62626aa","modified":1649072673767},{"_id":"source/_posts/2021/05/ES6-let和const命令.md","hash":"e530ce8daffa134dd187074d43cad3763ba47184","modified":1649072673744},{"_id":"source/_posts/2021/05/ES6-模板字符串.md","hash":"e6ed92c508cc7624f95f61116a4090daf762ae11","modified":1649072673785},{"_id":"source/_posts/2021/05/ES6-箭头函数.md","hash":"8c417deaef3261228ec16b27d444c10e95b345f6","modified":1649072673791},{"_id":"source/_posts/2021/05/凛冬不至.md","hash":"2abbe1de03ae540fcbaea3f48cda1ec133ee98e2","modified":1649072673817},{"_id":"source/_posts/2021/05/title.md","hash":"e49abdf19d3a1d172df0cda2cd577a08298cc405","modified":1649072673807},{"_id":"source/_posts/2021/06/ES6-Promise.md","hash":"50e072066275c7165e41b117e82b69f1984871cb","modified":1649072673750},{"_id":"source/_posts/2021/06/ES6-Map.md","hash":"937f033c258aa9abaf7c5b2320673c74432bcce1","modified":1649072673747},{"_id":"source/_posts/2021/06/ES6-Symbol的应用.md","hash":"e92b979e6c390f8439acb5f37b86e7400176605e","modified":1649072673759},{"_id":"source/_posts/2021/06/ES6-get-set.md","hash":"8bb1b92d89a6db98a3d6df6094a42aa6c677df27","modified":1649072673740},{"_id":"source/_posts/2021/06/ES6-Symbol类型的认识.md","hash":"bc2ce71ed1f882024e88edff6ce0365d3a21b5bc","modified":1649072673762},{"_id":"source/_posts/2021/06/ES6-class.md","hash":"08b92c60949fc63f14cc6db7b5f1d0ddb5a2c20d","modified":1649072673738},{"_id":"source/_posts/2021/06/ES6-rest参数.md","hash":"96e421e42b1b28ff3480878dec39ec8ae27f658e","modified":1649072673755},{"_id":"source/_posts/2021/06/ES6-对象方法扩展.md","hash":"7d818e8f127d12d7d8fb04da7ca75d4d7736cc79","modified":1649072673772},{"_id":"source/_posts/2021/06/ES6-函数参数的默认值设置.md","hash":"d4106184834166ddf8e3aad255a23287f146e340","modified":1649072673765},{"_id":"source/_posts/2021/06/ES6-扩展运算符.md","hash":"99718663ef9e28696e3f08838ac764af8d839f3b","modified":1649072673779},{"_id":"source/_posts/2021/06/ES6-数值扩展.md","hash":"9dd397bf6ed795ed11413f60e3fdc878f0fb7bde","modified":1649072673782},{"_id":"source/_posts/2021/06/ES6-迭代器.md","hash":"6abf2498a00b3c34f541273c27a0de5bb78c2e55","modified":1649072673794},{"_id":"source/_posts/2021/06/ES6-集合.md","hash":"982e64cad4f855d2ed874f0e076172871350d0a4","modified":1649072673797},{"_id":"source/_posts/2022/03/vue-cli3创建项目.md","hash":"bbc7f2adab84df0ea0f41203d8ba9cb90e9d6d77","modified":1649072673810},{"_id":"source/_posts/2022/03/js算法排序.md","hash":"16bd97896c20bbbd45a7053ab84e72d25d6f8aae","modified":1649072673804},{"_id":"source/_posts/2022/03/人生何必太复杂.md","hash":"e59a21bc4bc00073b9625330a079d101e74f3b70","modified":1649076142235},{"_id":"source/_posts/2022/03/热爱，可迎万难.md","hash":"f19cb568fb0bf8f44b3f0972777532c20835f65a","modified":1649075551347},{"_id":"source/_posts/2022/04/18个JS的单行代码技巧.md","hash":"c38ae0d83b23d0fdb50aa230ea0070af841ac916","modified":1649151510346},{"_id":"source/_posts/2022/03/温柔和善良.md","hash":"e4bd309c717c561cec8bef756522b1221cf4e1ef","modified":1649075731094},{"_id":"source/_posts/2022/04/接受成长.md","hash":"14743183e91cda8e86ae5e64c37bc825d641cc7a","modified":1649083182116},{"_id":"source/_posts/2022/04/微笑可以治愈一切.md","hash":"5f27f5d0ac4ee5b62463b4974d617cda422c9feb","modified":1649083773073},{"_id":"source/_posts/2022/04/手写new方法和promise方法.md","hash":"febabe2526d3adda9e1f23bc983fc5d77c3d7dc1","modified":1649149762139},{"_id":"source/_posts/2022/04/正则表达式.md","hash":"b3ee3aaa46d46671910a18eafdace3bfefd0c79d","modified":1649149995078},{"_id":"source/_posts/2022/04/追风筝的人.md","hash":"91f3fe7493d5a34a915df7e792a86ab331e38f56","modified":1649076167910},{"_id":"source/_posts/2022/04/防抖和节流.md","hash":"5b79a9176014f8cdc51f1ad29157a31e7b73f2da","modified":1649149499135},{"_id":"source/_posts/2021/06/ES6-Symbol的应用/微信图片_20210605110750.png","hash":"eea61043c49fddc3b54bb4b6fb9c4eefaeff5a1f","modified":1649006629655},{"_id":"source/_posts/2021/06/ES6-Symbol的应用/微信图片_20210605110724.png","hash":"3a28cc77fde2be67bedf97880a8eae376a3a58e9","modified":1649006629657},{"_id":"source/_posts/2022/04/追风筝的人/微信图片_20220404144512.jpg","hash":"71deb61e35846b8d416f9e3b1fd488216c594600","modified":1649054717440},{"_id":"source/_posts/2022/03/人生何必太复杂/微信图片_20220404142320.jpg","hash":"60dd20a1e7a0c796625e19d592f5c20d4517b4a7","modified":1649053742219},{"_id":"source/_posts/2022/04/微笑可以治愈一切/微信图片_20220404143433.jpg","hash":"e2487b843255a11013f23996871686fee0a71092","modified":1649054079479},{"_id":"public/about/index.html","hash":"91497f774680374f4083c2db028ae228ebb2b84d","modified":1649151641642},{"_id":"public/links/index.html","hash":"0edda2dd537dcac29ea7914dc3c73db2b5c6f14a","modified":1649151641642},{"_id":"public/tags/index.html","hash":"60ae5681f499b5d429ed570c0866bc44dd24ab27","modified":1649151641642},{"_id":"public/2022/04/04/追风筝的人/index.html","hash":"150bbe1cb739614f925cc806ed7e0df2c59e1721","modified":1649151641642},{"_id":"public/2022/04/03/接受成长/index.html","hash":"6b28c69d4e9c21c12c5cd73ef5124b2ab6d57d64","modified":1649151641642},{"_id":"public/2022/04/01/微笑可以治愈一切/index.html","hash":"8d4a13d5c141ef28f169193a781a0ed772dc8af0","modified":1649151641642},{"_id":"public/2022/03/31/热爱，可迎万难/index.html","hash":"b31f80310e1424631545311666b71a7b96f1641c","modified":1649151641642},{"_id":"public/2022/03/30/人生何必太复杂/index.html","hash":"055deeef5148cf0f5bcceec1f0e6619d38ff0826","modified":1649151641642},{"_id":"public/2022/03/29/温柔和善良/index.html","hash":"61f86aabc7dfdee1f302126383692d7d8e217c3b","modified":1649151641642},{"_id":"public/2021/07/10/归来仍是少年/index.html","hash":"ac766434e4a19d020639fc42e3e2f29ed7c94938","modified":1649151641642},{"_id":"public/2021/07/09/缘/index.html","hash":"b5516ea5dbc4abc03387daeda5bda7c7b01d6a67","modified":1649151641642},{"_id":"public/2021/07/08/生于海归于海/index.html","hash":"60254c5ec5916cd1082ecee02b7e2c832e2aea5a","modified":1649151641642},{"_id":"public/2021/07/07/我于硝烟之处重生/index.html","hash":"9dca4af57efec690126efb7263e0b4fa3d9377df","modified":1649151641642},{"_id":"public/2021/07/06/世界看不见我/index.html","hash":"082d40dde57bf595b8f55c55dd572875a05fff2e","modified":1649151641642},{"_id":"public/2021/07/05/废墟里的光是自己/index.html","hash":"046de792617c1feb5e34852d283479b8f32eddb5","modified":1649151641642},{"_id":"public/2021/07/04/唯独你带着喜欢/index.html","hash":"ffbfed2070047a8f234f3d01ba5d9c106d8e6979","modified":1649151641642},{"_id":"public/2021/07/03/有我一喊就颤心得名字/index.html","hash":"62311ade433c24c456937747a5cc6813d83ebcc3","modified":1649151641642},{"_id":"public/2021/07/02/约着见一面吧/index.html","hash":"5b49353b700d4d8c61ec49fb18c4b280677347cd","modified":1649151641642},{"_id":"public/2021/07/01/每一种距离和遗憾都有它存在的意义/index.html","hash":"16a984e523a0c101df7333a4155ae2bd59f80f28","modified":1649151641642},{"_id":"public/2021/06/23/ES6-对象方法扩展/index.html","hash":"754ca64fdea3327f0eff3d7168ae6aae85dc2330","modified":1649151641642},{"_id":"public/2021/06/23/ES6-数值扩展/index.html","hash":"7e29bd0ad063f5a273e3505261ace7a6f25dd51d","modified":1649151641642},{"_id":"public/2021/06/23/ES6-get-set/index.html","hash":"cd24fda65df1abe2a49bb62529ae4fb2dabf4528","modified":1649151641642},{"_id":"public/2021/06/23/ES6-Map/index.html","hash":"9bd06861dbd92c41b1a5c03f9070f86222789ecb","modified":1649151641642},{"_id":"public/2021/06/22/ES6-集合/index.html","hash":"51fe714e0f7a3e4a5df2ed771d8f5d6d8ca23810","modified":1649151641642},{"_id":"public/2021/06/03/ES6-Symbol的应用/index.html","hash":"439b14e2b9a8760b09414672bb9ade211dcbcd81","modified":1649151641642},{"_id":"public/2021/06/03/ES6-扩展运算符/index.html","hash":"a6efa07cf4b47e9ce08c25b0b26ccef2a67124b6","modified":1649151641642},{"_id":"public/2021/06/03/ES6-rest参数/index.html","hash":"f9b31a3228cd27bc4f7b5433a651da036ed39f58","modified":1649151641642},{"_id":"public/2021/06/01/ES6-函数参数的默认值设置/index.html","hash":"24ca70fcd133caf8483d62b0ba927ec2ffcb9f3a","modified":1649151641642},{"_id":"public/2021/05/16/ES6-对象的简化写法/index.html","hash":"d2550bf3ea35a4a0b008927220d69c2edc17f279","modified":1649151641642},{"_id":"public/2021/05/16/ES6-模板字符串/index.html","hash":"c729ec5011f59070c1914545598e6cfe1dd11349","modified":1649151641642},{"_id":"public/2021/05/16/ES6-变量的解构赋值/index.html","hash":"fa4411e7a8a31cf911775c839541ed9067b25400","modified":1649151641642},{"_id":"public/2021/05/16/凛冬不至/index.html","hash":"166c508b3746768e1b3c1a8e73625f81d837e2fe","modified":1649151641642},{"_id":"public/2021/05/16/title/index.html","hash":"445486d9ca347b9a4cd598ec14b6e46e220e5be8","modified":1649151641642},{"_id":"public/archives/index.html","hash":"4b25557f3afbfac5eabbacbc89430bb557e3615c","modified":1649151641642},{"_id":"public/archives/page/2/index.html","hash":"4b25557f3afbfac5eabbacbc89430bb557e3615c","modified":1649151641642},{"_id":"public/archives/page/3/index.html","hash":"4b25557f3afbfac5eabbacbc89430bb557e3615c","modified":1649151641642},{"_id":"public/archives/page/4/index.html","hash":"4b25557f3afbfac5eabbacbc89430bb557e3615c","modified":1649151641642},{"_id":"public/archives/page/5/index.html","hash":"4b25557f3afbfac5eabbacbc89430bb557e3615c","modified":1649151641642},{"_id":"public/archives/2021/index.html","hash":"4b25557f3afbfac5eabbacbc89430bb557e3615c","modified":1649151641642},{"_id":"public/archives/2021/page/2/index.html","hash":"4b25557f3afbfac5eabbacbc89430bb557e3615c","modified":1649151641642},{"_id":"public/archives/2021/page/3/index.html","hash":"4b25557f3afbfac5eabbacbc89430bb557e3615c","modified":1649151641642},{"_id":"public/archives/2021/05/index.html","hash":"4b25557f3afbfac5eabbacbc89430bb557e3615c","modified":1649151641642},{"_id":"public/archives/2021/06/index.html","hash":"4b25557f3afbfac5eabbacbc89430bb557e3615c","modified":1649151641642},{"_id":"public/archives/2021/06/page/2/index.html","hash":"4b25557f3afbfac5eabbacbc89430bb557e3615c","modified":1649151641642},{"_id":"public/archives/2021/07/index.html","hash":"4b25557f3afbfac5eabbacbc89430bb557e3615c","modified":1649151641642},{"_id":"public/archives/2022/index.html","hash":"4b25557f3afbfac5eabbacbc89430bb557e3615c","modified":1649151641642},{"_id":"public/archives/2022/page/2/index.html","hash":"4b25557f3afbfac5eabbacbc89430bb557e3615c","modified":1649151641642},{"_id":"public/archives/2022/03/index.html","hash":"4b25557f3afbfac5eabbacbc89430bb557e3615c","modified":1649151641642},{"_id":"public/archives/2022/04/index.html","hash":"4b25557f3afbfac5eabbacbc89430bb557e3615c","modified":1649151641642},{"_id":"public/categories/每日摘抄/index.html","hash":"11c9a12ca0628b0d403cbc88660e6f4a739aed1b","modified":1649151641642},{"_id":"public/categories/ES6/index.html","hash":"11c9a12ca0628b0d403cbc88660e6f4a739aed1b","modified":1649151641642},{"_id":"public/categories/ES6/page/2/index.html","hash":"11c9a12ca0628b0d403cbc88660e6f4a739aed1b","modified":1649151641642},{"_id":"public/categories/生活点滴/index.html","hash":"11c9a12ca0628b0d403cbc88660e6f4a739aed1b","modified":1649151641642},{"_id":"public/categories/JavaScript/index.html","hash":"11c9a12ca0628b0d403cbc88660e6f4a739aed1b","modified":1649151641642},{"_id":"public/categories/Vue/index.html","hash":"11c9a12ca0628b0d403cbc88660e6f4a739aed1b","modified":1649151641642},{"_id":"public/categories/书籍/index.html","hash":"11c9a12ca0628b0d403cbc88660e6f4a739aed1b","modified":1649151641642},{"_id":"public/tags/每日摘抄/index.html","hash":"e29268850dcee7e4bc4c7f9b0517914cecb698c2","modified":1649151641642},{"_id":"public/tags/ES6/index.html","hash":"4f99db6941d39de6599c341913247fc76a0a1f07","modified":1649151641642},{"_id":"public/tags/ES6/page/2/index.html","hash":"5d1b7308b8fc12673e99c80b6af028f0e536b51f","modified":1649151641642},{"_id":"public/tags/let和const命令/index.html","hash":"cfccf7a18f99a9871186b9fbbca14c189706e9ab","modified":1649151641642},{"_id":"public/tags/变量的解构赋值/index.html","hash":"1245a58ee663ef7847bc15c3bf02e1b0dd95a21c","modified":1649151641642},{"_id":"public/tags/对象的简化写法/index.html","hash":"146b23dc31b5df67478e1b6cf12e1933e759f5da","modified":1649151641642},{"_id":"public/tags/模板字符串/index.html","hash":"5eae673a392294fc119f2bdda7fd6196aa4e9887","modified":1649151641642},{"_id":"public/tags/箭头函数/index.html","hash":"2b905b9cea892408299afbc87e3b3c4106cf2da3","modified":1649151641642},{"_id":"public/tags/Promise/index.html","hash":"1206d0f111223328a02fa4fefc28a23dba4fa5da","modified":1649151641642},{"_id":"public/tags/生活点滴/index.html","hash":"a9865bd86889a51cd8e968add65a998a818337b9","modified":1649151641642},{"_id":"public/tags/Map/index.html","hash":"76b50594b11a25f1c7d43a6b9ca0928dd02f7c9b","modified":1649151641642},{"_id":"public/tags/Symbol/index.html","hash":"dc8f4e56d19e3a0dc7627702bf1464342e98af3c","modified":1649151641642},{"_id":"public/tags/get-set/index.html","hash":"e65c5575f798e4abb05cbe43c836e20120fa8c3d","modified":1649151641642},{"_id":"public/tags/rest参数/index.html","hash":"fe3d475e843e7f0d55b10e04da6a6ca3afb9f168","modified":1649151641642},{"_id":"public/tags/class/index.html","hash":"1634e63b556a939893de82205de3b4f4d482e66f","modified":1649151641642},{"_id":"public/tags/函数参数的默认值设置/index.html","hash":"a97159759d503c6c47dd215633edb81b043fde41","modified":1649151641642},{"_id":"public/tags/对象方法扩展/index.html","hash":"03a5cc73a6840250f8ab863405260809fbd1ebbf","modified":1649151641642},{"_id":"public/tags/扩展运算符/index.html","hash":"dbf45fb1a519aeef33bf8e708ab0fd39e4a24e53","modified":1649151641642},{"_id":"public/tags/数值扩展/index.html","hash":"f39bc5132b2b7b653035327fecacdd673f637426","modified":1649151641642},{"_id":"public/tags/迭代器/index.html","hash":"dff49d8f1b4c5a1183faa525f2d003b2566917da","modified":1649151641642},{"_id":"public/tags/集合/index.html","hash":"a41ecbcc17aa6dfdeb3a5524f949fe703d29d923","modified":1649151641642},{"_id":"public/tags/JavaScript/index.html","hash":"b44b59c24b8c2634f4c61a6cefca4dae685685ac","modified":1649151641642},{"_id":"public/tags/vue/index.html","hash":"676157ee1522af6d1219ee652df6a629afa15e57","modified":1649151641642},{"_id":"public/tags/书籍读后感/index.html","hash":"60fc6315c8f2452531efb6ebbdf1453a8acd27a6","modified":1649151641642},{"_id":"public/index.html","hash":"f304f973a91dbad7f4b74bc708c2b6a23637f2cd","modified":1649151641642},{"_id":"public/page/2/index.html","hash":"17f55645bdd3ecda3493b9b19b41bc9e57d4f3de","modified":1649151641642},{"_id":"public/page/4/index.html","hash":"84f083e6f094d4211f6becd1fdef2812c550ce1e","modified":1649151641642},{"_id":"public/page/3/index.html","hash":"627767d6dac2eb7bdb74445e3bef4d37c11bc1d4","modified":1649151641642},{"_id":"public/page/5/index.html","hash":"71dc6dd6949a76299369c16f46d8a10a8890d7c0","modified":1649151641642},{"_id":"public/categories/index.html","hash":"ddd3b59345445aaef9d8cafa9811e4a9ce5a5974","modified":1649151641642},{"_id":"public/2022/04/05/18个JS的单行代码技巧/index.html","hash":"c6eb844cd8053eef89a97da4a677d04a6c4a88ef","modified":1649151641642},{"_id":"public/2022/04/05/手写new方法和promise方法/index.html","hash":"be20565ac3d47dae13ad448b2385f30cabaa4b75","modified":1649151641642},{"_id":"public/2022/04/05/防抖和节流/index.html","hash":"532b76ad944ee6c61a6cbeade87ea92aa1b67e16","modified":1649151641642},{"_id":"public/2022/04/02/正则表达式/index.html","hash":"36d53dfe8f17811b63658845e9aaab17082b5a3c","modified":1649151641642},{"_id":"public/2022/03/31/vue-cli3创建项目/index.html","hash":"2d7b9d14f3e8d2f0e81acc9646e9282223a11dac","modified":1649151641642},{"_id":"public/2022/03/28/js算法排序/index.html","hash":"397a15bf85a58c1f6677eb4d3156e8d9ea21cfa2","modified":1649151641642},{"_id":"public/2021/06/23/ES6-class/index.html","hash":"682f657bf804bc12c835a5d839e26b079e967301","modified":1649151641642},{"_id":"public/2021/06/22/ES6-Promise/index.html","hash":"8f30024d183cfea34a19239ab5f45e7699493d9a","modified":1649151641642},{"_id":"public/2021/06/09/ES6-迭代器/index.html","hash":"bf54c1a65dca1041786993c0270ea889125519ed","modified":1649151641642},{"_id":"public/2021/06/03/ES6-Symbol类型的认识/index.html","hash":"fbf1506401e2714ea421adae00de5e5eca508f70","modified":1649151641642},{"_id":"public/2021/05/16/ES6-箭头函数/index.html","hash":"0695585fa92d0bc6aa20054775538ec1a1cf5638","modified":1649151641642},{"_id":"public/2021/05/16/ES6-let和const命令/index.html","hash":"47176241c3a1105872d0608582230087b8a0fabd","modified":1649151641642},{"_id":"public/image/favicon.ico","hash":"fad2c16f133094e29f9c4aa8a946b7aa200ec98b","modified":1649151641642},{"_id":"public/image/img.jpg","hash":"32a6010e5d1e590081eeb9292ac989181bf5421e","modified":1649151641642},{"_id":"public/image/logo.png","hash":"3487c0299f2f69abc8bbbd5d7c61ad77b311c801","modified":1649151641642},{"_id":"public/image/pattern.png","hash":"e9a79b9b5716c781e8f5acf3462e42fae7f39741","modified":1649151641642},{"_id":"public/image/img.ico","hash":"f2c09c9bab4f94e8b24a131ee8527e22fba2c6eb","modified":1649151641642},{"_id":"public/css/about.css","hash":"d3d7ae17f0571f1cec4514135d644c6590118bd0","modified":1649151641642},{"_id":"public/css/archive.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1649151641642},{"_id":"public/css/atom-one-dark.css","hash":"da8603ef348b38d6ef090fa9172a6521e53b6c89","modified":1649151641642},{"_id":"public/css/categories.css","hash":"06b727d6e2e21b1e5ab12de073406517c32dfe93","modified":1649151641642},{"_id":"public/css/food.css","hash":"10a0e21ef9b2e4a6af9328be51e1c0368ca91f4e","modified":1649151641642},{"_id":"public/css/header.css","hash":"e3ce1dbac2e258f0943c5aebdd89b29702246baa","modified":1649151641642},{"_id":"public/css/links.css","hash":"c7afe457cea5d996ee86cfc47174aa114e458fb0","modified":1649151641642},{"_id":"public/css/home.css","hash":"e474078a73fa75f23f37092f01505dd8063ffc38","modified":1649151641642},{"_id":"public/css/page_cente.css","hash":"48a02b7b41ee89f47295b7af869767962e0fdba3","modified":1649151641642},{"_id":"public/css/page.css","hash":"0514b75a35c93c10826cd861f0dd380d90ba8e41","modified":1649151641642},{"_id":"public/css/tags.css","hash":"b2de1e197efba0a058f1a5d37aa014fcfc0016ff","modified":1649151641642},{"_id":"public/css/tag.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1649151641642},{"_id":"public/js/gotop.js","hash":"2bd969b8dd7b81626dcd2a3d8a1b1bbb4e0fc33c","modified":1649151641642},{"_id":"public/image/微信图片_20210605110750.png","hash":"eea61043c49fddc3b54bb4b6fb9c4eefaeff5a1f","modified":1649151641642},{"_id":"public/image/微信图片_20210605110724.png","hash":"3a28cc77fde2be67bedf97880a8eae376a3a58e9","modified":1649151641642},{"_id":"public/2021/06/03/ES6-Symbol的应用/微信图片_20210605110724.png","hash":"3a28cc77fde2be67bedf97880a8eae376a3a58e9","modified":1649151641642},{"_id":"public/2021/06/03/ES6-Symbol的应用/微信图片_20210605110750.png","hash":"eea61043c49fddc3b54bb4b6fb9c4eefaeff5a1f","modified":1649151641642},{"_id":"public/js/jquery.min.js","hash":"948b382d052e9af0de5353f29f986d3080e7221c","modified":1649151641642},{"_id":"public/2022/04/04/追风筝的人/微信图片_20220404144512.jpg","hash":"71deb61e35846b8d416f9e3b1fd488216c594600","modified":1649151641642},{"_id":"public/2022/03/30/人生何必太复杂/微信图片_20220404142320.jpg","hash":"60dd20a1e7a0c796625e19d592f5c20d4517b4a7","modified":1649151641642},{"_id":"public/2022/04/01/微笑可以治愈一切/微信图片_20220404143433.jpg","hash":"e2487b843255a11013f23996871686fee0a71092","modified":1649151641642}],"Category":[{"name":"每日摘抄","_id":"cl1lyb3350004n4voavbh45cj"},{"name":"ES6","_id":"cl1lyb33l000tn4vo2aoqg9eg"},{"name":"生活点滴","_id":"cl1lyb33y001pn4vogvbybwlk"},{"name":"JavaScript","_id":"cl1lyb34p002wn4vo8nic8fxp"},{"name":"Vue","_id":"cl1lyb34s0035n4vohlao6flb"},{"name":"书籍","_id":"cl1lyb35g004un4vo8xwo08l6"}],"Data":[],"Page":[{"title":"文章分类","date":"2020-11-01T16:00:00.000Z","type":"categories","layout":"categories","author":"79bk.cn","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2020-11-02\ntype: categories\nlayout: categories\nauthor: 79bk.cn\n---","updated":"2022-04-02T08:14:55.870Z","path":"categories/index.html","comments":1,"_id":"cl1lyb32x0000n4vo94ur0ay5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"个人简介","date":"2020-11-02T16:00:00.000Z","aubot":"小豪","portrait":"https://cdn.jsdelivr.net/gh/duogongneng/MyBlogImg/imgIMG_7327.jpeg","describe":"Hello，我是小豪，一个阳光快乐的喜欢分享，并想通过分享让你感受美好、有所收获的男孩子。越长大越懂得，男生间的友谊更细水长流。  \n学生时期开始的友谊，更多是一种知根知底的陪伴，我见过你每个时期的样子，或丑或美我都在工作以后，尤其是毕业以后的友谊，更多是一种共同成长和互相成就，会因为对方的幸福和成绩而开心。 \n很多朋友只会陪你走一段路，还能一直陪在身边的，一定要好好珍惜。  \n其实生活圈不难，可以是与人的相处，可以是你吃到的美食或去到好玩的地方，也可以是对某个社会热点的感悟。  \n只要真实的表达，去说故事或分享对他人有用的讯息，就能引起关注、引发共鸣。 ","type":"about","layout":"about","author":"79bk.cn","_content":"","source":"about/index.md","raw":"---\ntitle: 个人简介\ndate: 2020-11-03\naubot: 小豪\nportrait: 'https://cdn.jsdelivr.net/gh/duogongneng/MyBlogImg/imgIMG_7327.jpeg'\ndescribe: 'Hello，我是小豪，一个阳光快乐的喜欢分享，并想通过分享让你感受美好、有所收获的男孩子。越长大越懂得，男生间的友谊更细水长流。  \n\n学生时期开始的友谊，更多是一种知根知底的陪伴，我见过你每个时期的样子，或丑或美我都在工作以后，尤其是毕业以后的友谊，更多是一种共同成长和互相成就，会因为对方的幸福和成绩而开心。 \n\n很多朋友只会陪你走一段路，还能一直陪在身边的，一定要好好珍惜。  \n\n其实生活圈不难，可以是与人的相处，可以是你吃到的美食或去到好玩的地方，也可以是对某个社会热点的感悟。  \n\n只要真实的表达，去说故事或分享对他人有用的讯息，就能引起关注、引发共鸣。 '\ntype: \"about\"\nlayout: \"about\"\nauthor: 79bk.cn\n---","updated":"2022-04-04T04:40:11.248Z","path":"about/index.html","comments":1,"_id":"cl1lyb3330002n4vo65tvhwui","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"友情链接","date":"2020-09-18T16:00:00.000Z","type":"links","layout":"links","author":"79bk.cn","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\ndate: 2020-09-19\ntype: \"links\"\nlayout: \"links\"\nauthor: 79bk.cn\n---","updated":"2022-04-02T08:14:35.490Z","path":"links/index.html","comments":1,"_id":"cl1lyb3370006n4vofv8s81bj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-09-19T08:19:22.000Z","layout":"tags","author":"79bk.cn","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-09-19 16:19:22\nlayout: \"tags\"\nauthor: 79bk.cn\n---","updated":"2022-04-02T08:12:10.147Z","path":"tags/index.html","comments":1,"_id":"cl1lyb3380008n4vodcd59trp","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"唯独你带着喜欢","date":"2021-07-04T03:17:04.000Z","_content":"        刚刚在路上看见一个人很像你  \n        渴望是你，又害怕是你  \n        直到看清不是你  \n        我庆幸不是你  \n        又遗憾不是你  \n\n        晚是世界的晚  \n        安是对你的安  \n        我对全世界说晚安  \n        唯独你带着喜欢  \n\n        我告诉你我喜欢你  \n        并不是一定要和你在一起  \n        只是希望今后的你  \n        在遭遇人生低谷的时候  \n        不要灰心，至少有一个人被你的魅力所吸引  \n        曾经是，以后也会是    \n                      \n        东野圭吾说过  \n        其实所有纠结做选择的人，心里早有了答案  \n        咨询只是想得到内心所倾向的选择   \n        最后所谓的命运，还是自己一步一步走出来的  \n\n        对不起啊，喜欢你这么久  \n        差点以为你就是我的了  \n        其实我很开心可以遇见你  \n        也很荣幸可以遇见你  \n        只是很遗憾没办法拥有你       \n","source":"_posts/2021/07/唯独你带着喜欢.md","raw":"---\ntitle: 唯独你带着喜欢\ncategories: 每日摘抄\ndate: 2021-07-04 11:17:04\ntags:  \n      - 每日摘抄\n---\n        刚刚在路上看见一个人很像你  \n        渴望是你，又害怕是你  \n        直到看清不是你  \n        我庆幸不是你  \n        又遗憾不是你  \n\n        晚是世界的晚  \n        安是对你的安  \n        我对全世界说晚安  \n        唯独你带着喜欢  \n\n        我告诉你我喜欢你  \n        并不是一定要和你在一起  \n        只是希望今后的你  \n        在遭遇人生低谷的时候  \n        不要灰心，至少有一个人被你的魅力所吸引  \n        曾经是，以后也会是    \n                      \n        东野圭吾说过  \n        其实所有纠结做选择的人，心里早有了答案  \n        咨询只是想得到内心所倾向的选择   \n        最后所谓的命运，还是自己一步一步走出来的  \n\n        对不起啊，喜欢你这么久  \n        差点以为你就是我的了  \n        其实我很开心可以遇见你  \n        也很荣幸可以遇见你  \n        只是很遗憾没办法拥有你       \n","slug":"唯独你带着喜欢","published":1,"updated":"2022-04-04T11:44:33.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb32z0001n4vo729qb68l","content":"<pre><code>    刚刚在路上看见一个人很像你  \n    渴望是你，又害怕是你  \n    直到看清不是你  \n    我庆幸不是你  \n    又遗憾不是你  \n\n    晚是世界的晚  \n    安是对你的安  \n    我对全世界说晚安  \n    唯独你带着喜欢  \n\n    我告诉你我喜欢你  \n    并不是一定要和你在一起  \n    只是希望今后的你  \n    在遭遇人生低谷的时候  \n    不要灰心，至少有一个人被你的魅力所吸引  \n    曾经是，以后也会是    \n                  \n    东野圭吾说过  \n    其实所有纠结做选择的人，心里早有了答案  \n    咨询只是想得到内心所倾向的选择   \n    最后所谓的命运，还是自己一步一步走出来的  \n\n    对不起啊，喜欢你这么久  \n    差点以为你就是我的了  \n    其实我很开心可以遇见你  \n    也很荣幸可以遇见你  \n    只是很遗憾没办法拥有你       \n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>    刚刚在路上看见一个人很像你  \n    渴望是你，又害怕是你  \n    直到看清不是你  \n    我庆幸不是你  \n    又遗憾不是你  \n\n    晚是世界的晚  \n    安是对你的安  \n    我对全世界说晚安  \n    唯独你带着喜欢  \n\n    我告诉你我喜欢你  \n    并不是一定要和你在一起  \n    只是希望今后的你  \n    在遭遇人生低谷的时候  \n    不要灰心，至少有一个人被你的魅力所吸引  \n    曾经是，以后也会是    \n                  \n    东野圭吾说过  \n    其实所有纠结做选择的人，心里早有了答案  \n    咨询只是想得到内心所倾向的选择   \n    最后所谓的命运，还是自己一步一步走出来的  \n\n    对不起啊，喜欢你这么久  \n    差点以为你就是我的了  \n    其实我很开心可以遇见你  \n    也很荣幸可以遇见你  \n    只是很遗憾没办法拥有你       \n</code></pre>\n"},{"title":"世界看不见我","date":"2021-07-06T03:17:04.000Z","_content":"        世界看不见我，我抬头  \n        看见了春花，看见了夏夜  \n        看见了秋实，看见了冬雪  \n        我以为，我看见了整个世界      \n\n        世界看不见我，我愿与人间万物消弭  \n        散于风起，融于雨落  \n        溺于水波，腾于云烟  \n        与星空同坠落人间，与新芽萌生于大地  \n        不存于世间，却仍存于世间        \n\n        我打碎夕阳  \n        落日的余晖从山楂树的叶子间落在我的脸上  \n        也是那样一个黄昏十分  \n        只不过树下没有了曾经的我们       \n                      \n        我偷了星光，偷不走月光  \n        我闭上了双眼，也听不清真相  \n        克伐怨欲的人  \n        终将被埋葬     \n\n        等一个黄昏  \n        合上书本，打个小盹  \n        忽闻远处吆喝的卖油翁  \n        没有满腹经纶  \n        却最懂这红尘滚滚，光阴寸寸  \n","source":"_posts/2021/07/世界看不见我.md","raw":"---\ntitle: 世界看不见我\ncategories: 每日摘抄\ndate: 2021-07-06 11:17:04\ntags:  \n      - 每日摘抄\n---\n        世界看不见我，我抬头  \n        看见了春花，看见了夏夜  \n        看见了秋实，看见了冬雪  \n        我以为，我看见了整个世界      \n\n        世界看不见我，我愿与人间万物消弭  \n        散于风起，融于雨落  \n        溺于水波，腾于云烟  \n        与星空同坠落人间，与新芽萌生于大地  \n        不存于世间，却仍存于世间        \n\n        我打碎夕阳  \n        落日的余晖从山楂树的叶子间落在我的脸上  \n        也是那样一个黄昏十分  \n        只不过树下没有了曾经的我们       \n                      \n        我偷了星光，偷不走月光  \n        我闭上了双眼，也听不清真相  \n        克伐怨欲的人  \n        终将被埋葬     \n\n        等一个黄昏  \n        合上书本，打个小盹  \n        忽闻远处吆喝的卖油翁  \n        没有满腹经纶  \n        却最懂这红尘滚滚，光阴寸寸  \n","slug":"世界看不见我","published":1,"updated":"2022-04-04T11:56:48.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb3330003n4voe9ey077g","content":"<pre><code>    世界看不见我，我抬头  \n    看见了春花，看见了夏夜  \n    看见了秋实，看见了冬雪  \n    我以为，我看见了整个世界      \n\n    世界看不见我，我愿与人间万物消弭  \n    散于风起，融于雨落  \n    溺于水波，腾于云烟  \n    与星空同坠落人间，与新芽萌生于大地  \n    不存于世间，却仍存于世间        \n\n    我打碎夕阳  \n    落日的余晖从山楂树的叶子间落在我的脸上  \n    也是那样一个黄昏十分  \n    只不过树下没有了曾经的我们       \n                  \n    我偷了星光，偷不走月光  \n    我闭上了双眼，也听不清真相  \n    克伐怨欲的人  \n    终将被埋葬     \n\n    等一个黄昏  \n    合上书本，打个小盹  \n    忽闻远处吆喝的卖油翁  \n    没有满腹经纶  \n    却最懂这红尘滚滚，光阴寸寸  \n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>    世界看不见我，我抬头  \n    看见了春花，看见了夏夜  \n    看见了秋实，看见了冬雪  \n    我以为，我看见了整个世界      \n\n    世界看不见我，我愿与人间万物消弭  \n    散于风起，融于雨落  \n    溺于水波，腾于云烟  \n    与星空同坠落人间，与新芽萌生于大地  \n    不存于世间，却仍存于世间        \n\n    我打碎夕阳  \n    落日的余晖从山楂树的叶子间落在我的脸上  \n    也是那样一个黄昏十分  \n    只不过树下没有了曾经的我们       \n                  \n    我偷了星光，偷不走月光  \n    我闭上了双眼，也听不清真相  \n    克伐怨欲的人  \n    终将被埋葬     \n\n    等一个黄昏  \n    合上书本，打个小盹  \n    忽闻远处吆喝的卖油翁  \n    没有满腹经纶  \n    却最懂这红尘滚滚，光阴寸寸  \n</code></pre>\n"},{"title":"废墟里的光是自己","date":"2021-07-05T03:17:04.000Z","_content":"        请再努力一下一下  \n        为了你想见的人  \n        想做的事  \n        想成为的自己    \n\n        努力的意义  \n        不在于一定会让你取得多大的成就  \n        只是让你在平凡的日子里  \n        活得比原来那个自己更好一些    \n\n        无论现在的你处于一个什么状态  \n        是时候对自己说：  \n        不为模糊不清的未来担忧  \n        只为清清楚楚的现在努力      \n                      \n        没人能让我输  \n        除非我不想赢    \n\n        生命是有限的  \n        选择是自由的       \n","source":"_posts/2021/07/废墟里的光是自己.md","raw":"---\ntitle: 废墟里的光是自己\ncategories: 每日摘抄\ndate: 2021-07-05 11:17:04\ntags:  \n      - 每日摘抄\n---\n        请再努力一下一下  \n        为了你想见的人  \n        想做的事  \n        想成为的自己    \n\n        努力的意义  \n        不在于一定会让你取得多大的成就  \n        只是让你在平凡的日子里  \n        活得比原来那个自己更好一些    \n\n        无论现在的你处于一个什么状态  \n        是时候对自己说：  \n        不为模糊不清的未来担忧  \n        只为清清楚楚的现在努力      \n                      \n        没人能让我输  \n        除非我不想赢    \n\n        生命是有限的  \n        选择是自由的       \n","slug":"废墟里的光是自己","published":1,"updated":"2022-04-04T11:44:33.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb3370007n4vo345b5oar","content":"<pre><code>    请再努力一下一下  \n    为了你想见的人  \n    想做的事  \n    想成为的自己    \n\n    努力的意义  \n    不在于一定会让你取得多大的成就  \n    只是让你在平凡的日子里  \n    活得比原来那个自己更好一些    \n\n    无论现在的你处于一个什么状态  \n    是时候对自己说：  \n    不为模糊不清的未来担忧  \n    只为清清楚楚的现在努力      \n                  \n    没人能让我输  \n    除非我不想赢    \n\n    生命是有限的  \n    选择是自由的       \n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>    请再努力一下一下  \n    为了你想见的人  \n    想做的事  \n    想成为的自己    \n\n    努力的意义  \n    不在于一定会让你取得多大的成就  \n    只是让你在平凡的日子里  \n    活得比原来那个自己更好一些    \n\n    无论现在的你处于一个什么状态  \n    是时候对自己说：  \n    不为模糊不清的未来担忧  \n    只为清清楚楚的现在努力      \n                  \n    没人能让我输  \n    除非我不想赢    \n\n    生命是有限的  \n    选择是自由的       \n</code></pre>\n"},{"title":"归来仍是少年","date":"2021-07-10T12:18:38.000Z","_content":"    愿你出走半生，归来仍是少年。愿少年永远乘风破浪!  \n\n    1.竹杖芒鞋轻胜马，谁怕?一蓑烟雨任平生。  \n                                --苏轼《定风波.莫听穿林打叶声》\n\n    2.会当凌绝顶，一览众山小。  \n                                --杜甫《望岳》\n\n    3.千磨万击还坚劲，任尔东西南北风。  \n                                --郑燮《竹石》\n\n    4.男儿不展风云志，空负天生八尺躯。  \n                                --《警世通言.卷四十》\n\n    5.天生我材必有用，千金散尽还复来。  \n                                --李白《将进酒》\n\n    6.长风破浪会有时，直挂云帆济沧海。  \n                                --李白《行路难》\n\n    7.读书不觉已春深，-寸光阴一寸金。  \n                               --王贞白《白鹿洞二首》\n\n    8.时人不识凌云木，直待凌云始道高。  \n                               --杜荀鹤《小松》\n\n    9.恰同学少年，风华正茂;书生意气，挥斥方遒。  \n                               --毛泽东《沁园春.长沙》\n\n    10.盛年不重来，一日难再晨。  \n                               --陶渊明《杂诗》  \n","source":"_posts/2021/07/归来仍是少年.md","raw":"---\ntitle: 归来仍是少年\ncategories: 每日摘抄\ndate: 2021-07-10 20:18:38\ntags:  \n      - 每日摘抄\n---\n    愿你出走半生，归来仍是少年。愿少年永远乘风破浪!  \n\n    1.竹杖芒鞋轻胜马，谁怕?一蓑烟雨任平生。  \n                                --苏轼《定风波.莫听穿林打叶声》\n\n    2.会当凌绝顶，一览众山小。  \n                                --杜甫《望岳》\n\n    3.千磨万击还坚劲，任尔东西南北风。  \n                                --郑燮《竹石》\n\n    4.男儿不展风云志，空负天生八尺躯。  \n                                --《警世通言.卷四十》\n\n    5.天生我材必有用，千金散尽还复来。  \n                                --李白《将进酒》\n\n    6.长风破浪会有时，直挂云帆济沧海。  \n                                --李白《行路难》\n\n    7.读书不觉已春深，-寸光阴一寸金。  \n                               --王贞白《白鹿洞二首》\n\n    8.时人不识凌云木，直待凌云始道高。  \n                               --杜荀鹤《小松》\n\n    9.恰同学少年，风华正茂;书生意气，挥斥方遒。  \n                               --毛泽东《沁园春.长沙》\n\n    10.盛年不重来，一日难再晨。  \n                               --陶渊明《杂诗》  \n","slug":"归来仍是少年","published":1,"updated":"2022-04-04T13:02:15.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb3390009n4vodsm7bygm","content":"<pre><code>愿你出走半生，归来仍是少年。愿少年永远乘风破浪!  \n\n1.竹杖芒鞋轻胜马，谁怕?一蓑烟雨任平生。  \n                            --苏轼《定风波.莫听穿林打叶声》\n\n2.会当凌绝顶，一览众山小。  \n                            --杜甫《望岳》\n\n3.千磨万击还坚劲，任尔东西南北风。  \n                            --郑燮《竹石》\n\n4.男儿不展风云志，空负天生八尺躯。  \n                            --《警世通言.卷四十》\n\n5.天生我材必有用，千金散尽还复来。  \n                            --李白《将进酒》\n\n6.长风破浪会有时，直挂云帆济沧海。  \n                            --李白《行路难》\n\n7.读书不觉已春深，-寸光阴一寸金。  \n                           --王贞白《白鹿洞二首》\n\n8.时人不识凌云木，直待凌云始道高。  \n                           --杜荀鹤《小松》\n\n9.恰同学少年，风华正茂;书生意气，挥斥方遒。  \n                           --毛泽东《沁园春.长沙》\n\n10.盛年不重来，一日难再晨。  \n                           --陶渊明《杂诗》  \n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>愿你出走半生，归来仍是少年。愿少年永远乘风破浪!  \n\n1.竹杖芒鞋轻胜马，谁怕?一蓑烟雨任平生。  \n                            --苏轼《定风波.莫听穿林打叶声》\n\n2.会当凌绝顶，一览众山小。  \n                            --杜甫《望岳》\n\n3.千磨万击还坚劲，任尔东西南北风。  \n                            --郑燮《竹石》\n\n4.男儿不展风云志，空负天生八尺躯。  \n                            --《警世通言.卷四十》\n\n5.天生我材必有用，千金散尽还复来。  \n                            --李白《将进酒》\n\n6.长风破浪会有时，直挂云帆济沧海。  \n                            --李白《行路难》\n\n7.读书不觉已春深，-寸光阴一寸金。  \n                           --王贞白《白鹿洞二首》\n\n8.时人不识凌云木，直待凌云始道高。  \n                           --杜荀鹤《小松》\n\n9.恰同学少年，风华正茂;书生意气，挥斥方遒。  \n                           --毛泽东《沁园春.长沙》\n\n10.盛年不重来，一日难再晨。  \n                           --陶渊明《杂诗》  \n</code></pre>\n"},{"title":"有我一喊就颤心得名字","date":"2021-07-03T03:17:04.000Z","_content":"        我们都喜欢光  \n        虽然转瞬即逝  \n        但你还是你  \n        有我一喊就颤心得名字    \n                      -----余秀华\n\n        人分两类  \n        是你和不是你  \n        时间也分两类  \n        你在的时候和你不在的时候   \n                      -----冯唐\n\n        大概是我走一程  \n        期许一程，回望一程  \n        目之所及里没有她  \n        翻山越岭也没有她  \n        可她分明就在这世上  \n        也在我的心尖上  \n                      \n        我在人群里冷冷清清  \n        但对喜欢的人  \n        会笑的很甜  \n        比如：在你面前     \n                      -----钱钟书\n\n        每个人心中都有一团烟火  \n        但路过的人只看到烟  \n        总有那么一个人能看到这团火  \n        然后走过来，陪我一起     \n                      -----梵高     ","source":"_posts/2021/07/有我一喊就颤心得名字.md","raw":"---\ntitle: 有我一喊就颤心得名字\ncategories: 每日摘抄\ndate: 2021-07-03 11:17:04\ntags:  \n      - 每日摘抄\n---\n        我们都喜欢光  \n        虽然转瞬即逝  \n        但你还是你  \n        有我一喊就颤心得名字    \n                      -----余秀华\n\n        人分两类  \n        是你和不是你  \n        时间也分两类  \n        你在的时候和你不在的时候   \n                      -----冯唐\n\n        大概是我走一程  \n        期许一程，回望一程  \n        目之所及里没有她  \n        翻山越岭也没有她  \n        可她分明就在这世上  \n        也在我的心尖上  \n                      \n        我在人群里冷冷清清  \n        但对喜欢的人  \n        会笑的很甜  \n        比如：在你面前     \n                      -----钱钟书\n\n        每个人心中都有一团烟火  \n        但路过的人只看到烟  \n        总有那么一个人能看到这团火  \n        然后走过来，陪我一起     \n                      -----梵高     ","slug":"有我一喊就颤心得名字","published":1,"updated":"2022-04-04T11:44:33.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb33a000an4voanxz2uec","content":"<pre><code>    我们都喜欢光  \n    虽然转瞬即逝  \n    但你还是你  \n    有我一喊就颤心得名字    \n                  -----余秀华\n\n    人分两类  \n    是你和不是你  \n    时间也分两类  \n    你在的时候和你不在的时候   \n                  -----冯唐\n\n    大概是我走一程  \n    期许一程，回望一程  \n    目之所及里没有她  \n    翻山越岭也没有她  \n    可她分明就在这世上  \n    也在我的心尖上  \n                  \n    我在人群里冷冷清清  \n    但对喜欢的人  \n    会笑的很甜  \n    比如：在你面前     \n                  -----钱钟书\n\n    每个人心中都有一团烟火  \n    但路过的人只看到烟  \n    总有那么一个人能看到这团火  \n    然后走过来，陪我一起     \n                  -----梵高     \n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>    我们都喜欢光  \n    虽然转瞬即逝  \n    但你还是你  \n    有我一喊就颤心得名字    \n                  -----余秀华\n\n    人分两类  \n    是你和不是你  \n    时间也分两类  \n    你在的时候和你不在的时候   \n                  -----冯唐\n\n    大概是我走一程  \n    期许一程，回望一程  \n    目之所及里没有她  \n    翻山越岭也没有她  \n    可她分明就在这世上  \n    也在我的心尖上  \n                  \n    我在人群里冷冷清清  \n    但对喜欢的人  \n    会笑的很甜  \n    比如：在你面前     \n                  -----钱钟书\n\n    每个人心中都有一团烟火  \n    但路过的人只看到烟  \n    总有那么一个人能看到这团火  \n    然后走过来，陪我一起     \n                  -----梵高     \n</code></pre>\n"},{"title":"我于硝烟之处重生","date":"2021-07-07T03:19:08.000Z","_content":"        我于硝烟之处重生  \n        入目是我过往破碎的躯体 \n        肉与土融于一处  \n        雪与血积成沙丘    \n\n        少年别踌躇，赤子莫停驻。  \n        还有好些日子弄月煮茗，渔樵沧浪  \n        浩渺跌宕。有千万人跌跌撞撞  \n        独他鲜衣怒马，旗焘不让  \n        他要惊鸿激昂。拜托拜托  \n        他是独勇无二的辉煌。   \n\n        少年莫彷徨，姑且追春光  \n        还有好些日子去闻花香  \n        纵马斜阳，随心流浪  \n        有千万人迎风去，唯他逆风上  \n        世若暗暗夜，他便是光亮。     \n                      \n        延时摄影下的画面留下了所有光的运行轨迹  \n        所以要发光 哪怕是一点微小的星芒   \n        都会被记住   \n\n        无论我们最后生疏成什么样子  \n        曾经对你的好都是真的  \n        就算终有一散，也别辜负相遇  \n        希望你别后悔认识我，也是真的快乐过  \n        如果能回到从前，我会选择不认识你  \n        不是我后悔，是我不能面对现在的结局        \n","source":"_posts/2021/07/我于硝烟之处重生.md","raw":"---\ntitle: 我于硝烟之处重生\ncategories: 每日摘抄\ndate: 2021-07-07 11:19:08\ntags:  \n      - 每日摘抄\n---\n        我于硝烟之处重生  \n        入目是我过往破碎的躯体 \n        肉与土融于一处  \n        雪与血积成沙丘    \n\n        少年别踌躇，赤子莫停驻。  \n        还有好些日子弄月煮茗，渔樵沧浪  \n        浩渺跌宕。有千万人跌跌撞撞  \n        独他鲜衣怒马，旗焘不让  \n        他要惊鸿激昂。拜托拜托  \n        他是独勇无二的辉煌。   \n\n        少年莫彷徨，姑且追春光  \n        还有好些日子去闻花香  \n        纵马斜阳，随心流浪  \n        有千万人迎风去，唯他逆风上  \n        世若暗暗夜，他便是光亮。     \n                      \n        延时摄影下的画面留下了所有光的运行轨迹  \n        所以要发光 哪怕是一点微小的星芒   \n        都会被记住   \n\n        无论我们最后生疏成什么样子  \n        曾经对你的好都是真的  \n        就算终有一散，也别辜负相遇  \n        希望你别后悔认识我，也是真的快乐过  \n        如果能回到从前，我会选择不认识你  \n        不是我后悔，是我不能面对现在的结局        \n","slug":"我于硝烟之处重生","published":1,"updated":"2022-04-04T12:04:33.961Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb33c000en4vo5ygcc2q1","content":"<pre><code>    我于硝烟之处重生  \n    入目是我过往破碎的躯体 \n    肉与土融于一处  \n    雪与血积成沙丘    \n\n    少年别踌躇，赤子莫停驻。  \n    还有好些日子弄月煮茗，渔樵沧浪  \n    浩渺跌宕。有千万人跌跌撞撞  \n    独他鲜衣怒马，旗焘不让  \n    他要惊鸿激昂。拜托拜托  \n    他是独勇无二的辉煌。   \n\n    少年莫彷徨，姑且追春光  \n    还有好些日子去闻花香  \n    纵马斜阳，随心流浪  \n    有千万人迎风去，唯他逆风上  \n    世若暗暗夜，他便是光亮。     \n                  \n    延时摄影下的画面留下了所有光的运行轨迹  \n    所以要发光 哪怕是一点微小的星芒   \n    都会被记住   \n\n    无论我们最后生疏成什么样子  \n    曾经对你的好都是真的  \n    就算终有一散，也别辜负相遇  \n    希望你别后悔认识我，也是真的快乐过  \n    如果能回到从前，我会选择不认识你  \n    不是我后悔，是我不能面对现在的结局        \n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>    我于硝烟之处重生  \n    入目是我过往破碎的躯体 \n    肉与土融于一处  \n    雪与血积成沙丘    \n\n    少年别踌躇，赤子莫停驻。  \n    还有好些日子弄月煮茗，渔樵沧浪  \n    浩渺跌宕。有千万人跌跌撞撞  \n    独他鲜衣怒马，旗焘不让  \n    他要惊鸿激昂。拜托拜托  \n    他是独勇无二的辉煌。   \n\n    少年莫彷徨，姑且追春光  \n    还有好些日子去闻花香  \n    纵马斜阳，随心流浪  \n    有千万人迎风去，唯他逆风上  \n    世若暗暗夜，他便是光亮。     \n                  \n    延时摄影下的画面留下了所有光的运行轨迹  \n    所以要发光 哪怕是一点微小的星芒   \n    都会被记住   \n\n    无论我们最后生疏成什么样子  \n    曾经对你的好都是真的  \n    就算终有一散，也别辜负相遇  \n    希望你别后悔认识我，也是真的快乐过  \n    如果能回到从前，我会选择不认识你  \n    不是我后悔，是我不能面对现在的结局        \n</code></pre>\n"},{"title":"每一种距离和遗憾都有它存在的意义","date":"2021-07-01T03:17:04.000Z","_content":"        微风穿过百里林荫  \n        鸟雀跳在树梢  \n        春日最好的太阳照在这里  \n        于是长路落满了光  \n                      -----木苏里《某某》\n\n        人间盛望，故里江添\n        我无坚不摧，也无所不能 \n                      -----木苏里《某某》\n\n        我羡慕流云，虽然飘散弹指\n        却能抚过山巅草木\n        留了温柔在人间  \n                      \n        一定要好好生活，怀恋的不一定要见面  \n        喜欢的不一定要在一起\n        每一种距离和遗憾都有它存在的意义\n\n        我怎么会浪漫呢？浪漫的是晚风  \n        是你眼里的市井气息  \n        是路过的行人，是鲜花\n        是擦肩而过的你和我      ","source":"_posts/2021/07/每一种距离和遗憾都有它存在的意义.md","raw":"---\ntitle: 每一种距离和遗憾都有它存在的意义\ncategories: 每日摘抄\ndate: 2021-07-01 11:17:04\ntags:  \n      - 每日摘抄\n---\n        微风穿过百里林荫  \n        鸟雀跳在树梢  \n        春日最好的太阳照在这里  \n        于是长路落满了光  \n                      -----木苏里《某某》\n\n        人间盛望，故里江添\n        我无坚不摧，也无所不能 \n                      -----木苏里《某某》\n\n        我羡慕流云，虽然飘散弹指\n        却能抚过山巅草木\n        留了温柔在人间  \n                      \n        一定要好好生活，怀恋的不一定要见面  \n        喜欢的不一定要在一起\n        每一种距离和遗憾都有它存在的意义\n\n        我怎么会浪漫呢？浪漫的是晚风  \n        是你眼里的市井气息  \n        是路过的行人，是鲜花\n        是擦肩而过的你和我      ","slug":"每一种距离和遗憾都有它存在的意义","published":1,"updated":"2022-04-04T11:44:33.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb33d000gn4vohtum5754","content":"<pre><code>    微风穿过百里林荫  \n    鸟雀跳在树梢  \n    春日最好的太阳照在这里  \n    于是长路落满了光  \n                  -----木苏里《某某》\n\n    人间盛望，故里江添\n    我无坚不摧，也无所不能 \n                  -----木苏里《某某》\n\n    我羡慕流云，虽然飘散弹指\n    却能抚过山巅草木\n    留了温柔在人间  \n                  \n    一定要好好生活，怀恋的不一定要见面  \n    喜欢的不一定要在一起\n    每一种距离和遗憾都有它存在的意义\n\n    我怎么会浪漫呢？浪漫的是晚风  \n    是你眼里的市井气息  \n    是路过的行人，是鲜花\n    是擦肩而过的你和我      \n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>    微风穿过百里林荫  \n    鸟雀跳在树梢  \n    春日最好的太阳照在这里  \n    于是长路落满了光  \n                  -----木苏里《某某》\n\n    人间盛望，故里江添\n    我无坚不摧，也无所不能 \n                  -----木苏里《某某》\n\n    我羡慕流云，虽然飘散弹指\n    却能抚过山巅草木\n    留了温柔在人间  \n                  \n    一定要好好生活，怀恋的不一定要见面  \n    喜欢的不一定要在一起\n    每一种距离和遗憾都有它存在的意义\n\n    我怎么会浪漫呢？浪漫的是晚风  \n    是你眼里的市井气息  \n    是路过的行人，是鲜花\n    是擦肩而过的你和我      \n</code></pre>\n"},{"title":"生于海归于海","date":"2021-07-08T13:10:16.000Z","_content":"    鲸音怒吼三千界，蝶梦惊回百八声。  \n    愿有来生，化作鲸鱼，孤独一生，不碰爱情。  \n    鲸起鲸落，终是葬下三千界。  \n    鲸起万物灭，鲸落万物生！  \n    那一跃，最后一次，看向蓝天  \n    随即，转身投入最爱的碧海  \n    冰波的童话里说，鲸的眼睛是最纯洁的  \n    鲸一辈子都是为了用海水洗净眼睛  \n    他们很善良只以海面上浮着的星星为食  \n    死后化作小岛守护他爱的人  \n    鲸鱼死时有个浪漫词叫鲸落  \n    鲨鱼死时也有个浪漫的词叫鲨凋  \n    所以鲸落万物生，鲨凋万物笑  \n    “鲸生万物死，鲸死万物生，海蓝时见鲸  \n    林深时见鹿，梦醒时不见你，愿世界黑暗沉沦  \n    你我皆为浑浊  \n    鲸鱼怒吼三千界，蝶梦惊回百八声  \n    愿有来生，化作鲸鱼，孤独一生，不碰爱情”   \n\n    生于海 归于海 长于海  隐于海   \n    一鲸落万物生 愿化为孤岛的鲸  \n    独自孤独，用尽全力落下尾鳍想给海最后一个拥抱  \n    腐烂成泥 也要成就一场惊喜裸露骨架  \n    撑起一座城堡 一念山河成 一念白草生  \n    人说: 林深时见鹿，海蓝时见鲸，梦醒时见你  \n    可实际: 林深时雾起，海蓝时浪涌，梦醒时夜续  \n    不见鹿，不见鲸，也不见你  \n    但终究: 鹿踏雾而来，鲸随浪而涌  \n    你没回头又怎知我不在  \n    可我看来: 鹿见人而惊 消失于林深  \n    鲸踏浪而上 搁浅于浅滩，亦如我见你，如碌如惊  \n    终究， 鹿惧人前，潮退鲸落  \n","source":"_posts/2021/07/生于海归于海.md","raw":"---\ntitle: 生于海归于海\ncategories: 每日摘抄\ndate: 2021-07-08 21:10:16\ntags:  \n      - 每日摘抄\n---\n    鲸音怒吼三千界，蝶梦惊回百八声。  \n    愿有来生，化作鲸鱼，孤独一生，不碰爱情。  \n    鲸起鲸落，终是葬下三千界。  \n    鲸起万物灭，鲸落万物生！  \n    那一跃，最后一次，看向蓝天  \n    随即，转身投入最爱的碧海  \n    冰波的童话里说，鲸的眼睛是最纯洁的  \n    鲸一辈子都是为了用海水洗净眼睛  \n    他们很善良只以海面上浮着的星星为食  \n    死后化作小岛守护他爱的人  \n    鲸鱼死时有个浪漫词叫鲸落  \n    鲨鱼死时也有个浪漫的词叫鲨凋  \n    所以鲸落万物生，鲨凋万物笑  \n    “鲸生万物死，鲸死万物生，海蓝时见鲸  \n    林深时见鹿，梦醒时不见你，愿世界黑暗沉沦  \n    你我皆为浑浊  \n    鲸鱼怒吼三千界，蝶梦惊回百八声  \n    愿有来生，化作鲸鱼，孤独一生，不碰爱情”   \n\n    生于海 归于海 长于海  隐于海   \n    一鲸落万物生 愿化为孤岛的鲸  \n    独自孤独，用尽全力落下尾鳍想给海最后一个拥抱  \n    腐烂成泥 也要成就一场惊喜裸露骨架  \n    撑起一座城堡 一念山河成 一念白草生  \n    人说: 林深时见鹿，海蓝时见鲸，梦醒时见你  \n    可实际: 林深时雾起，海蓝时浪涌，梦醒时夜续  \n    不见鹿，不见鲸，也不见你  \n    但终究: 鹿踏雾而来，鲸随浪而涌  \n    你没回头又怎知我不在  \n    可我看来: 鹿见人而惊 消失于林深  \n    鲸踏浪而上 搁浅于浅滩，亦如我见你，如碌如惊  \n    终究， 鹿惧人前，潮退鲸落  \n","slug":"生于海归于海","published":1,"updated":"2022-04-04T12:12:09.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb33f000ln4vofelu8uxi","content":"<pre><code>鲸音怒吼三千界，蝶梦惊回百八声。  \n愿有来生，化作鲸鱼，孤独一生，不碰爱情。  \n鲸起鲸落，终是葬下三千界。  \n鲸起万物灭，鲸落万物生！  \n那一跃，最后一次，看向蓝天  \n随即，转身投入最爱的碧海  \n冰波的童话里说，鲸的眼睛是最纯洁的  \n鲸一辈子都是为了用海水洗净眼睛  \n他们很善良只以海面上浮着的星星为食  \n死后化作小岛守护他爱的人  \n鲸鱼死时有个浪漫词叫鲸落  \n鲨鱼死时也有个浪漫的词叫鲨凋  \n所以鲸落万物生，鲨凋万物笑  \n“鲸生万物死，鲸死万物生，海蓝时见鲸  \n林深时见鹿，梦醒时不见你，愿世界黑暗沉沦  \n你我皆为浑浊  \n鲸鱼怒吼三千界，蝶梦惊回百八声  \n愿有来生，化作鲸鱼，孤独一生，不碰爱情”   \n\n生于海 归于海 长于海  隐于海   \n一鲸落万物生 愿化为孤岛的鲸  \n独自孤独，用尽全力落下尾鳍想给海最后一个拥抱  \n腐烂成泥 也要成就一场惊喜裸露骨架  \n撑起一座城堡 一念山河成 一念白草生  \n人说: 林深时见鹿，海蓝时见鲸，梦醒时见你  \n可实际: 林深时雾起，海蓝时浪涌，梦醒时夜续  \n不见鹿，不见鲸，也不见你  \n但终究: 鹿踏雾而来，鲸随浪而涌  \n你没回头又怎知我不在  \n可我看来: 鹿见人而惊 消失于林深  \n鲸踏浪而上 搁浅于浅滩，亦如我见你，如碌如惊  \n终究， 鹿惧人前，潮退鲸落  \n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>鲸音怒吼三千界，蝶梦惊回百八声。  \n愿有来生，化作鲸鱼，孤独一生，不碰爱情。  \n鲸起鲸落，终是葬下三千界。  \n鲸起万物灭，鲸落万物生！  \n那一跃，最后一次，看向蓝天  \n随即，转身投入最爱的碧海  \n冰波的童话里说，鲸的眼睛是最纯洁的  \n鲸一辈子都是为了用海水洗净眼睛  \n他们很善良只以海面上浮着的星星为食  \n死后化作小岛守护他爱的人  \n鲸鱼死时有个浪漫词叫鲸落  \n鲨鱼死时也有个浪漫的词叫鲨凋  \n所以鲸落万物生，鲨凋万物笑  \n“鲸生万物死，鲸死万物生，海蓝时见鲸  \n林深时见鹿，梦醒时不见你，愿世界黑暗沉沦  \n你我皆为浑浊  \n鲸鱼怒吼三千界，蝶梦惊回百八声  \n愿有来生，化作鲸鱼，孤独一生，不碰爱情”   \n\n生于海 归于海 长于海  隐于海   \n一鲸落万物生 愿化为孤岛的鲸  \n独自孤独，用尽全力落下尾鳍想给海最后一个拥抱  \n腐烂成泥 也要成就一场惊喜裸露骨架  \n撑起一座城堡 一念山河成 一念白草生  \n人说: 林深时见鹿，海蓝时见鲸，梦醒时见你  \n可实际: 林深时雾起，海蓝时浪涌，梦醒时夜续  \n不见鹿，不见鲸，也不见你  \n但终究: 鹿踏雾而来，鲸随浪而涌  \n你没回头又怎知我不在  \n可我看来: 鹿见人而惊 消失于林深  \n鲸踏浪而上 搁浅于浅滩，亦如我见你，如碌如惊  \n终究， 鹿惧人前，潮退鲸落  \n</code></pre>\n"},{"title":"ES6 let和const命令","date":"2021-05-16T07:05:04.000Z","_content":"## let命令\n1.变量不能重复声明\n``` bash\nlet star='罗志祥';\nlet star='小猪'  //error\n```\n2.let有块级作用域，全局，函数，eval\n``` bash\n{\n    let girl='周扬青'\n}\nconsole.log(girl) //error\n```\n不仅仅针对花括号，例如if（）里面\n\n3.不存在变量提前\n``` bash\nconsole.log(song)   //error\nlet song='时间管理大师'\n```\n4.不影响作用域链\n``` bash\nlet school='abc'\nfunction fn(){\n    console.log(school) //abc\n}\n```\n案例\n``` bash\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <div>\n        <div class=\"item\" style=\"width: 50px;height: 50px;background-color: red\"></div>\n        <div class=\"item\" style=\"width: 50px;height: 50px;background-color: red\"></div>\n        <div class=\"item\" style=\"width: 50px;height: 50px;background-color: red\"></div>\n    </div>\n    <script>\n        let items=document.getElementsByClassName(\"item\");\n        for (var i=0;i<items.length;i++){\n            items[i].onclick=function (){\n                items[i].style.backgroundColor='pink';\n            }\n        }\n        console.log(windows.i)  //3 \n        // 当var=3的时候，点击事件开始向外层作用域找，找不到，就是windows.i，此时是3，如果是let i，具有块级作用域，所以每一次触碰事件的i都是不同的。\n\n        //相当于这样\n        {\n            let i = 0;\n                        items[i].onclick=function (){\n                items[i].style.backgroundColor='pink';\n            }\n        }\n                {\n            let i = 1;\n                        items[i].onclick=function (){\n                items[i].style.backgroundColor='pink';\n            }\n        }\n                {\n            let i = 2;\n                        items[i].onclick=function (){\n                items[i].style.backgroundColor='pink';\n            }\n        }\n    </script>\n</body>\n</html>\n\n```\n\n## const命令\n声明常量\n``` bash\nconst AA = 'xiaohao'\n```\n1.一定要赋初始值\n2.一般常量使用大写（潜规则）\n3.常量的值不能修改\n4.也具有块级作用域\n``` bash\n{\n    const pyaler = 'uzi'\n}\nconsole.log(player) //error\n```\n5.对于数组和对象的元素修改，不算作对常量的修改\n``` bash\nconst team = ['uzi','MXLG','Ming','Letme'];\nteam.push('Meiko'); //不报错，常量地址没有发生变化,值发生改变就会报错\n\n```","source":"_posts/2021/05/ES6-let和const命令.md","raw":"---\ntitle: ES6 let和const命令\ncategories: ES6\ndate: 2021-05-16 15:05:04\ntags: \n      - ES6 \n      - let和const命令\n---\n## let命令\n1.变量不能重复声明\n``` bash\nlet star='罗志祥';\nlet star='小猪'  //error\n```\n2.let有块级作用域，全局，函数，eval\n``` bash\n{\n    let girl='周扬青'\n}\nconsole.log(girl) //error\n```\n不仅仅针对花括号，例如if（）里面\n\n3.不存在变量提前\n``` bash\nconsole.log(song)   //error\nlet song='时间管理大师'\n```\n4.不影响作用域链\n``` bash\nlet school='abc'\nfunction fn(){\n    console.log(school) //abc\n}\n```\n案例\n``` bash\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <div>\n        <div class=\"item\" style=\"width: 50px;height: 50px;background-color: red\"></div>\n        <div class=\"item\" style=\"width: 50px;height: 50px;background-color: red\"></div>\n        <div class=\"item\" style=\"width: 50px;height: 50px;background-color: red\"></div>\n    </div>\n    <script>\n        let items=document.getElementsByClassName(\"item\");\n        for (var i=0;i<items.length;i++){\n            items[i].onclick=function (){\n                items[i].style.backgroundColor='pink';\n            }\n        }\n        console.log(windows.i)  //3 \n        // 当var=3的时候，点击事件开始向外层作用域找，找不到，就是windows.i，此时是3，如果是let i，具有块级作用域，所以每一次触碰事件的i都是不同的。\n\n        //相当于这样\n        {\n            let i = 0;\n                        items[i].onclick=function (){\n                items[i].style.backgroundColor='pink';\n            }\n        }\n                {\n            let i = 1;\n                        items[i].onclick=function (){\n                items[i].style.backgroundColor='pink';\n            }\n        }\n                {\n            let i = 2;\n                        items[i].onclick=function (){\n                items[i].style.backgroundColor='pink';\n            }\n        }\n    </script>\n</body>\n</html>\n\n```\n\n## const命令\n声明常量\n``` bash\nconst AA = 'xiaohao'\n```\n1.一定要赋初始值\n2.一般常量使用大写（潜规则）\n3.常量的值不能修改\n4.也具有块级作用域\n``` bash\n{\n    const pyaler = 'uzi'\n}\nconsole.log(player) //error\n```\n5.对于数组和对象的元素修改，不算作对常量的修改\n``` bash\nconst team = ['uzi','MXLG','Ming','Letme'];\nteam.push('Meiko'); //不报错，常量地址没有发生变化,值发生改变就会报错\n\n```","slug":"ES6-let和const命令","published":1,"updated":"2022-04-04T11:44:33.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb33h000on4voa9b52frc","content":"<h2 id=\"let命令\"><a href=\"#let命令\" class=\"headerlink\" title=\"let命令\"></a>let命令</h2><p>1.变量不能重复声明</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> star=<span class=\"string\">&#x27;罗志祥&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">let</span> star=<span class=\"string\">&#x27;小猪&#x27;</span>  //error</span><br></pre></td></tr></table></figure>\n<p>2.let有块级作用域，全局，函数，eval</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> girl=<span class=\"string\">&#x27;周扬青&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(girl) //error</span><br></pre></td></tr></table></figure>\n<p>不仅仅针对花括号，例如if（）里面</p>\n<p>3.不存在变量提前</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(song)   //error</span><br><span class=\"line\"><span class=\"built_in\">let</span> song=<span class=\"string\">&#x27;时间管理大师&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>4.不影响作用域链</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> school=<span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn</span></span>()&#123;</span><br><span class=\"line\">    console.log(school) //abc</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>案例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"built_in\">head</span>&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;div class=<span class=\"string\">&quot;item&quot;</span> style=<span class=\"string\">&quot;width: 50px;height: 50px;background-color: red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=<span class=\"string\">&quot;item&quot;</span> style=<span class=\"string\">&quot;width: 50px;height: 50px;background-color: red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=<span class=\"string\">&quot;item&quot;</span> style=<span class=\"string\">&quot;width: 50px;height: 50px;background-color: red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> items=document.getElementsByClassName(<span class=\"string\">&quot;item&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (var i=0;i&lt;items.length;i++)&#123;</span><br><span class=\"line\">            items[i].onclick=<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\">                items[i].style.backgroundColor=<span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(windows.i)  //3 </span><br><span class=\"line\">        // 当var=3的时候，点击事件开始向外层作用域找，找不到，就是windows.i，此时是3，如果是<span class=\"built_in\">let</span> i，具有块级作用域，所以每一次触碰事件的i都是不同的。</span><br><span class=\"line\"></span><br><span class=\"line\">        //相当于这样</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">let</span> i = 0;</span><br><span class=\"line\">                        items[i].onclick=<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\">                items[i].style.backgroundColor=<span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">            <span class=\"built_in\">let</span> i = 1;</span><br><span class=\"line\">                        items[i].onclick=<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\">                items[i].style.backgroundColor=<span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">            <span class=\"built_in\">let</span> i = 2;</span><br><span class=\"line\">                        items[i].onclick=<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\">                items[i].style.backgroundColor=<span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"const命令\"><a href=\"#const命令\" class=\"headerlink\" title=\"const命令\"></a>const命令</h2><p>声明常量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const AA = <span class=\"string\">&#x27;xiaohao&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>1.一定要赋初始值<br>2.一般常量使用大写（潜规则）<br>3.常量的值不能修改<br>4.也具有块级作用域</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    const pyaler = <span class=\"string\">&#x27;uzi&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(player) //error</span><br></pre></td></tr></table></figure>\n<p>5.对于数组和对象的元素修改，不算作对常量的修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const team = [<span class=\"string\">&#x27;uzi&#x27;</span>,<span class=\"string\">&#x27;MXLG&#x27;</span>,<span class=\"string\">&#x27;Ming&#x27;</span>,<span class=\"string\">&#x27;Letme&#x27;</span>];</span><br><span class=\"line\">team.push(<span class=\"string\">&#x27;Meiko&#x27;</span>); //不报错，常量地址没有发生变化,值发生改变就会报错</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"let命令\"><a href=\"#let命令\" class=\"headerlink\" title=\"let命令\"></a>let命令</h2><p>1.变量不能重复声明</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> star=<span class=\"string\">&#x27;罗志祥&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">let</span> star=<span class=\"string\">&#x27;小猪&#x27;</span>  //error</span><br></pre></td></tr></table></figure>\n<p>2.let有块级作用域，全局，函数，eval</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> girl=<span class=\"string\">&#x27;周扬青&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(girl) //error</span><br></pre></td></tr></table></figure>\n<p>不仅仅针对花括号，例如if（）里面</p>\n<p>3.不存在变量提前</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(song)   //error</span><br><span class=\"line\"><span class=\"built_in\">let</span> song=<span class=\"string\">&#x27;时间管理大师&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>4.不影响作用域链</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> school=<span class=\"string\">&#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn</span></span>()&#123;</span><br><span class=\"line\">    console.log(school) //abc</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>案例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"built_in\">head</span>&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;div class=<span class=\"string\">&quot;item&quot;</span> style=<span class=\"string\">&quot;width: 50px;height: 50px;background-color: red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=<span class=\"string\">&quot;item&quot;</span> style=<span class=\"string\">&quot;width: 50px;height: 50px;background-color: red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=<span class=\"string\">&quot;item&quot;</span> style=<span class=\"string\">&quot;width: 50px;height: 50px;background-color: red&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> items=document.getElementsByClassName(<span class=\"string\">&quot;item&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (var i=0;i&lt;items.length;i++)&#123;</span><br><span class=\"line\">            items[i].onclick=<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\">                items[i].style.backgroundColor=<span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(windows.i)  //3 </span><br><span class=\"line\">        // 当var=3的时候，点击事件开始向外层作用域找，找不到，就是windows.i，此时是3，如果是<span class=\"built_in\">let</span> i，具有块级作用域，所以每一次触碰事件的i都是不同的。</span><br><span class=\"line\"></span><br><span class=\"line\">        //相当于这样</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">let</span> i = 0;</span><br><span class=\"line\">                        items[i].onclick=<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\">                items[i].style.backgroundColor=<span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">            <span class=\"built_in\">let</span> i = 1;</span><br><span class=\"line\">                        items[i].onclick=<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\">                items[i].style.backgroundColor=<span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">            <span class=\"built_in\">let</span> i = 2;</span><br><span class=\"line\">                        items[i].onclick=<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;</span><br><span class=\"line\">                items[i].style.backgroundColor=<span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"const命令\"><a href=\"#const命令\" class=\"headerlink\" title=\"const命令\"></a>const命令</h2><p>声明常量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const AA = <span class=\"string\">&#x27;xiaohao&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>1.一定要赋初始值<br>2.一般常量使用大写（潜规则）<br>3.常量的值不能修改<br>4.也具有块级作用域</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    const pyaler = <span class=\"string\">&#x27;uzi&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(player) //error</span><br></pre></td></tr></table></figure>\n<p>5.对于数组和对象的元素修改，不算作对常量的修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const team = [<span class=\"string\">&#x27;uzi&#x27;</span>,<span class=\"string\">&#x27;MXLG&#x27;</span>,<span class=\"string\">&#x27;Ming&#x27;</span>,<span class=\"string\">&#x27;Letme&#x27;</span>];</span><br><span class=\"line\">team.push(<span class=\"string\">&#x27;Meiko&#x27;</span>); //不报错，常量地址没有发生变化,值发生改变就会报错</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"约着见一面吧","date":"2021-07-02T03:17:04.000Z","_content":"        约着见一面吧  \n        就能使见面的前后几天  \n        都沾着光  \n        变成好日子     \n                      -----钱钟书\n\n        后来  \n        南山的风吹散了谷堆  \n        北海的水淹没了墓碑  \n\n        很久很久才知道  \n        原来和有些人最好的结局  \n        就是互相了无音讯  \n                      \n        我在十字路口听了很久  \n        红绿灯也不知道换了多少次  \n        最后我还是决定了  \n        这次绿灯一亮，我就走\n\n        这月的风很大  \n        吹散了很多人  \n        留下了很多遗憾  \n        藏住了好多人的意难平  \n        以后就是猴年马月了       \n","source":"_posts/2021/07/约着见一面吧.md","raw":"---\ntitle: 约着见一面吧\ncategories: 每日摘抄\ndate: 2021-07-02 11:17:04\ntags:  \n      - 每日摘抄\n---\n        约着见一面吧  \n        就能使见面的前后几天  \n        都沾着光  \n        变成好日子     \n                      -----钱钟书\n\n        后来  \n        南山的风吹散了谷堆  \n        北海的水淹没了墓碑  \n\n        很久很久才知道  \n        原来和有些人最好的结局  \n        就是互相了无音讯  \n                      \n        我在十字路口听了很久  \n        红绿灯也不知道换了多少次  \n        最后我还是决定了  \n        这次绿灯一亮，我就走\n\n        这月的风很大  \n        吹散了很多人  \n        留下了很多遗憾  \n        藏住了好多人的意难平  \n        以后就是猴年马月了       \n","slug":"约着见一面吧","published":1,"updated":"2022-04-04T11:44:33.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb33k000rn4voczrq6q2v","content":"<pre><code>    约着见一面吧  \n    就能使见面的前后几天  \n    都沾着光  \n    变成好日子     \n                  -----钱钟书\n\n    后来  \n    南山的风吹散了谷堆  \n    北海的水淹没了墓碑  \n\n    很久很久才知道  \n    原来和有些人最好的结局  \n    就是互相了无音讯  \n                  \n    我在十字路口听了很久  \n    红绿灯也不知道换了多少次  \n    最后我还是决定了  \n    这次绿灯一亮，我就走\n\n    这月的风很大  \n    吹散了很多人  \n    留下了很多遗憾  \n    藏住了好多人的意难平  \n    以后就是猴年马月了       \n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>    约着见一面吧  \n    就能使见面的前后几天  \n    都沾着光  \n    变成好日子     \n                  -----钱钟书\n\n    后来  \n    南山的风吹散了谷堆  \n    北海的水淹没了墓碑  \n\n    很久很久才知道  \n    原来和有些人最好的结局  \n    就是互相了无音讯  \n                  \n    我在十字路口听了很久  \n    红绿灯也不知道换了多少次  \n    最后我还是决定了  \n    这次绿灯一亮，我就走\n\n    这月的风很大  \n    吹散了很多人  \n    留下了很多遗憾  \n    藏住了好多人的意难平  \n    以后就是猴年马月了       \n</code></pre>\n"},{"title":"缘","date":"2021-07-09T12:08:16.000Z","_content":"    终是项羽斩了缘，你是依偎也是缘  \n    终是红颜白了发，你是长恨也是欢  \n    终是韩信放了枪，你是宿命也是伤  \n    终是大乔沉了海，你是梦境也是水  \n    终是木兰弃了剑，你是相思也是恋  \n    终是悟空闹了天，你是自由也是难  \n    终是关羽失荆州，你是仁义也是忠  \n    终是孟婆流了泪，才知悲伤也是情  \n    终是帝王忘了伤，才知难过也是痛  \n    终是白浅忘了情，你是墨渊也不行  \n    终是李白醉了酒，你是孤独也是愁  \n    若无李白这一醉，亦无孤独亦无愁  \n    终是凤九断了尾，帝君也没落下泪  \n    终是荆轲刺了秦，一代帝王一代臣  \n    终是婆娑断了弦，心中痛处谁能懂  \n    终是妲己祸了国，万里江山岁蹉跎  \n\n    很喜欢一句歌词  \n    “教堂的白鸽不能亲吻乌鸦，就像我配不上星空下的他”  \n    也许我在你心里不起眼  \n    你也想不到你会是惊艳我整个青春的人吧  \n","source":"_posts/2021/07/缘.md","raw":"---\ntitle: 缘\ncategories: 每日摘抄\ndate: 2021-07-09 20:08:16\ntags:  \n      - 每日摘抄\n---\n    终是项羽斩了缘，你是依偎也是缘  \n    终是红颜白了发，你是长恨也是欢  \n    终是韩信放了枪，你是宿命也是伤  \n    终是大乔沉了海，你是梦境也是水  \n    终是木兰弃了剑，你是相思也是恋  \n    终是悟空闹了天，你是自由也是难  \n    终是关羽失荆州，你是仁义也是忠  \n    终是孟婆流了泪，才知悲伤也是情  \n    终是帝王忘了伤，才知难过也是痛  \n    终是白浅忘了情，你是墨渊也不行  \n    终是李白醉了酒，你是孤独也是愁  \n    若无李白这一醉，亦无孤独亦无愁  \n    终是凤九断了尾，帝君也没落下泪  \n    终是荆轲刺了秦，一代帝王一代臣  \n    终是婆娑断了弦，心中痛处谁能懂  \n    终是妲己祸了国，万里江山岁蹉跎  \n\n    很喜欢一句歌词  \n    “教堂的白鸽不能亲吻乌鸦，就像我配不上星空下的他”  \n    也许我在你心里不起眼  \n    你也想不到你会是惊艳我整个青春的人吧  \n","slug":"缘","published":1,"updated":"2022-04-04T12:15:26.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb33l000wn4vo4awb3arj","content":"<pre><code>终是项羽斩了缘，你是依偎也是缘  \n终是红颜白了发，你是长恨也是欢  \n终是韩信放了枪，你是宿命也是伤  \n终是大乔沉了海，你是梦境也是水  \n终是木兰弃了剑，你是相思也是恋  \n终是悟空闹了天，你是自由也是难  \n终是关羽失荆州，你是仁义也是忠  \n终是孟婆流了泪，才知悲伤也是情  \n终是帝王忘了伤，才知难过也是痛  \n终是白浅忘了情，你是墨渊也不行  \n终是李白醉了酒，你是孤独也是愁  \n若无李白这一醉，亦无孤独亦无愁  \n终是凤九断了尾，帝君也没落下泪  \n终是荆轲刺了秦，一代帝王一代臣  \n终是婆娑断了弦，心中痛处谁能懂  \n终是妲己祸了国，万里江山岁蹉跎  \n\n很喜欢一句歌词  \n“教堂的白鸽不能亲吻乌鸦，就像我配不上星空下的他”  \n也许我在你心里不起眼  \n你也想不到你会是惊艳我整个青春的人吧  \n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>终是项羽斩了缘，你是依偎也是缘  \n终是红颜白了发，你是长恨也是欢  \n终是韩信放了枪，你是宿命也是伤  \n终是大乔沉了海，你是梦境也是水  \n终是木兰弃了剑，你是相思也是恋  \n终是悟空闹了天，你是自由也是难  \n终是关羽失荆州，你是仁义也是忠  \n终是孟婆流了泪，才知悲伤也是情  \n终是帝王忘了伤，才知难过也是痛  \n终是白浅忘了情，你是墨渊也不行  \n终是李白醉了酒，你是孤独也是愁  \n若无李白这一醉，亦无孤独亦无愁  \n终是凤九断了尾，帝君也没落下泪  \n终是荆轲刺了秦，一代帝王一代臣  \n终是婆娑断了弦，心中痛处谁能懂  \n终是妲己祸了国，万里江山岁蹉跎  \n\n很喜欢一句歌词  \n“教堂的白鸽不能亲吻乌鸦，就像我配不上星空下的他”  \n也许我在你心里不起眼  \n你也想不到你会是惊艳我整个青春的人吧  \n</code></pre>\n"},{"title":"ES6-变量的解构赋值","date":"2021-05-16T14:26:17.000Z","_content":"### 什么是解构categories: ES6\n定义：ES6 允许按照一定模式从数组和对象中提取值，对变量进行赋值，这被称为解构赋值.\n\n### 数组的解构\n``` bash\n        const happy = ['aa','bb','cc','dd'];\n        let [a,b,c,d] = happy;\n        console.log(a); //aa\n        console.log(b); //bb\n        console.log(c); //cc\n        console.log(d); //dd\n```\n\n### 对象的解构\n<!-- more -->\n``` bash\n        const zhao = {\n            name:'赵本山',\n            age:'不详',\n            xiaoping: function(){\n                console.log('我可以演很多的小品');\n            }\n        }\n        let {name,age,xiaoping} = zhao;\n        console.log(xiaoping); //ƒ (){console.log('我可以演很多的小品');}\n        console.log(name); //赵本山\n        console.log(age); //不详\n        xiaoping(); //我可以演很多小品\n```","source":"_posts/2021/05/ES6-变量的解构赋值.md","raw":"---\ntitle: ES6-变量的解构赋值\ncategories: ES6\ndate: 2021-05-16 22:26:17\ntags:  \n     - ES6 \n     - 变量的解构赋值\n---\n### 什么是解构categories: ES6\n定义：ES6 允许按照一定模式从数组和对象中提取值，对变量进行赋值，这被称为解构赋值.\n\n### 数组的解构\n``` bash\n        const happy = ['aa','bb','cc','dd'];\n        let [a,b,c,d] = happy;\n        console.log(a); //aa\n        console.log(b); //bb\n        console.log(c); //cc\n        console.log(d); //dd\n```\n\n### 对象的解构\n<!-- more -->\n``` bash\n        const zhao = {\n            name:'赵本山',\n            age:'不详',\n            xiaoping: function(){\n                console.log('我可以演很多的小品');\n            }\n        }\n        let {name,age,xiaoping} = zhao;\n        console.log(xiaoping); //ƒ (){console.log('我可以演很多的小品');}\n        console.log(name); //赵本山\n        console.log(age); //不详\n        xiaoping(); //我可以演很多小品\n```","slug":"ES6-变量的解构赋值","published":1,"updated":"2022-04-04T11:44:33.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb33n000zn4vohi7eht13","content":"<h3 id=\"什么是解构categories-ES6\"><a href=\"#什么是解构categories-ES6\" class=\"headerlink\" title=\"什么是解构categories: ES6\"></a>什么是解构categories: ES6</h3><p>定义：ES6 允许按照一定模式从数组和对象中提取值，对变量进行赋值，这被称为解构赋值.</p>\n<h3 id=\"数组的解构\"><a href=\"#数组的解构\" class=\"headerlink\" title=\"数组的解构\"></a>数组的解构</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const happy = [<span class=\"string\">&#x27;aa&#x27;</span>,<span class=\"string\">&#x27;bb&#x27;</span>,<span class=\"string\">&#x27;cc&#x27;</span>,<span class=\"string\">&#x27;dd&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">let</span> [a,b,c,d] = happy;</span><br><span class=\"line\">console.log(a); //aa</span><br><span class=\"line\">console.log(b); //bb</span><br><span class=\"line\">console.log(c); //cc</span><br><span class=\"line\">console.log(d); //dd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象的解构\"><a href=\"#对象的解构\" class=\"headerlink\" title=\"对象的解构\"></a>对象的解构</h3><span id=\"more\"></span>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const zhao = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">&#x27;赵本山&#x27;</span>,</span><br><span class=\"line\">    age:<span class=\"string\">&#x27;不详&#x27;</span>,</span><br><span class=\"line\">    xiaoping: <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">&#x27;我可以演很多的小品&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">let</span> &#123;name,age,xiaoping&#125; = zhao;</span><br><span class=\"line\">console.log(xiaoping); //ƒ ()&#123;console.log(<span class=\"string\">&#x27;我可以演很多的小品&#x27;</span>);&#125;</span><br><span class=\"line\">console.log(name); //赵本山</span><br><span class=\"line\">console.log(age); //不详</span><br><span class=\"line\">xiaoping(); //我可以演很多小品</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"什么是解构categories-ES6\"><a href=\"#什么是解构categories-ES6\" class=\"headerlink\" title=\"什么是解构categories: ES6\"></a>什么是解构categories: ES6</h3><p>定义：ES6 允许按照一定模式从数组和对象中提取值，对变量进行赋值，这被称为解构赋值.</p>\n<h3 id=\"数组的解构\"><a href=\"#数组的解构\" class=\"headerlink\" title=\"数组的解构\"></a>数组的解构</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const happy = [<span class=\"string\">&#x27;aa&#x27;</span>,<span class=\"string\">&#x27;bb&#x27;</span>,<span class=\"string\">&#x27;cc&#x27;</span>,<span class=\"string\">&#x27;dd&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">let</span> [a,b,c,d] = happy;</span><br><span class=\"line\">console.log(a); //aa</span><br><span class=\"line\">console.log(b); //bb</span><br><span class=\"line\">console.log(c); //cc</span><br><span class=\"line\">console.log(d); //dd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象的解构\"><a href=\"#对象的解构\" class=\"headerlink\" title=\"对象的解构\"></a>对象的解构</h3>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const zhao = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">&#x27;赵本山&#x27;</span>,</span><br><span class=\"line\">    age:<span class=\"string\">&#x27;不详&#x27;</span>,</span><br><span class=\"line\">    xiaoping: <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">&#x27;我可以演很多的小品&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">let</span> &#123;name,age,xiaoping&#125; = zhao;</span><br><span class=\"line\">console.log(xiaoping); //ƒ ()&#123;console.log(<span class=\"string\">&#x27;我可以演很多的小品&#x27;</span>);&#125;</span><br><span class=\"line\">console.log(name); //赵本山</span><br><span class=\"line\">console.log(age); //不详</span><br><span class=\"line\">xiaoping(); //我可以演很多小品</span><br></pre></td></tr></table></figure>"},{"title":"ES6-对象的简化写法","date":"2021-05-16T14:41:04.000Z","_content":"### ES6允许在大括号里面，直接写入变量和函数，作为对象的属性和方法  \n``` bash\n        let name = 'aaa';\n        let change = function(){\n            console.log('aaa');\n}\n        const school = {\n            name,\n            change,\n            improve(){\n                consolg.log('bbb');\n            }\n                //相当于\n                //improve:function(){\n                // console.log('bbb');\n                // }\n}\nconsole.log(school.improve);\n```","source":"_posts/2021/05/ES6-对象的简化写法.md","raw":"---\ntitle: ES6-对象的简化写法\ncategories: ES6\ndate: 2021-05-16 22:41:04\ntags: \n     - ES6 \n     - 对象的简化写法\n---\n### ES6允许在大括号里面，直接写入变量和函数，作为对象的属性和方法  \n``` bash\n        let name = 'aaa';\n        let change = function(){\n            console.log('aaa');\n}\n        const school = {\n            name,\n            change,\n            improve(){\n                consolg.log('bbb');\n            }\n                //相当于\n                //improve:function(){\n                // console.log('bbb');\n                // }\n}\nconsole.log(school.improve);\n```","slug":"ES6-对象的简化写法","published":1,"updated":"2022-04-04T11:44:33.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb33o0012n4vofoyyc5pv","content":"<h3 id=\"ES6允许在大括号里面，直接写入变量和函数，作为对象的属性和方法\"><a href=\"#ES6允许在大括号里面，直接写入变量和函数，作为对象的属性和方法\" class=\"headerlink\" title=\"ES6允许在大括号里面，直接写入变量和函数，作为对象的属性和方法\"></a>ES6允许在大括号里面，直接写入变量和函数，作为对象的属性和方法</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">        <span class=\"built_in\">let</span> name = <span class=\"string\">&#x27;aaa&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> change = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&#x27;aaa&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">        const school = &#123;</span><br><span class=\"line\">            name,</span><br><span class=\"line\">            change,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">improve</span></span>()&#123;</span><br><span class=\"line\">                consolg.log(<span class=\"string\">&#x27;bbb&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                //相当于</span><br><span class=\"line\">                //improve:<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">                // console.log(<span class=\"string\">&#x27;bbb&#x27;</span>);</span><br><span class=\"line\">                // &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(school.improve);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ES6允许在大括号里面，直接写入变量和函数，作为对象的属性和方法\"><a href=\"#ES6允许在大括号里面，直接写入变量和函数，作为对象的属性和方法\" class=\"headerlink\" title=\"ES6允许在大括号里面，直接写入变量和函数，作为对象的属性和方法\"></a>ES6允许在大括号里面，直接写入变量和函数，作为对象的属性和方法</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">        <span class=\"built_in\">let</span> name = <span class=\"string\">&#x27;aaa&#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> change = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&#x27;aaa&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">        const school = &#123;</span><br><span class=\"line\">            name,</span><br><span class=\"line\">            change,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">improve</span></span>()&#123;</span><br><span class=\"line\">                consolg.log(<span class=\"string\">&#x27;bbb&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                //相当于</span><br><span class=\"line\">                //improve:<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">                // console.log(<span class=\"string\">&#x27;bbb&#x27;</span>);</span><br><span class=\"line\">                // &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(school.improve);</span><br></pre></td></tr></table></figure>"},{"title":"ES6-模板字符串","date":"2021-05-16T14:34:24.000Z","_content":"### 1.声明\n``` bash\n        let str = `这么巧，我也是一个字符串！`;\n        console.log(str,typeof str);\n```\n    \n### 2.内容中可以直接出现换行符\n在使用append时，就知道有多算爽了\n注意：使用的是``,TAB键上面那个符号\n``` bash\n        let ul = `<ul>\n\t\t\t        <li>xiaohao</li>\n\t\t\t        <li>小豪</li>\n                    <li>小豪豪</li>\n                    <li>宝贝</li>\n\t\t          </ul>`\n        console.log(ul);\n```\n\n### 3.拼接字符串\n``` bash\n        let name = '小豪';\n        let out = `${name}是最帅的`;\n        console.log(out);\n```","source":"_posts/2021/05/ES6-模板字符串.md","raw":"---\ntitle: ES6-模板字符串\ncategories: ES6\ndate: 2021-05-16 22:34:24\ntags: \n     - ES6 \n     - 模板字符串\n---\n### 1.声明\n``` bash\n        let str = `这么巧，我也是一个字符串！`;\n        console.log(str,typeof str);\n```\n    \n### 2.内容中可以直接出现换行符\n在使用append时，就知道有多算爽了\n注意：使用的是``,TAB键上面那个符号\n``` bash\n        let ul = `<ul>\n\t\t\t        <li>xiaohao</li>\n\t\t\t        <li>小豪</li>\n                    <li>小豪豪</li>\n                    <li>宝贝</li>\n\t\t          </ul>`\n        console.log(ul);\n```\n\n### 3.拼接字符串\n``` bash\n        let name = '小豪';\n        let out = `${name}是最帅的`;\n        console.log(out);\n```","slug":"ES6-模板字符串","published":1,"updated":"2022-04-04T11:44:33.785Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb33q0016n4vo8pufbx6a","content":"<h3 id=\"1-声明\"><a href=\"#1-声明\" class=\"headerlink\" title=\"1.声明\"></a>1.声明</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> str = `这么巧，我也是一个字符串！`;</span><br><span class=\"line\">console.log(str,typeof str);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-内容中可以直接出现换行符\"><a href=\"#2-内容中可以直接出现换行符\" class=\"headerlink\" title=\"2.内容中可以直接出现换行符\"></a>2.内容中可以直接出现换行符</h3><p>在使用append时，就知道有多算爽了<br>注意：使用的是``,TAB键上面那个符号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> ul = `&lt;ul&gt;</span><br><span class=\"line\">   &lt;li&gt;xiaohao&lt;/li&gt;</span><br><span class=\"line\">   &lt;li&gt;小豪&lt;/li&gt;</span><br><span class=\"line\">            &lt;li&gt;小豪豪&lt;/li&gt;</span><br><span class=\"line\">            &lt;li&gt;宝贝&lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;`</span><br><span class=\"line\">console.log(ul);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-拼接字符串\"><a href=\"#3-拼接字符串\" class=\"headerlink\" title=\"3.拼接字符串\"></a>3.拼接字符串</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> name = <span class=\"string\">&#x27;小豪&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">let</span> out = `<span class=\"variable\">$&#123;name&#125;</span>是最帅的`;</span><br><span class=\"line\">console.log(out);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-声明\"><a href=\"#1-声明\" class=\"headerlink\" title=\"1.声明\"></a>1.声明</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> str = `这么巧，我也是一个字符串！`;</span><br><span class=\"line\">console.log(str,typeof str);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-内容中可以直接出现换行符\"><a href=\"#2-内容中可以直接出现换行符\" class=\"headerlink\" title=\"2.内容中可以直接出现换行符\"></a>2.内容中可以直接出现换行符</h3><p>在使用append时，就知道有多算爽了<br>注意：使用的是``,TAB键上面那个符号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> ul = `&lt;ul&gt;</span><br><span class=\"line\">   &lt;li&gt;xiaohao&lt;/li&gt;</span><br><span class=\"line\">   &lt;li&gt;小豪&lt;/li&gt;</span><br><span class=\"line\">            &lt;li&gt;小豪豪&lt;/li&gt;</span><br><span class=\"line\">            &lt;li&gt;宝贝&lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;`</span><br><span class=\"line\">console.log(ul);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-拼接字符串\"><a href=\"#3-拼接字符串\" class=\"headerlink\" title=\"3.拼接字符串\"></a>3.拼接字符串</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> name = <span class=\"string\">&#x27;小豪&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">let</span> out = `<span class=\"variable\">$&#123;name&#125;</span>是最帅的`;</span><br><span class=\"line\">console.log(out);</span><br></pre></td></tr></table></figure>"},{"title":"ES6-箭头函数","date":"2021-05-16T14:50:11.000Z","_content":"### 什么是箭头函数\nES6允许使用箭头（=>）定义函数,俗称箭头函数  \n``` bash\n       //普通写法\n       let fn = function(){\n           return a + b;\n       }\n       //箭头函数写法\n        let fn = (a,b) => {\n            return a + b;\n        }\n        let result = fn(1,2);\n        console.log(result);\n```\n### 1.this是静态的，this始终指向函数声明所在作用域下的this的值\n``` bash\n        function getName() {\n            console.log(this.name);\n          }\n          let getName2 = () =>{\n              console.log(this.name);\n          }\n          //设置window对象的name属性\n          window.name = 'xiaohao';\n          const shcool = {\n              name:'小豪'\n          }\n          //直接调用\n          getName();//xiaohao\n          getName2();//xiaohao\n\n          //call方法调用\n          getName.call(shcool);//小豪\n          getName2.call(shcool);//xiaohao\n```\n### 2.不能作为构造函数\n``` bash\n           let Person = (name,age) => {\n               this.name = name;\n               this.age = age;\n            }\n           let me = new Person('xiaohao',30);\n           console.log(me);//报错\n```\n\n### 3.不能使用arguments变量\n``` bash\n           let fn = () => {console.log(arguments);}\n           fn(1,2,3);\n```\n\n### 4.箭头函数的简写\n1)省略小括号，当形参有且只有一个的时候\n``` bash\n          let add = n => { //let add = (n) => {}\n              return n + n;\n          }\n          console.log(add(9));//18\n```\n2)省略花括号，当代码体只有一条语句的时候，此时return必须省略\n``` bash\n          let pow = n => n * n;//let pow = (n) => {return n * n;}\n          console.log(pow(9));//81\n```\n\n## 箭头函数实践\n1)点击div，两秒后背景颜色变为粉色\n``` bash\n    <style>\n        #ad{\n            width: 100px;\n            height: 100px;\n            background: blue;\n        }\n    </style>\n\n    <div id=\"ad\"></div>\n\n     let ad = document.getElementById('ad');\n          ad.addEventListener(\"click\",function () {\n              //以前的做法\n                //保存this的值\n               let _this = this;\n               setTimeout(function () {\n                   console.log(_this);\n                   _this.style.background = 'pink';\n                 },2000);\n\n            //使用箭头函数\n            //箭头函数指向声明时所在作用域下,this是事件源ad\n                setTimeout(()  => {\n                  console.log(this);\n                  this.style.background = 'pink';\n                },2000);\n            });\n```\n\n2)筛选数组中属于偶数的数\n``` bash\n const arr = [1,6,4,23,26,47];\n                //以前的做法\n            const result = arr.filter(function (item) {\n                if(item % 2 === 0){\n                    return true;\n                    // console.log(result);\n                }else{\n                    return false;\n                }\n              });\n\n              //使用箭头函数\n              const result = arr.filter(item => item % 2 === 0);\n              console.log(result);\n```\n\n·箭头函数适合于this无关的回调：定时器，数组的方法回调\n·箭头函数不适合与this有关的问题：事件回调，对象的方法\n如：\n``` bash\n             let aq = {\n                  name :'nihao',\n                  getName: ()=>{\n                      this.name;//此时的this指向外层作用域\n                      console.log(this.name);\n                  }\n              }\n            aq.getName()\n```","source":"_posts/2021/05/ES6-箭头函数.md","raw":"---\ntitle: ES6-箭头函数\ncategories: ES6\ndate: 2021-05-16 22:50:11\ntags: \n     - ES6 \n     - 箭头函数\n---\n### 什么是箭头函数\nES6允许使用箭头（=>）定义函数,俗称箭头函数  \n``` bash\n       //普通写法\n       let fn = function(){\n           return a + b;\n       }\n       //箭头函数写法\n        let fn = (a,b) => {\n            return a + b;\n        }\n        let result = fn(1,2);\n        console.log(result);\n```\n### 1.this是静态的，this始终指向函数声明所在作用域下的this的值\n``` bash\n        function getName() {\n            console.log(this.name);\n          }\n          let getName2 = () =>{\n              console.log(this.name);\n          }\n          //设置window对象的name属性\n          window.name = 'xiaohao';\n          const shcool = {\n              name:'小豪'\n          }\n          //直接调用\n          getName();//xiaohao\n          getName2();//xiaohao\n\n          //call方法调用\n          getName.call(shcool);//小豪\n          getName2.call(shcool);//xiaohao\n```\n### 2.不能作为构造函数\n``` bash\n           let Person = (name,age) => {\n               this.name = name;\n               this.age = age;\n            }\n           let me = new Person('xiaohao',30);\n           console.log(me);//报错\n```\n\n### 3.不能使用arguments变量\n``` bash\n           let fn = () => {console.log(arguments);}\n           fn(1,2,3);\n```\n\n### 4.箭头函数的简写\n1)省略小括号，当形参有且只有一个的时候\n``` bash\n          let add = n => { //let add = (n) => {}\n              return n + n;\n          }\n          console.log(add(9));//18\n```\n2)省略花括号，当代码体只有一条语句的时候，此时return必须省略\n``` bash\n          let pow = n => n * n;//let pow = (n) => {return n * n;}\n          console.log(pow(9));//81\n```\n\n## 箭头函数实践\n1)点击div，两秒后背景颜色变为粉色\n``` bash\n    <style>\n        #ad{\n            width: 100px;\n            height: 100px;\n            background: blue;\n        }\n    </style>\n\n    <div id=\"ad\"></div>\n\n     let ad = document.getElementById('ad');\n          ad.addEventListener(\"click\",function () {\n              //以前的做法\n                //保存this的值\n               let _this = this;\n               setTimeout(function () {\n                   console.log(_this);\n                   _this.style.background = 'pink';\n                 },2000);\n\n            //使用箭头函数\n            //箭头函数指向声明时所在作用域下,this是事件源ad\n                setTimeout(()  => {\n                  console.log(this);\n                  this.style.background = 'pink';\n                },2000);\n            });\n```\n\n2)筛选数组中属于偶数的数\n``` bash\n const arr = [1,6,4,23,26,47];\n                //以前的做法\n            const result = arr.filter(function (item) {\n                if(item % 2 === 0){\n                    return true;\n                    // console.log(result);\n                }else{\n                    return false;\n                }\n              });\n\n              //使用箭头函数\n              const result = arr.filter(item => item % 2 === 0);\n              console.log(result);\n```\n\n·箭头函数适合于this无关的回调：定时器，数组的方法回调\n·箭头函数不适合与this有关的问题：事件回调，对象的方法\n如：\n``` bash\n             let aq = {\n                  name :'nihao',\n                  getName: ()=>{\n                      this.name;//此时的this指向外层作用域\n                      console.log(this.name);\n                  }\n              }\n            aq.getName()\n```","slug":"ES6-箭头函数","published":1,"updated":"2022-04-04T11:44:33.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb33r0019n4vo98juc2l8","content":"<h3 id=\"什么是箭头函数\"><a href=\"#什么是箭头函数\" class=\"headerlink\" title=\"什么是箭头函数\"></a>什么是箭头函数</h3><p>ES6允许使用箭头（=&gt;）定义函数,俗称箭头函数  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//普通写法</span><br><span class=\"line\"><span class=\"built_in\">let</span> fn = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//箭头函数写法</span><br><span class=\"line\"> <span class=\"built_in\">let</span> fn = (a,b) =&gt; &#123;</span><br><span class=\"line\">     <span class=\"built_in\">return</span> a + b;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"built_in\">let</span> result = fn(1,2);</span><br><span class=\"line\"> console.log(result);</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-this是静态的，this始终指向函数声明所在作用域下的this的值\"><a href=\"#1-this是静态的，this始终指向函数声明所在作用域下的this的值\" class=\"headerlink\" title=\"1.this是静态的，this始终指向函数声明所在作用域下的this的值\"></a>1.this是静态的，this始终指向函数声明所在作用域下的this的值</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">getName</span></span>() &#123;</span><br><span class=\"line\">    console.log(this.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">let</span> getName2 = () =&gt;&#123;</span><br><span class=\"line\">      console.log(this.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //设置window对象的name属性</span><br><span class=\"line\">  window.name = <span class=\"string\">&#x27;xiaohao&#x27;</span>;</span><br><span class=\"line\">  const shcool = &#123;</span><br><span class=\"line\">      name:<span class=\"string\">&#x27;小豪&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //直接调用</span><br><span class=\"line\">  getName();//xiaohao</span><br><span class=\"line\">  getName2();//xiaohao</span><br><span class=\"line\"></span><br><span class=\"line\">  //call方法调用</span><br><span class=\"line\">  getName.call(shcool);//小豪</span><br><span class=\"line\">  getName2.call(shcool);//xiaohao</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-不能作为构造函数\"><a href=\"#2-不能作为构造函数\" class=\"headerlink\" title=\"2.不能作为构造函数\"></a>2.不能作为构造函数</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> Person = (name,age) =&gt; &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"built_in\">let</span> me = new Person(<span class=\"string\">&#x27;xiaohao&#x27;</span>,30);</span><br><span class=\"line\">console.log(me);//报错</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-不能使用arguments变量\"><a href=\"#3-不能使用arguments变量\" class=\"headerlink\" title=\"3.不能使用arguments变量\"></a>3.不能使用arguments变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> fn = () =&gt; &#123;console.log(arguments);&#125;</span><br><span class=\"line\">fn(1,2,3);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-箭头函数的简写\"><a href=\"#4-箭头函数的简写\" class=\"headerlink\" title=\"4.箭头函数的简写\"></a>4.箭头函数的简写</h3><p>1)省略小括号，当形参有且只有一个的时候</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> add = n =&gt; &#123; //let add = (n) =&gt; &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> n + n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(add(9));//18</span><br></pre></td></tr></table></figure>\n<p>2)省略花括号，当代码体只有一条语句的时候，此时return必须省略</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> pow = n =&gt; n * n;//let pow = (n) =&gt; &#123;<span class=\"built_in\">return</span> n * n;&#125;</span><br><span class=\"line\">console.log(pow(9));//81</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"箭头函数实践\"><a href=\"#箭头函数实践\" class=\"headerlink\" title=\"箭头函数实践\"></a>箭头函数实践</h2><p>1)点击div，两秒后背景颜色变为粉色</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    <span class=\"comment\">#ad&#123;</span></span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        height: 100px;</span><br><span class=\"line\">        background: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div <span class=\"built_in\">id</span>=<span class=\"string\">&quot;ad&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">let</span> ad = document.getElementById(<span class=\"string\">&#x27;ad&#x27;</span>);</span><br><span class=\"line\">      ad.addEventListener(<span class=\"string\">&quot;click&quot;</span>,<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">          //以前的做法</span><br><span class=\"line\">            //保存this的值</span><br><span class=\"line\">           <span class=\"built_in\">let</span> _this = this;</span><br><span class=\"line\">           setTimeout(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">               console.log(_this);</span><br><span class=\"line\">               _this.style.background = <span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">             &#125;,2000);</span><br><span class=\"line\"></span><br><span class=\"line\">        //使用箭头函数</span><br><span class=\"line\">        //箭头函数指向声明时所在作用域下,this是事件源ad</span><br><span class=\"line\">            setTimeout(()  =&gt; &#123;</span><br><span class=\"line\">              console.log(this);</span><br><span class=\"line\">              this.style.background = <span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">            &#125;,2000);</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>2)筛选数组中属于偶数的数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const arr = [1,6,4,23,26,47];</span><br><span class=\"line\">               //以前的做法</span><br><span class=\"line\">           const result = arr.filter(<span class=\"keyword\">function</span> (item) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(item % 2 === 0)&#123;</span><br><span class=\"line\">                   <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                   // console.log(result);</span><br><span class=\"line\">               &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                   <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">             //使用箭头函数</span><br><span class=\"line\">             const result = arr.filter(item =&gt; item % 2 === 0);</span><br><span class=\"line\">             console.log(result);</span><br></pre></td></tr></table></figure>\n\n<p>·箭头函数适合于this无关的回调：定时器，数组的方法回调<br>·箭头函数不适合与this有关的问题：事件回调，对象的方法<br>如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">let</span> aq = &#123;</span><br><span class=\"line\">      name :<span class=\"string\">&#x27;nihao&#x27;</span>,</span><br><span class=\"line\">      getName: ()=&gt;&#123;</span><br><span class=\"line\">          this.name;//此时的this指向外层作用域</span><br><span class=\"line\">          console.log(this.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">aq.getName()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是箭头函数\"><a href=\"#什么是箭头函数\" class=\"headerlink\" title=\"什么是箭头函数\"></a>什么是箭头函数</h3><p>ES6允许使用箭头（=&gt;）定义函数,俗称箭头函数  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//普通写法</span><br><span class=\"line\"><span class=\"built_in\">let</span> fn = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//箭头函数写法</span><br><span class=\"line\"> <span class=\"built_in\">let</span> fn = (a,b) =&gt; &#123;</span><br><span class=\"line\">     <span class=\"built_in\">return</span> a + b;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"built_in\">let</span> result = fn(1,2);</span><br><span class=\"line\"> console.log(result);</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-this是静态的，this始终指向函数声明所在作用域下的this的值\"><a href=\"#1-this是静态的，this始终指向函数声明所在作用域下的this的值\" class=\"headerlink\" title=\"1.this是静态的，this始终指向函数声明所在作用域下的this的值\"></a>1.this是静态的，this始终指向函数声明所在作用域下的this的值</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">getName</span></span>() &#123;</span><br><span class=\"line\">    console.log(this.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">let</span> getName2 = () =&gt;&#123;</span><br><span class=\"line\">      console.log(this.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //设置window对象的name属性</span><br><span class=\"line\">  window.name = <span class=\"string\">&#x27;xiaohao&#x27;</span>;</span><br><span class=\"line\">  const shcool = &#123;</span><br><span class=\"line\">      name:<span class=\"string\">&#x27;小豪&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //直接调用</span><br><span class=\"line\">  getName();//xiaohao</span><br><span class=\"line\">  getName2();//xiaohao</span><br><span class=\"line\"></span><br><span class=\"line\">  //call方法调用</span><br><span class=\"line\">  getName.call(shcool);//小豪</span><br><span class=\"line\">  getName2.call(shcool);//xiaohao</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-不能作为构造函数\"><a href=\"#2-不能作为构造函数\" class=\"headerlink\" title=\"2.不能作为构造函数\"></a>2.不能作为构造函数</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> Person = (name,age) =&gt; &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"built_in\">let</span> me = new Person(<span class=\"string\">&#x27;xiaohao&#x27;</span>,30);</span><br><span class=\"line\">console.log(me);//报错</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-不能使用arguments变量\"><a href=\"#3-不能使用arguments变量\" class=\"headerlink\" title=\"3.不能使用arguments变量\"></a>3.不能使用arguments变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> fn = () =&gt; &#123;console.log(arguments);&#125;</span><br><span class=\"line\">fn(1,2,3);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-箭头函数的简写\"><a href=\"#4-箭头函数的简写\" class=\"headerlink\" title=\"4.箭头函数的简写\"></a>4.箭头函数的简写</h3><p>1)省略小括号，当形参有且只有一个的时候</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> add = n =&gt; &#123; //let add = (n) =&gt; &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> n + n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(add(9));//18</span><br></pre></td></tr></table></figure>\n<p>2)省略花括号，当代码体只有一条语句的时候，此时return必须省略</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> pow = n =&gt; n * n;//let pow = (n) =&gt; &#123;<span class=\"built_in\">return</span> n * n;&#125;</span><br><span class=\"line\">console.log(pow(9));//81</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"箭头函数实践\"><a href=\"#箭头函数实践\" class=\"headerlink\" title=\"箭头函数实践\"></a>箭头函数实践</h2><p>1)点击div，两秒后背景颜色变为粉色</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    <span class=\"comment\">#ad&#123;</span></span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        height: 100px;</span><br><span class=\"line\">        background: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div <span class=\"built_in\">id</span>=<span class=\"string\">&quot;ad&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">let</span> ad = document.getElementById(<span class=\"string\">&#x27;ad&#x27;</span>);</span><br><span class=\"line\">      ad.addEventListener(<span class=\"string\">&quot;click&quot;</span>,<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">          //以前的做法</span><br><span class=\"line\">            //保存this的值</span><br><span class=\"line\">           <span class=\"built_in\">let</span> _this = this;</span><br><span class=\"line\">           setTimeout(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">               console.log(_this);</span><br><span class=\"line\">               _this.style.background = <span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">             &#125;,2000);</span><br><span class=\"line\"></span><br><span class=\"line\">        //使用箭头函数</span><br><span class=\"line\">        //箭头函数指向声明时所在作用域下,this是事件源ad</span><br><span class=\"line\">            setTimeout(()  =&gt; &#123;</span><br><span class=\"line\">              console.log(this);</span><br><span class=\"line\">              this.style.background = <span class=\"string\">&#x27;pink&#x27;</span>;</span><br><span class=\"line\">            &#125;,2000);</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>2)筛选数组中属于偶数的数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const arr = [1,6,4,23,26,47];</span><br><span class=\"line\">               //以前的做法</span><br><span class=\"line\">           const result = arr.filter(<span class=\"keyword\">function</span> (item) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(item % 2 === 0)&#123;</span><br><span class=\"line\">                   <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                   // console.log(result);</span><br><span class=\"line\">               &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                   <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">             //使用箭头函数</span><br><span class=\"line\">             const result = arr.filter(item =&gt; item % 2 === 0);</span><br><span class=\"line\">             console.log(result);</span><br></pre></td></tr></table></figure>\n\n<p>·箭头函数适合于this无关的回调：定时器，数组的方法回调<br>·箭头函数不适合与this有关的问题：事件回调，对象的方法<br>如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">let</span> aq = &#123;</span><br><span class=\"line\">      name :<span class=\"string\">&#x27;nihao&#x27;</span>,</span><br><span class=\"line\">      getName: ()=&gt;&#123;</span><br><span class=\"line\">          this.name;//此时的this指向外层作用域</span><br><span class=\"line\">          console.log(this.name);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">aq.getName()</span><br></pre></td></tr></table></figure>"},{"title":"First title","date":"2021-05-16T03:11:58.000Z","_content":"welcome to xiaohao title!","source":"_posts/2021/05/title.md","raw":"---\ntitle: First title\ndate: 2021-05-16 11:11:58\ntags:\n---\nwelcome to xiaohao title!","slug":"title","published":1,"updated":"2022-04-04T11:44:33.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb33s001cn4vo7ipy2j3j","content":"<p>welcome to xiaohao title!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>welcome to xiaohao title!</p>\n"},{"title":"ES6-Promise","date":"2021-06-22T10:46:56.000Z","_content":"### 什么是promise\n定义：Promise是ES6引入的异步编程的新解决方案。语法上 Promise是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果。\n```bash\n<script>\n        const p = new Promise(function (resolve,reject) {\n            setTimeout(function () {\n                //\n                let data = '数据库中用户的数据';\n                // 调用resolve,成功\n                resolve(data);\n                // let err = '数据库读取失败';\n                // reject(err)\n              },1000);\n          });\n\n          //调用promise对象的then方法\n          p.then(function (value) { //成功的话调用第一个，失败就调用第二个\n            console.log(value);\n            },\n            function (reason) {\n                // console.log(reason);\n          })\n    </script>\n```\n### Promise的then()方法\n```bash\n        <script>\n            const p =new Promise((resolve, reject) =>{\n                setTimeout(()=>{\n                    resolve('用户数据');\n                })\n            });\n\n        //then（）函数返回的实际也是一个Promise对象\n        //1.当回调后，返回的是非Promise类型的属性时，状态为fulfilled，then（）函数的返回值为对象的成功值，如reutnr      123，返回的Promise对象值为123，如果没有返回值，是undefined\n\n        //2.当回调后，返回的是Promise类型的对象时，then（）函数的返回值为这个Promise对象的状态值\n\n        //3.当回调后，如果抛出的异常，则then（）函数的返回值状态也是rejected\n            let result = p.then(value => {\n                console.log(value)\n                // return 123;\n                // return new Promise((resolve, reject) => {\n                //     resolve('ok')\n                // })\n                throw 123\n            },reason => {\n                console.log(reason)\n            })\n            console.log(result);\n        </script>\n```\n### promise的catch()方法\n```bash\n<script>\n    const p = new Promise((resolve,reject)=>{\n        setTimeout(() => {\n            reject('失败');\n        }, 1000);\n    });\n\n    p.then(function (value) {  },function (reason) {\n        console.log(reason);\n      });\n      p.catch(function (reason) { \n          console.warn(reason);\n       })\n</script>\n```\n\n### 使用Promise封装Ajax\n```bash\n<script>\n        //使用原始ajax\n        // 1.创建对象\n        const xhr = new XMLHttpRequest();\n        //2.初始化\n        xhr.open(\"GET\",\"https://api.apiopen.top/getJoke\");\n        //3.发送\n        xhr.send();\n        //4.绑定 事件，处理响应结果\n        xhr.onreadystatechange = function () {\n            if(xhr.readyState === 4){\n                //判断响应状态码 200-299\n                if(xhr.status >= 200 && xhr.status < 300){\n                    //表示成功\n                    console.log(xhr.response);\n                }else{\n                    //如果失败\n                    console.error(xhr.status);\n                }\n            }\n          }\n\n        //使用promise封装\n        const p = new Promise((resolve,reject)=>{\n        // 1.创建对象\n        const xhr = new XMLHttpRequest();\n        //2.初始化\n        xhr.open(\"GET\",\"https://api.apiopen.top/getJoke\");\n        //3.发送\n        xhr.send();\n        //4.绑定 事件，处理响应结果\n        xhr.onreadystatechange = function () {\n            if(xhr.readyState === 4){\n                //判断响应状态码 200-299\n                if(xhr.status >= 200 && xhr.status < 300){\n                    //表示成功\n                    resolve(xhr.response);\n                }else{\n                    //如果失败\n                    reject(xhr.status);\n                }\n            }\n          }\n          });\n          p.then(function (value) {\n              console.log(value);\n            },\n            function (reason) {\n                console.error(reason);\n              })\n    </script>\n```\n\n\n","source":"_posts/2021/06/ES6-Promise.md","raw":"---\ntitle: ES6-Promise\ncategories: ES6\ndate: 2021-06-22 18:46:56\ntags:\n      - ES6 \n      - Promise\n---\n### 什么是promise\n定义：Promise是ES6引入的异步编程的新解决方案。语法上 Promise是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果。\n```bash\n<script>\n        const p = new Promise(function (resolve,reject) {\n            setTimeout(function () {\n                //\n                let data = '数据库中用户的数据';\n                // 调用resolve,成功\n                resolve(data);\n                // let err = '数据库读取失败';\n                // reject(err)\n              },1000);\n          });\n\n          //调用promise对象的then方法\n          p.then(function (value) { //成功的话调用第一个，失败就调用第二个\n            console.log(value);\n            },\n            function (reason) {\n                // console.log(reason);\n          })\n    </script>\n```\n### Promise的then()方法\n```bash\n        <script>\n            const p =new Promise((resolve, reject) =>{\n                setTimeout(()=>{\n                    resolve('用户数据');\n                })\n            });\n\n        //then（）函数返回的实际也是一个Promise对象\n        //1.当回调后，返回的是非Promise类型的属性时，状态为fulfilled，then（）函数的返回值为对象的成功值，如reutnr      123，返回的Promise对象值为123，如果没有返回值，是undefined\n\n        //2.当回调后，返回的是Promise类型的对象时，then（）函数的返回值为这个Promise对象的状态值\n\n        //3.当回调后，如果抛出的异常，则then（）函数的返回值状态也是rejected\n            let result = p.then(value => {\n                console.log(value)\n                // return 123;\n                // return new Promise((resolve, reject) => {\n                //     resolve('ok')\n                // })\n                throw 123\n            },reason => {\n                console.log(reason)\n            })\n            console.log(result);\n        </script>\n```\n### promise的catch()方法\n```bash\n<script>\n    const p = new Promise((resolve,reject)=>{\n        setTimeout(() => {\n            reject('失败');\n        }, 1000);\n    });\n\n    p.then(function (value) {  },function (reason) {\n        console.log(reason);\n      });\n      p.catch(function (reason) { \n          console.warn(reason);\n       })\n</script>\n```\n\n### 使用Promise封装Ajax\n```bash\n<script>\n        //使用原始ajax\n        // 1.创建对象\n        const xhr = new XMLHttpRequest();\n        //2.初始化\n        xhr.open(\"GET\",\"https://api.apiopen.top/getJoke\");\n        //3.发送\n        xhr.send();\n        //4.绑定 事件，处理响应结果\n        xhr.onreadystatechange = function () {\n            if(xhr.readyState === 4){\n                //判断响应状态码 200-299\n                if(xhr.status >= 200 && xhr.status < 300){\n                    //表示成功\n                    console.log(xhr.response);\n                }else{\n                    //如果失败\n                    console.error(xhr.status);\n                }\n            }\n          }\n\n        //使用promise封装\n        const p = new Promise((resolve,reject)=>{\n        // 1.创建对象\n        const xhr = new XMLHttpRequest();\n        //2.初始化\n        xhr.open(\"GET\",\"https://api.apiopen.top/getJoke\");\n        //3.发送\n        xhr.send();\n        //4.绑定 事件，处理响应结果\n        xhr.onreadystatechange = function () {\n            if(xhr.readyState === 4){\n                //判断响应状态码 200-299\n                if(xhr.status >= 200 && xhr.status < 300){\n                    //表示成功\n                    resolve(xhr.response);\n                }else{\n                    //如果失败\n                    reject(xhr.status);\n                }\n            }\n          }\n          });\n          p.then(function (value) {\n              console.log(value);\n            },\n            function (reason) {\n                console.error(reason);\n              })\n    </script>\n```\n\n\n","slug":"ES6-Promise","published":1,"updated":"2022-04-04T11:44:33.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb33t001fn4vo62yq7da6","content":"<h3 id=\"什么是promise\"><a href=\"#什么是promise\" class=\"headerlink\" title=\"什么是promise\"></a>什么是promise</h3><p>定义：Promise是ES6引入的异步编程的新解决方案。语法上 Promise是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        const p = new Promise(<span class=\"keyword\">function</span> (resolve,reject) &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">                //</span><br><span class=\"line\">                <span class=\"built_in\">let</span> data = <span class=\"string\">&#x27;数据库中用户的数据&#x27;</span>;</span><br><span class=\"line\">                // 调用resolve,成功</span><br><span class=\"line\">                resolve(data);</span><br><span class=\"line\">                // <span class=\"built_in\">let</span> err = <span class=\"string\">&#x27;数据库读取失败&#x27;</span>;</span><br><span class=\"line\">                // reject(err)</span><br><span class=\"line\">              &#125;,1000);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">          //调用promise对象的<span class=\"keyword\">then</span>方法</span><br><span class=\"line\">          p.then(<span class=\"keyword\">function</span> (value) &#123; //成功的话调用第一个，失败就调用第二个</span><br><span class=\"line\">            console.log(value);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"keyword\">function</span> (reason) &#123;</span><br><span class=\"line\">                // console.log(reason);</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise的then-方法\"><a href=\"#Promise的then-方法\" class=\"headerlink\" title=\"Promise的then()方法\"></a>Promise的then()方法</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    const p =new Promise((resolve, reject) =&gt;&#123;</span><br><span class=\"line\">        setTimeout(()=&gt;&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">&#x27;用户数据&#x27;</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//then（）函数返回的实际也是一个Promise对象</span><br><span class=\"line\">//1.当回调后，返回的是非Promise类型的属性时，状态为fulfilled，<span class=\"keyword\">then</span>（）函数的返回值为对象的成功值，如reutnr      123，返回的Promise对象值为123，如果没有返回值，是undefined</span><br><span class=\"line\"></span><br><span class=\"line\">//2.当回调后，返回的是Promise类型的对象时，<span class=\"keyword\">then</span>（）函数的返回值为这个Promise对象的状态值</span><br><span class=\"line\"></span><br><span class=\"line\">//3.当回调后，如果抛出的异常，则<span class=\"keyword\">then</span>（）函数的返回值状态也是rejected</span><br><span class=\"line\">    <span class=\"built_in\">let</span> result = p.then(value =&gt; &#123;</span><br><span class=\"line\">        console.log(value)</span><br><span class=\"line\">        // <span class=\"built_in\">return</span> 123;</span><br><span class=\"line\">        // <span class=\"built_in\">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">        //     resolve(<span class=\"string\">&#x27;ok&#x27;</span>)</span><br><span class=\"line\">        // &#125;)</span><br><span class=\"line\">        throw 123</span><br><span class=\"line\">    &#125;,reason =&gt; &#123;</span><br><span class=\"line\">        console.log(reason)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    console.log(result);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"promise的catch-方法\"><a href=\"#promise的catch-方法\" class=\"headerlink\" title=\"promise的catch()方法\"></a>promise的catch()方法</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    const p = new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            reject(<span class=\"string\">&#x27;失败&#x27;</span>);</span><br><span class=\"line\">        &#125;, 1000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    p.then(<span class=\"keyword\">function</span> (value) &#123;  &#125;,<span class=\"keyword\">function</span> (reason) &#123;</span><br><span class=\"line\">        console.log(reason);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      p.catch(<span class=\"keyword\">function</span> (reason) &#123; </span><br><span class=\"line\">          console.warn(reason);</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用Promise封装Ajax\"><a href=\"#使用Promise封装Ajax\" class=\"headerlink\" title=\"使用Promise封装Ajax\"></a>使用Promise封装Ajax</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        //使用原始ajax</span><br><span class=\"line\">        // 1.创建对象</span><br><span class=\"line\">        const xhr = new XMLHttpRequest();</span><br><span class=\"line\">        //2.初始化</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class=\"line\">        //3.发送</span><br><span class=\"line\">        xhr.send();</span><br><span class=\"line\">        //4.绑定 事件，处理响应结果</span><br><span class=\"line\">        xhr.onreadystatechange = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === 4)&#123;</span><br><span class=\"line\">                //判断响应状态码 200-299</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class=\"line\">                    //表示成功</span><br><span class=\"line\">                    console.log(xhr.response);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    //如果失败</span><br><span class=\"line\">                    console.error(xhr.status);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //使用promise封装</span><br><span class=\"line\">        const p = new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">        // 1.创建对象</span><br><span class=\"line\">        const xhr = new XMLHttpRequest();</span><br><span class=\"line\">        //2.初始化</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class=\"line\">        //3.发送</span><br><span class=\"line\">        xhr.send();</span><br><span class=\"line\">        //4.绑定 事件，处理响应结果</span><br><span class=\"line\">        xhr.onreadystatechange = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === 4)&#123;</span><br><span class=\"line\">                //判断响应状态码 200-299</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class=\"line\">                    //表示成功</span><br><span class=\"line\">                    resolve(xhr.response);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    //如果失败</span><br><span class=\"line\">                    reject(xhr.status);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          p.then(<span class=\"keyword\">function</span> (value) &#123;</span><br><span class=\"line\">              console.log(value);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"keyword\">function</span> (reason) &#123;</span><br><span class=\"line\">                console.error(reason);</span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是promise\"><a href=\"#什么是promise\" class=\"headerlink\" title=\"什么是promise\"></a>什么是promise</h3><p>定义：Promise是ES6引入的异步编程的新解决方案。语法上 Promise是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        const p = new Promise(<span class=\"keyword\">function</span> (resolve,reject) &#123;</span><br><span class=\"line\">            setTimeout(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">                //</span><br><span class=\"line\">                <span class=\"built_in\">let</span> data = <span class=\"string\">&#x27;数据库中用户的数据&#x27;</span>;</span><br><span class=\"line\">                // 调用resolve,成功</span><br><span class=\"line\">                resolve(data);</span><br><span class=\"line\">                // <span class=\"built_in\">let</span> err = <span class=\"string\">&#x27;数据库读取失败&#x27;</span>;</span><br><span class=\"line\">                // reject(err)</span><br><span class=\"line\">              &#125;,1000);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">          //调用promise对象的<span class=\"keyword\">then</span>方法</span><br><span class=\"line\">          p.then(<span class=\"keyword\">function</span> (value) &#123; //成功的话调用第一个，失败就调用第二个</span><br><span class=\"line\">            console.log(value);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"keyword\">function</span> (reason) &#123;</span><br><span class=\"line\">                // console.log(reason);</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Promise的then-方法\"><a href=\"#Promise的then-方法\" class=\"headerlink\" title=\"Promise的then()方法\"></a>Promise的then()方法</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    const p =new Promise((resolve, reject) =&gt;&#123;</span><br><span class=\"line\">        setTimeout(()=&gt;&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">&#x27;用户数据&#x27;</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//then（）函数返回的实际也是一个Promise对象</span><br><span class=\"line\">//1.当回调后，返回的是非Promise类型的属性时，状态为fulfilled，<span class=\"keyword\">then</span>（）函数的返回值为对象的成功值，如reutnr      123，返回的Promise对象值为123，如果没有返回值，是undefined</span><br><span class=\"line\"></span><br><span class=\"line\">//2.当回调后，返回的是Promise类型的对象时，<span class=\"keyword\">then</span>（）函数的返回值为这个Promise对象的状态值</span><br><span class=\"line\"></span><br><span class=\"line\">//3.当回调后，如果抛出的异常，则<span class=\"keyword\">then</span>（）函数的返回值状态也是rejected</span><br><span class=\"line\">    <span class=\"built_in\">let</span> result = p.then(value =&gt; &#123;</span><br><span class=\"line\">        console.log(value)</span><br><span class=\"line\">        // <span class=\"built_in\">return</span> 123;</span><br><span class=\"line\">        // <span class=\"built_in\">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">        //     resolve(<span class=\"string\">&#x27;ok&#x27;</span>)</span><br><span class=\"line\">        // &#125;)</span><br><span class=\"line\">        throw 123</span><br><span class=\"line\">    &#125;,reason =&gt; &#123;</span><br><span class=\"line\">        console.log(reason)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    console.log(result);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"promise的catch-方法\"><a href=\"#promise的catch-方法\" class=\"headerlink\" title=\"promise的catch()方法\"></a>promise的catch()方法</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    const p = new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">        setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            reject(<span class=\"string\">&#x27;失败&#x27;</span>);</span><br><span class=\"line\">        &#125;, 1000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    p.then(<span class=\"keyword\">function</span> (value) &#123;  &#125;,<span class=\"keyword\">function</span> (reason) &#123;</span><br><span class=\"line\">        console.log(reason);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      p.catch(<span class=\"keyword\">function</span> (reason) &#123; </span><br><span class=\"line\">          console.warn(reason);</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用Promise封装Ajax\"><a href=\"#使用Promise封装Ajax\" class=\"headerlink\" title=\"使用Promise封装Ajax\"></a>使用Promise封装Ajax</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        //使用原始ajax</span><br><span class=\"line\">        // 1.创建对象</span><br><span class=\"line\">        const xhr = new XMLHttpRequest();</span><br><span class=\"line\">        //2.初始化</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class=\"line\">        //3.发送</span><br><span class=\"line\">        xhr.send();</span><br><span class=\"line\">        //4.绑定 事件，处理响应结果</span><br><span class=\"line\">        xhr.onreadystatechange = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === 4)&#123;</span><br><span class=\"line\">                //判断响应状态码 200-299</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class=\"line\">                    //表示成功</span><br><span class=\"line\">                    console.log(xhr.response);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    //如果失败</span><br><span class=\"line\">                    console.error(xhr.status);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //使用promise封装</span><br><span class=\"line\">        const p = new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">        // 1.创建对象</span><br><span class=\"line\">        const xhr = new XMLHttpRequest();</span><br><span class=\"line\">        //2.初始化</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class=\"line\">        //3.发送</span><br><span class=\"line\">        xhr.send();</span><br><span class=\"line\">        //4.绑定 事件，处理响应结果</span><br><span class=\"line\">        xhr.onreadystatechange = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.readyState === 4)&#123;</span><br><span class=\"line\">                //判断响应状态码 200-299</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class=\"line\">                    //表示成功</span><br><span class=\"line\">                    resolve(xhr.response);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    //如果失败</span><br><span class=\"line\">                    reject(xhr.status);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          p.then(<span class=\"keyword\">function</span> (value) &#123;</span><br><span class=\"line\">              console.log(value);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"keyword\">function</span> (reason) &#123;</span><br><span class=\"line\">                console.error(reason);</span><br><span class=\"line\">              &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"凛冬不至","date":"2021-05-16T03:46:09.000Z","_content":"有一次，跟朋友讨论《冰与火之歌》里，史塔克家族家训“凛冬将至”的逼格何在？\n最终达成了谜一般的结论，它跟“中华民族到了最危险的时候”的意境是一样的…\n其实不无道理。起风了，唯努力生存。\n希望每个人都能在这个时节照顾好自己。\n\n而深圳的冬天，却完全没有这种“居安思危”的警醒和敬畏。\n早上你觉得挺凉的，中午日头招摇过市，热气又慢慢回升了。\n而且好几个同事都还没见过雪呢。\n他们过来问我我都胡乱说，一会说雪像盐，一会说像糖，还可以舔。\n因为有时候我觉得，深圳的冬天确实需要点乐趣的。\n上周部门举办了年会，这次的主题是“we ara young”。\n晚会party过后已经快11点了，我不喜欢在这种场合喝酒，直接回了酒店。\n加上没有中大奖，感觉并没有尽兴。\n我就想，如果我现在是18岁，会干点什么呢？\n对了，去网吧玩吧！\n\n于是真的和朋友驱车到了三公里外。\n其实最近两个月真的觉得压力很大，生活比游戏更能体现什么叫做“绝地求生”。\n但至少，这个冬天的夜晚变得欢愉起来，把烦恼一扫而光。\n回来已经4点，看到群里通知说，第二天下午还是要上班的…顿时傻了眼。\n这说明我的确not young了，已经有了许多桎梏。\n\n好在后面就是周末了。\n沉沉地睡了一觉，梦中有白色的羽毛，它们张开嘴巴咿咿呀呀地唱歌，然后还有彩色的潮水开始上涨。\n好似触电般的惊醒，我在朦胧中看了下日历和天气，突然兴奋了起来！\n它们要回来了。\n\n是的，我自认为深圳冬天为数不多的两个趣事：\n一是异木棉花开，二是候鸟的归来。\n异木棉一个月前已经开放，这时该轮到鸟儿的登场了。\n端上相机我就直奔海边，每年的这个时候，我都会去海边看一下它们。\n\n以前我特别喜欢看《迁徙的鸟》。导演雅克贝汉说，这是一个关于承诺的故事。\n人的老去，很多是因为“忘记年轻”了。\n他们忘了年少的欢乐与抱负，经历散失与背叛，又陷入怀疑与困惑。\n傻鸟儿们当然不管这些，它们日夜兼程，就可以回到这个凛冬不至的海岸，兑现永恒的承诺。\n","source":"_posts/2021/05/凛冬不至.md","raw":"---\ntitle: 凛冬不至\ncategories: 生活点滴\ndate: 2021-05-16 11:46:09\ntags:\n     - 生活点滴\n---\n有一次，跟朋友讨论《冰与火之歌》里，史塔克家族家训“凛冬将至”的逼格何在？\n最终达成了谜一般的结论，它跟“中华民族到了最危险的时候”的意境是一样的…\n其实不无道理。起风了，唯努力生存。\n希望每个人都能在这个时节照顾好自己。\n\n而深圳的冬天，却完全没有这种“居安思危”的警醒和敬畏。\n早上你觉得挺凉的，中午日头招摇过市，热气又慢慢回升了。\n而且好几个同事都还没见过雪呢。\n他们过来问我我都胡乱说，一会说雪像盐，一会说像糖，还可以舔。\n因为有时候我觉得，深圳的冬天确实需要点乐趣的。\n上周部门举办了年会，这次的主题是“we ara young”。\n晚会party过后已经快11点了，我不喜欢在这种场合喝酒，直接回了酒店。\n加上没有中大奖，感觉并没有尽兴。\n我就想，如果我现在是18岁，会干点什么呢？\n对了，去网吧玩吧！\n\n于是真的和朋友驱车到了三公里外。\n其实最近两个月真的觉得压力很大，生活比游戏更能体现什么叫做“绝地求生”。\n但至少，这个冬天的夜晚变得欢愉起来，把烦恼一扫而光。\n回来已经4点，看到群里通知说，第二天下午还是要上班的…顿时傻了眼。\n这说明我的确not young了，已经有了许多桎梏。\n\n好在后面就是周末了。\n沉沉地睡了一觉，梦中有白色的羽毛，它们张开嘴巴咿咿呀呀地唱歌，然后还有彩色的潮水开始上涨。\n好似触电般的惊醒，我在朦胧中看了下日历和天气，突然兴奋了起来！\n它们要回来了。\n\n是的，我自认为深圳冬天为数不多的两个趣事：\n一是异木棉花开，二是候鸟的归来。\n异木棉一个月前已经开放，这时该轮到鸟儿的登场了。\n端上相机我就直奔海边，每年的这个时候，我都会去海边看一下它们。\n\n以前我特别喜欢看《迁徙的鸟》。导演雅克贝汉说，这是一个关于承诺的故事。\n人的老去，很多是因为“忘记年轻”了。\n他们忘了年少的欢乐与抱负，经历散失与背叛，又陷入怀疑与困惑。\n傻鸟儿们当然不管这些，它们日夜兼程，就可以回到这个凛冬不至的海岸，兑现永恒的承诺。\n","slug":"凛冬不至","published":1,"updated":"2022-04-04T11:44:33.817Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb33v001jn4vofozid4li","content":"<p>有一次，跟朋友讨论《冰与火之歌》里，史塔克家族家训“凛冬将至”的逼格何在？<br>最终达成了谜一般的结论，它跟“中华民族到了最危险的时候”的意境是一样的…<br>其实不无道理。起风了，唯努力生存。<br>希望每个人都能在这个时节照顾好自己。</p>\n<p>而深圳的冬天，却完全没有这种“居安思危”的警醒和敬畏。<br>早上你觉得挺凉的，中午日头招摇过市，热气又慢慢回升了。<br>而且好几个同事都还没见过雪呢。<br>他们过来问我我都胡乱说，一会说雪像盐，一会说像糖，还可以舔。<br>因为有时候我觉得，深圳的冬天确实需要点乐趣的。<br>上周部门举办了年会，这次的主题是“we ara young”。<br>晚会party过后已经快11点了，我不喜欢在这种场合喝酒，直接回了酒店。<br>加上没有中大奖，感觉并没有尽兴。<br>我就想，如果我现在是18岁，会干点什么呢？<br>对了，去网吧玩吧！</p>\n<p>于是真的和朋友驱车到了三公里外。<br>其实最近两个月真的觉得压力很大，生活比游戏更能体现什么叫做“绝地求生”。<br>但至少，这个冬天的夜晚变得欢愉起来，把烦恼一扫而光。<br>回来已经4点，看到群里通知说，第二天下午还是要上班的…顿时傻了眼。<br>这说明我的确not young了，已经有了许多桎梏。</p>\n<p>好在后面就是周末了。<br>沉沉地睡了一觉，梦中有白色的羽毛，它们张开嘴巴咿咿呀呀地唱歌，然后还有彩色的潮水开始上涨。<br>好似触电般的惊醒，我在朦胧中看了下日历和天气，突然兴奋了起来！<br>它们要回来了。</p>\n<p>是的，我自认为深圳冬天为数不多的两个趣事：<br>一是异木棉花开，二是候鸟的归来。<br>异木棉一个月前已经开放，这时该轮到鸟儿的登场了。<br>端上相机我就直奔海边，每年的这个时候，我都会去海边看一下它们。</p>\n<p>以前我特别喜欢看《迁徙的鸟》。导演雅克贝汉说，这是一个关于承诺的故事。<br>人的老去，很多是因为“忘记年轻”了。<br>他们忘了年少的欢乐与抱负，经历散失与背叛，又陷入怀疑与困惑。<br>傻鸟儿们当然不管这些，它们日夜兼程，就可以回到这个凛冬不至的海岸，兑现永恒的承诺。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>有一次，跟朋友讨论《冰与火之歌》里，史塔克家族家训“凛冬将至”的逼格何在？<br>最终达成了谜一般的结论，它跟“中华民族到了最危险的时候”的意境是一样的…<br>其实不无道理。起风了，唯努力生存。<br>希望每个人都能在这个时节照顾好自己。</p>\n<p>而深圳的冬天，却完全没有这种“居安思危”的警醒和敬畏。<br>早上你觉得挺凉的，中午日头招摇过市，热气又慢慢回升了。<br>而且好几个同事都还没见过雪呢。<br>他们过来问我我都胡乱说，一会说雪像盐，一会说像糖，还可以舔。<br>因为有时候我觉得，深圳的冬天确实需要点乐趣的。<br>上周部门举办了年会，这次的主题是“we ara young”。<br>晚会party过后已经快11点了，我不喜欢在这种场合喝酒，直接回了酒店。<br>加上没有中大奖，感觉并没有尽兴。<br>我就想，如果我现在是18岁，会干点什么呢？<br>对了，去网吧玩吧！</p>\n<p>于是真的和朋友驱车到了三公里外。<br>其实最近两个月真的觉得压力很大，生活比游戏更能体现什么叫做“绝地求生”。<br>但至少，这个冬天的夜晚变得欢愉起来，把烦恼一扫而光。<br>回来已经4点，看到群里通知说，第二天下午还是要上班的…顿时傻了眼。<br>这说明我的确not young了，已经有了许多桎梏。</p>\n<p>好在后面就是周末了。<br>沉沉地睡了一觉，梦中有白色的羽毛，它们张开嘴巴咿咿呀呀地唱歌，然后还有彩色的潮水开始上涨。<br>好似触电般的惊醒，我在朦胧中看了下日历和天气，突然兴奋了起来！<br>它们要回来了。</p>\n<p>是的，我自认为深圳冬天为数不多的两个趣事：<br>一是异木棉花开，二是候鸟的归来。<br>异木棉一个月前已经开放，这时该轮到鸟儿的登场了。<br>端上相机我就直奔海边，每年的这个时候，我都会去海边看一下它们。</p>\n<p>以前我特别喜欢看《迁徙的鸟》。导演雅克贝汉说，这是一个关于承诺的故事。<br>人的老去，很多是因为“忘记年轻”了。<br>他们忘了年少的欢乐与抱负，经历散失与背叛，又陷入怀疑与困惑。<br>傻鸟儿们当然不管这些，它们日夜兼程，就可以回到这个凛冬不至的海岸，兑现永恒的承诺。</p>\n"},{"title":"ES6-Map","date":"2021-06-23T02:17:04.000Z","_content":"### 定义\nES6提供了Map数据结构。它类似于对象，也是键值对的集合。但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。Map也实现了iterator接口，所以可以使用『扩展运算符』和「for…of…』进行遍历。Map的属性和方法。\n\n```bash\n    <script>\n        let m = new Map();\n        m.set(\"name\",\"xiaohao\");\n        m.set(\"change\",function () {\n            console.log(\"nihao\");\n          });\n        let key = {\n            shcool:'huaguang'\n        };\n        m.set(key,['北京','上海','广州']); //可以把对象当作一个键s\n          console.log(m);\n\n          //size\n          console.log(m.size);\n\n          //delete\n          m.delete('name');//根据键名删除\n\n          //获取\n          console.log(m.get('change'));\n          console.log(m.get(key));\n\n          //清空\n        //   m.clear();\n\n          //遍历\n          for(let v of m){\n              console.log(v);\n          }\n    </script>\n```","source":"_posts/2021/06/ES6-Map.md","raw":"---\ntitle: ES6-Map\ncategories: ES6\ndate: 2021-06-23 10:17:04\ntags:  \n      - ES6 \n      - Map\n---\n### 定义\nES6提供了Map数据结构。它类似于对象，也是键值对的集合。但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。Map也实现了iterator接口，所以可以使用『扩展运算符』和「for…of…』进行遍历。Map的属性和方法。\n\n```bash\n    <script>\n        let m = new Map();\n        m.set(\"name\",\"xiaohao\");\n        m.set(\"change\",function () {\n            console.log(\"nihao\");\n          });\n        let key = {\n            shcool:'huaguang'\n        };\n        m.set(key,['北京','上海','广州']); //可以把对象当作一个键s\n          console.log(m);\n\n          //size\n          console.log(m.size);\n\n          //delete\n          m.delete('name');//根据键名删除\n\n          //获取\n          console.log(m.get('change'));\n          console.log(m.get(key));\n\n          //清空\n        //   m.clear();\n\n          //遍历\n          for(let v of m){\n              console.log(v);\n          }\n    </script>\n```","slug":"ES6-Map","published":1,"updated":"2022-04-04T11:44:33.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb33v001mn4vo8tlmab07","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>ES6提供了Map数据结构。它类似于对象，也是键值对的集合。但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。Map也实现了iterator接口，所以可以使用『扩展运算符』和「for…of…』进行遍历。Map的属性和方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> m = new Map();</span><br><span class=\"line\">    m.set(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;xiaohao&quot;</span>);</span><br><span class=\"line\">    m.set(<span class=\"string\">&quot;change&quot;</span>,<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">&quot;nihao&quot;</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">let</span> key = &#123;</span><br><span class=\"line\">        shcool:<span class=\"string\">&#x27;huaguang&#x27;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    m.set(key,[<span class=\"string\">&#x27;北京&#x27;</span>,<span class=\"string\">&#x27;上海&#x27;</span>,<span class=\"string\">&#x27;广州&#x27;</span>]); //可以把对象当作一个键s</span><br><span class=\"line\">      console.log(m);</span><br><span class=\"line\"></span><br><span class=\"line\">      //size</span><br><span class=\"line\">      console.log(m.size);</span><br><span class=\"line\"></span><br><span class=\"line\">      //delete</span><br><span class=\"line\">      m.delete(<span class=\"string\">&#x27;name&#x27;</span>);//根据键名删除</span><br><span class=\"line\"></span><br><span class=\"line\">      //获取</span><br><span class=\"line\">      console.log(m.get(<span class=\"string\">&#x27;change&#x27;</span>));</span><br><span class=\"line\">      console.log(m.get(key));</span><br><span class=\"line\"></span><br><span class=\"line\">      //清空</span><br><span class=\"line\">    //   m.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">      //遍历</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> v of m)&#123;</span><br><span class=\"line\">          console.log(v);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>ES6提供了Map数据结构。它类似于对象，也是键值对的集合。但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。Map也实现了iterator接口，所以可以使用『扩展运算符』和「for…of…』进行遍历。Map的属性和方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> m = new Map();</span><br><span class=\"line\">    m.set(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;xiaohao&quot;</span>);</span><br><span class=\"line\">    m.set(<span class=\"string\">&quot;change&quot;</span>,<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">&quot;nihao&quot;</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">let</span> key = &#123;</span><br><span class=\"line\">        shcool:<span class=\"string\">&#x27;huaguang&#x27;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    m.set(key,[<span class=\"string\">&#x27;北京&#x27;</span>,<span class=\"string\">&#x27;上海&#x27;</span>,<span class=\"string\">&#x27;广州&#x27;</span>]); //可以把对象当作一个键s</span><br><span class=\"line\">      console.log(m);</span><br><span class=\"line\"></span><br><span class=\"line\">      //size</span><br><span class=\"line\">      console.log(m.size);</span><br><span class=\"line\"></span><br><span class=\"line\">      //delete</span><br><span class=\"line\">      m.delete(<span class=\"string\">&#x27;name&#x27;</span>);//根据键名删除</span><br><span class=\"line\"></span><br><span class=\"line\">      //获取</span><br><span class=\"line\">      console.log(m.get(<span class=\"string\">&#x27;change&#x27;</span>));</span><br><span class=\"line\">      console.log(m.get(key));</span><br><span class=\"line\"></span><br><span class=\"line\">      //清空</span><br><span class=\"line\">    //   m.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">      //遍历</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> v of m)&#123;</span><br><span class=\"line\">          console.log(v);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ES6-Symbol的应用","date":"2021-06-03T06:42:43.000Z","_content":"除了定义自己使用的Symbol值以外，ES6还提供了11个内置的Symbol值，指向语言内部使用的方法\n![](./ES6-Symbol%E7%9A%84%E5%BA%94%E7%94%A8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210605110724.png)\n![](./ES6-Symbol%E7%9A%84%E5%BA%94%E7%94%A8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210605110750.png)\n\n```bash\nclass Person {\n    static [Symbol.hasInstance](param){\n        console.log(param);\n        console.log(\"我被用来检测了\")；\n        return false;\n    }\n}\nlet o = {};\nconsole.log(o instanceof Person); //我被用来检测了，false\n```\n\n### 给对象添加方法方式一：\n```bash\nlet game = {\n    name : 'ran'\n}\nlet methods = {\n    up:Symbol()\n    down:Symbol()\n}\ngame[methods.up]=function(){\n    console.log('aaa');\n}\ngame[methods.down]=function(){\n    console.log('bbb');\n}\nconsole.log(game)    // name: 'ran',Symbol(),Symbol()\n```\n\n### 给对象添加方法方式二:\n```bash\nlet youxi = {\n    name: '狼人杀'，\n    [Symbol('say')]:function(){\n        console.log('阿萨德')\n    }\n}\nconsole.log(youxi)    // name:'狼人杀',Symbol(say)\n```\n","source":"_posts/2021/06/ES6-Symbol的应用.md","raw":"---\ntitle: ES6-Symbol的应用\ncategories: ES6\ndate: 2021-06-03 14:42:43\ntags: \n    - ES6 \n    - Symbol\n---\n除了定义自己使用的Symbol值以外，ES6还提供了11个内置的Symbol值，指向语言内部使用的方法\n![](./ES6-Symbol%E7%9A%84%E5%BA%94%E7%94%A8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210605110724.png)\n![](./ES6-Symbol%E7%9A%84%E5%BA%94%E7%94%A8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210605110750.png)\n\n```bash\nclass Person {\n    static [Symbol.hasInstance](param){\n        console.log(param);\n        console.log(\"我被用来检测了\")；\n        return false;\n    }\n}\nlet o = {};\nconsole.log(o instanceof Person); //我被用来检测了，false\n```\n\n### 给对象添加方法方式一：\n```bash\nlet game = {\n    name : 'ran'\n}\nlet methods = {\n    up:Symbol()\n    down:Symbol()\n}\ngame[methods.up]=function(){\n    console.log('aaa');\n}\ngame[methods.down]=function(){\n    console.log('bbb');\n}\nconsole.log(game)    // name: 'ran',Symbol(),Symbol()\n```\n\n### 给对象添加方法方式二:\n```bash\nlet youxi = {\n    name: '狼人杀'，\n    [Symbol('say')]:function(){\n        console.log('阿萨德')\n    }\n}\nconsole.log(youxi)    // name:'狼人杀',Symbol(say)\n```\n","slug":"ES6-Symbol的应用","published":1,"updated":"2022-04-04T11:44:33.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb33z001rn4vo61s4cjx9","content":"<p>除了定义自己使用的Symbol值以外，ES6还提供了11个内置的Symbol值，指向语言内部使用的方法<br><img src=\"./ES6-Symbol%E7%9A%84%E5%BA%94%E7%94%A8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210605110724.png\"><br><img src=\"./ES6-Symbol%E7%9A%84%E5%BA%94%E7%94%A8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210605110750.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">    static [Symbol.hasInstance](param)&#123;</span><br><span class=\"line\">        console.log(param);</span><br><span class=\"line\">        console.log(<span class=\"string\">&quot;我被用来检测了&quot;</span>)；</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">let</span> o = &#123;&#125;;</span><br><span class=\"line\">console.log(o instanceof Person); //我被用来检测了，<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给对象添加方法方式一：\"><a href=\"#给对象添加方法方式一：\" class=\"headerlink\" title=\"给对象添加方法方式一：\"></a>给对象添加方法方式一：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> game = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">&#x27;ran&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">let</span> methods = &#123;</span><br><span class=\"line\">    up:Symbol()</span><br><span class=\"line\">    down:Symbol()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">game[methods.up]=<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">&#x27;aaa&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">game[methods.down]=<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">&#x27;bbb&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(game)    // name: <span class=\"string\">&#x27;ran&#x27;</span>,Symbol(),Symbol()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给对象添加方法方式二\"><a href=\"#给对象添加方法方式二\" class=\"headerlink\" title=\"给对象添加方法方式二:\"></a>给对象添加方法方式二:</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> youxi = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;狼人杀&#x27;</span>，</span><br><span class=\"line\">    [Symbol(<span class=\"string\">&#x27;say&#x27;</span>)]:<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">&#x27;阿萨德&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(youxi)    // name:<span class=\"string\">&#x27;狼人杀&#x27;</span>,Symbol(say)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>除了定义自己使用的Symbol值以外，ES6还提供了11个内置的Symbol值，指向语言内部使用的方法<br><img src=\"./ES6-Symbol%E7%9A%84%E5%BA%94%E7%94%A8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210605110724.png\"><br><img src=\"./ES6-Symbol%E7%9A%84%E5%BA%94%E7%94%A8/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210605110750.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Person &#123;</span><br><span class=\"line\">    static [Symbol.hasInstance](param)&#123;</span><br><span class=\"line\">        console.log(param);</span><br><span class=\"line\">        console.log(<span class=\"string\">&quot;我被用来检测了&quot;</span>)；</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">let</span> o = &#123;&#125;;</span><br><span class=\"line\">console.log(o instanceof Person); //我被用来检测了，<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给对象添加方法方式一：\"><a href=\"#给对象添加方法方式一：\" class=\"headerlink\" title=\"给对象添加方法方式一：\"></a>给对象添加方法方式一：</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> game = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">&#x27;ran&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">let</span> methods = &#123;</span><br><span class=\"line\">    up:Symbol()</span><br><span class=\"line\">    down:Symbol()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">game[methods.up]=<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">&#x27;aaa&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">game[methods.down]=<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">&#x27;bbb&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(game)    // name: <span class=\"string\">&#x27;ran&#x27;</span>,Symbol(),Symbol()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给对象添加方法方式二\"><a href=\"#给对象添加方法方式二\" class=\"headerlink\" title=\"给对象添加方法方式二:\"></a>给对象添加方法方式二:</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> youxi = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;狼人杀&#x27;</span>，</span><br><span class=\"line\">    [Symbol(<span class=\"string\">&#x27;say&#x27;</span>)]:<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">&#x27;阿萨德&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(youxi)    // name:<span class=\"string\">&#x27;狼人杀&#x27;</span>,Symbol(say)</span><br></pre></td></tr></table></figure>\n"},{"title":"ES6-get/set","date":"2021-06-23T02:48:25.000Z","_content":"```bash\n<script>\n        //get和set\n        class Phone{\n            get price(){\n                console.log(\"价格属性被读取\");\n                return 'xiaohao';\n            }\n            set price(newval){\n                console.log(\"价格属性被修改\");\n            }\n        }\n        //实例化对象\n        let s = new Phone();\n        console.log(s.price);\n        s.price = 'free';\n    </script>\n```","source":"_posts/2021/06/ES6-get-set.md","raw":"---\ntitle: ES6-get/set\ncategories: ES6\ndate: 2021-06-23 10:48:25\ntags:  \n      - ES6 \n      - get/set\n---\n```bash\n<script>\n        //get和set\n        class Phone{\n            get price(){\n                console.log(\"价格属性被读取\");\n                return 'xiaohao';\n            }\n            set price(newval){\n                console.log(\"价格属性被修改\");\n            }\n        }\n        //实例化对象\n        let s = new Phone();\n        console.log(s.price);\n        s.price = 'free';\n    </script>\n```","slug":"ES6-get-set","published":1,"updated":"2022-04-04T11:44:33.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb340001un4vo7m0081ky","content":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        //get和<span class=\"built_in\">set</span></span><br><span class=\"line\">        class Phone&#123;</span><br><span class=\"line\">            get <span class=\"function\"><span class=\"title\">price</span></span>()&#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">&quot;价格属性被读取&quot;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">return</span> <span class=\"string\">&#x27;xiaohao&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">set</span> price(newval)&#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">&quot;价格属性被修改&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //实例化对象</span><br><span class=\"line\">        <span class=\"built_in\">let</span> s = new Phone();</span><br><span class=\"line\">        console.log(s.price);</span><br><span class=\"line\">        s.price = <span class=\"string\">&#x27;free&#x27;</span>;</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        //get和<span class=\"built_in\">set</span></span><br><span class=\"line\">        class Phone&#123;</span><br><span class=\"line\">            get <span class=\"function\"><span class=\"title\">price</span></span>()&#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">&quot;价格属性被读取&quot;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">return</span> <span class=\"string\">&#x27;xiaohao&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">set</span> price(newval)&#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">&quot;价格属性被修改&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //实例化对象</span><br><span class=\"line\">        <span class=\"built_in\">let</span> s = new Phone();</span><br><span class=\"line\">        console.log(s.price);</span><br><span class=\"line\">        s.price = <span class=\"string\">&#x27;free&#x27;</span>;</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ES6-Symbol类型的认识","date":"2021-06-03T06:42:43.000Z","_content":"### 什么是Symbol\nES6引入了一种新的原始数据类型Symbol，表示独一无二的值，它是javascript语言的第七种数据类型，是一种类似于字符串的数据类型。  \nSymbol特点\n1）Symbol值是唯一的，用来解决命名冲突的问题  \n2) Symbol值不能与其他数据进行运算  \n3) Symbol定义的对象属性不能使用for..in循坏遍历，但是可以使用Reflect.ownKeys来获取对象的所有键名\n```\n //创建Symbol\n        let s = Symbol();\n        console.log(s,typeof s);\n\n        //第一种方式\n        let s2 = Symbol('小豪');\n        let s3 = Symbol('小豪');\n        console.log(s2 == s3);//false\n\n        //第二种方式 对象\n        let s4 = Symbol.for('小豪');\n        let s5 = Symbol.for('小豪');\n        console.log(s4 == s5);//true\n\n        //不能与其他数据进行运算\n        let result = s + 100;//报错\n\n        //js七种数据类型\n        // u  undefined\n        // s  Symbol String\n        // o  object\n        // n  null number\n        // b  boolean\n```\nSymbol 值作为属性名时，该属性是公有属性不是私有属性，可以在类的外部访问。但是不会出现在 for...in 、 for...of 的循环中，也不会被 Object.keys() 、 Object.getOwnPropertyNames() 返回。如果要读取到一个对象的 Symbol 属性，可以通过 Object.getOwnPropertySymbols() 和 Reflect.ownKeys() 取到。\n```\n        let sy = Symbol(\"key1\");\n                let syObject = {};\n        syObject[sy] = \"kk\";\n        console.log(syObject);\n        \n        for (let i in syObject) {\n          console.log(i);\n        }    // 无输出\n        \n        Object.keys(syObject);                     // []\n        Object.getOwnPropertySymbols(syObject);    // [Symbol(key1)]\n        Reflect.ownKeys(syObject);                 // [Symbol(key1)]\n```\nSymbol.for()\nSymbol.for() 类似单例模式，首先会在全局搜索被登记的 Symbol 中是否有该字符串参数作为名称的 Symbol 值，如果有即返回该 Symbol 值，若没有则新建并返回一个以该字符串参数为名称的 Symbol 值，并登记在全局环境中供搜索。\n```bash\n        let yellow = Symbol(\"Yellow\");\n        let yellow1 = Symbol.for(\"Yellow\");\n        yellow === yellow1;      // false\n        \n        let yellow2 = Symbol.for(\"Yellow\");\n        yellow1 === yellow2;     // true\n```\n\nSymbol.keyFor() 返回一个已登记的 Symbol 类型值的 key ，用来检测该字符串参数作为名称的 Symbol 值是否已被登记。\n```bash\n        let yellow1 = Symbol.for(\"Yellow\");\n        Symbol.keyFor(yellow1);    // \"Yellow\"\n```","source":"_posts/2021/06/ES6-Symbol类型的认识.md","raw":"---\ntitle: ES6-Symbol类型的认识\ncategories: ES6\ndate: 2021-06-03 14:42:43\ntags: \n    - ES6 \n    - Symbol\n---\n### 什么是Symbol\nES6引入了一种新的原始数据类型Symbol，表示独一无二的值，它是javascript语言的第七种数据类型，是一种类似于字符串的数据类型。  \nSymbol特点\n1）Symbol值是唯一的，用来解决命名冲突的问题  \n2) Symbol值不能与其他数据进行运算  \n3) Symbol定义的对象属性不能使用for..in循坏遍历，但是可以使用Reflect.ownKeys来获取对象的所有键名\n```\n //创建Symbol\n        let s = Symbol();\n        console.log(s,typeof s);\n\n        //第一种方式\n        let s2 = Symbol('小豪');\n        let s3 = Symbol('小豪');\n        console.log(s2 == s3);//false\n\n        //第二种方式 对象\n        let s4 = Symbol.for('小豪');\n        let s5 = Symbol.for('小豪');\n        console.log(s4 == s5);//true\n\n        //不能与其他数据进行运算\n        let result = s + 100;//报错\n\n        //js七种数据类型\n        // u  undefined\n        // s  Symbol String\n        // o  object\n        // n  null number\n        // b  boolean\n```\nSymbol 值作为属性名时，该属性是公有属性不是私有属性，可以在类的外部访问。但是不会出现在 for...in 、 for...of 的循环中，也不会被 Object.keys() 、 Object.getOwnPropertyNames() 返回。如果要读取到一个对象的 Symbol 属性，可以通过 Object.getOwnPropertySymbols() 和 Reflect.ownKeys() 取到。\n```\n        let sy = Symbol(\"key1\");\n                let syObject = {};\n        syObject[sy] = \"kk\";\n        console.log(syObject);\n        \n        for (let i in syObject) {\n          console.log(i);\n        }    // 无输出\n        \n        Object.keys(syObject);                     // []\n        Object.getOwnPropertySymbols(syObject);    // [Symbol(key1)]\n        Reflect.ownKeys(syObject);                 // [Symbol(key1)]\n```\nSymbol.for()\nSymbol.for() 类似单例模式，首先会在全局搜索被登记的 Symbol 中是否有该字符串参数作为名称的 Symbol 值，如果有即返回该 Symbol 值，若没有则新建并返回一个以该字符串参数为名称的 Symbol 值，并登记在全局环境中供搜索。\n```bash\n        let yellow = Symbol(\"Yellow\");\n        let yellow1 = Symbol.for(\"Yellow\");\n        yellow === yellow1;      // false\n        \n        let yellow2 = Symbol.for(\"Yellow\");\n        yellow1 === yellow2;     // true\n```\n\nSymbol.keyFor() 返回一个已登记的 Symbol 类型值的 key ，用来检测该字符串参数作为名称的 Symbol 值是否已被登记。\n```bash\n        let yellow1 = Symbol.for(\"Yellow\");\n        Symbol.keyFor(yellow1);    // \"Yellow\"\n```","slug":"ES6-Symbol类型的认识","published":1,"updated":"2022-04-04T11:44:33.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb342001xn4vo2q4ggg0q","content":"<h3 id=\"什么是Symbol\"><a href=\"#什么是Symbol\" class=\"headerlink\" title=\"什么是Symbol\"></a>什么是Symbol</h3><p>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值，它是javascript语言的第七种数据类型，是一种类似于字符串的数据类型。<br>Symbol特点<br>1）Symbol值是唯一的，用来解决命名冲突的问题<br>2) Symbol值不能与其他数据进行运算<br>3) Symbol定义的对象属性不能使用for..in循坏遍历，但是可以使用Reflect.ownKeys来获取对象的所有键名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建Symbol</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> s = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s,<span class=\"keyword\">typeof</span> s);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//第一种方式</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> s2 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;小豪&#x27;</span>);</span><br><span class=\"line\">       <span class=\"keyword\">let</span> s3 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;小豪&#x27;</span>);</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s2 == s3);<span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//第二种方式 对象</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> s4 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;小豪&#x27;</span>);</span><br><span class=\"line\">       <span class=\"keyword\">let</span> s5 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;小豪&#x27;</span>);</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s4 == s5);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//不能与其他数据进行运算</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> result = s + <span class=\"number\">100</span>;<span class=\"comment\">//报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//js七种数据类型</span></span><br><span class=\"line\">       <span class=\"comment\">// u  undefined</span></span><br><span class=\"line\">       <span class=\"comment\">// s  Symbol String</span></span><br><span class=\"line\">       <span class=\"comment\">// o  object</span></span><br><span class=\"line\">       <span class=\"comment\">// n  null number</span></span><br><span class=\"line\">       <span class=\"comment\">// b  boolean</span></span><br></pre></td></tr></table></figure>\n<p>Symbol 值作为属性名时，该属性是公有属性不是私有属性，可以在类的外部访问。但是不会出现在 for…in 、 for…of 的循环中，也不会被 Object.keys() 、 Object.getOwnPropertyNames() 返回。如果要读取到一个对象的 Symbol 属性，可以通过 Object.getOwnPropertySymbols() 和 Reflect.ownKeys() 取到。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sy = <span class=\"constructor\">Symbol(<span class=\"string\">&quot;key1&quot;</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> syObject = &#123;&#125;;</span><br><span class=\"line\">syObject<span class=\"literal\">[<span class=\"identifier\">sy</span>]</span> = <span class=\"string\">&quot;kk&quot;</span>;</span><br><span class=\"line\">console.log(syObject);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> syObject) &#123;</span><br><span class=\"line\">  console.log(i);</span><br><span class=\"line\">&#125;    <span class=\"comment\">// 无输出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Object</span>.</span></span>keys(syObject);                     <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Object</span>.</span></span>get<span class=\"constructor\">OwnPropertySymbols(<span class=\"params\">syObject</span>)</span>;    <span class=\"comment\">// [Symbol(key1)]</span></span><br><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Reflect</span>.</span></span>own<span class=\"constructor\">Keys(<span class=\"params\">syObject</span>)</span>;                 <span class=\"comment\">// [Symbol(key1)]</span></span><br></pre></td></tr></table></figure>\n<p>Symbol.for()<br>Symbol.for() 类似单例模式，首先会在全局搜索被登记的 Symbol 中是否有该字符串参数作为名称的 Symbol 值，如果有即返回该 Symbol 值，若没有则新建并返回一个以该字符串参数为名称的 Symbol 值，并登记在全局环境中供搜索。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> yellow = Symbol(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">let</span> yellow1 = Symbol.<span class=\"keyword\">for</span>(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\">yellow === yellow1;      // <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> yellow2 = Symbol.<span class=\"keyword\">for</span>(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\">yellow1 === yellow2;     // <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>Symbol.keyFor() 返回一个已登记的 Symbol 类型值的 key ，用来检测该字符串参数作为名称的 Symbol 值是否已被登记。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> yellow1 = Symbol.<span class=\"keyword\">for</span>(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\">Symbol.keyFor(yellow1);    // <span class=\"string\">&quot;Yellow&quot;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是Symbol\"><a href=\"#什么是Symbol\" class=\"headerlink\" title=\"什么是Symbol\"></a>什么是Symbol</h3><p>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值，它是javascript语言的第七种数据类型，是一种类似于字符串的数据类型。<br>Symbol特点<br>1）Symbol值是唯一的，用来解决命名冲突的问题<br>2) Symbol值不能与其他数据进行运算<br>3) Symbol定义的对象属性不能使用for..in循坏遍历，但是可以使用Reflect.ownKeys来获取对象的所有键名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建Symbol</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> s = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s,<span class=\"keyword\">typeof</span> s);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//第一种方式</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> s2 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;小豪&#x27;</span>);</span><br><span class=\"line\">       <span class=\"keyword\">let</span> s3 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;小豪&#x27;</span>);</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s2 == s3);<span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//第二种方式 对象</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> s4 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;小豪&#x27;</span>);</span><br><span class=\"line\">       <span class=\"keyword\">let</span> s5 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;小豪&#x27;</span>);</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s4 == s5);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//不能与其他数据进行运算</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> result = s + <span class=\"number\">100</span>;<span class=\"comment\">//报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//js七种数据类型</span></span><br><span class=\"line\">       <span class=\"comment\">// u  undefined</span></span><br><span class=\"line\">       <span class=\"comment\">// s  Symbol String</span></span><br><span class=\"line\">       <span class=\"comment\">// o  object</span></span><br><span class=\"line\">       <span class=\"comment\">// n  null number</span></span><br><span class=\"line\">       <span class=\"comment\">// b  boolean</span></span><br></pre></td></tr></table></figure>\n<p>Symbol 值作为属性名时，该属性是公有属性不是私有属性，可以在类的外部访问。但是不会出现在 for…in 、 for…of 的循环中，也不会被 Object.keys() 、 Object.getOwnPropertyNames() 返回。如果要读取到一个对象的 Symbol 属性，可以通过 Object.getOwnPropertySymbols() 和 Reflect.ownKeys() 取到。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sy = <span class=\"constructor\">Symbol(<span class=\"string\">&quot;key1&quot;</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> syObject = &#123;&#125;;</span><br><span class=\"line\">syObject<span class=\"literal\">[<span class=\"identifier\">sy</span>]</span> = <span class=\"string\">&quot;kk&quot;</span>;</span><br><span class=\"line\">console.log(syObject);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> syObject) &#123;</span><br><span class=\"line\">  console.log(i);</span><br><span class=\"line\">&#125;    <span class=\"comment\">// 无输出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Object</span>.</span></span>keys(syObject);                     <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Object</span>.</span></span>get<span class=\"constructor\">OwnPropertySymbols(<span class=\"params\">syObject</span>)</span>;    <span class=\"comment\">// [Symbol(key1)]</span></span><br><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Reflect</span>.</span></span>own<span class=\"constructor\">Keys(<span class=\"params\">syObject</span>)</span>;                 <span class=\"comment\">// [Symbol(key1)]</span></span><br></pre></td></tr></table></figure>\n<p>Symbol.for()<br>Symbol.for() 类似单例模式，首先会在全局搜索被登记的 Symbol 中是否有该字符串参数作为名称的 Symbol 值，如果有即返回该 Symbol 值，若没有则新建并返回一个以该字符串参数为名称的 Symbol 值，并登记在全局环境中供搜索。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> yellow = Symbol(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">let</span> yellow1 = Symbol.<span class=\"keyword\">for</span>(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\">yellow === yellow1;      // <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> yellow2 = Symbol.<span class=\"keyword\">for</span>(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\">yellow1 === yellow2;     // <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>Symbol.keyFor() 返回一个已登记的 Symbol 类型值的 key ，用来检测该字符串参数作为名称的 Symbol 值是否已被登记。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">let</span> yellow1 = Symbol.<span class=\"keyword\">for</span>(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\">Symbol.keyFor(yellow1);    // <span class=\"string\">&quot;Yellow&quot;</span></span><br></pre></td></tr></table></figure>"},{"title":"ES6-rest参数","date":"2021-06-03T05:52:14.000Z","_content":"ES6引入rest参数，用于获取函数的实参，用来代替arguments\n### 1.首先来看一下ES5获取参数的方式\n```bash\n            function data(){\n            console.log(arguments);\n            //获取的是一个对象\n        }\n        data(\"xiaohao\",\"ahao\",\"hexo\");\n```\n\n### 2.ES6使用rest参数\n```bash\n            function date(...args){\n            console.log(args);\n        }\n        date(\"xiaohao\",\"ahao\",\"hexo\");\n        //获取的是一个数组\n```\nrest参数必须放到参数最后,否则就会报错\n```bash\n            function fn(a,b,...args) {\n            console.log(a);\n            console.log(b);\n            console.log(args);\n          }\n          fn(1,2,3,4,5,6,7,8,9);\n          //1\n          //2\n          //[3,4,5,6,7,8,9]\n```\nrest参数放在a和b中，获取最前面，都会报错。\n\n","source":"_posts/2021/06/ES6-rest参数.md","raw":"---\ntitle: ES6-rest参数\ncategories: ES6\ndate: 2021-06-03 13:52:14\ntags: \n     - ES6 \n     - rest参数\n---\nES6引入rest参数，用于获取函数的实参，用来代替arguments\n### 1.首先来看一下ES5获取参数的方式\n```bash\n            function data(){\n            console.log(arguments);\n            //获取的是一个对象\n        }\n        data(\"xiaohao\",\"ahao\",\"hexo\");\n```\n\n### 2.ES6使用rest参数\n```bash\n            function date(...args){\n            console.log(args);\n        }\n        date(\"xiaohao\",\"ahao\",\"hexo\");\n        //获取的是一个数组\n```\nrest参数必须放到参数最后,否则就会报错\n```bash\n            function fn(a,b,...args) {\n            console.log(a);\n            console.log(b);\n            console.log(args);\n          }\n          fn(1,2,3,4,5,6,7,8,9);\n          //1\n          //2\n          //[3,4,5,6,7,8,9]\n```\nrest参数放在a和b中，获取最前面，都会报错。\n\n","slug":"ES6-rest参数","published":1,"updated":"2022-04-04T11:44:33.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb3430021n4vo6v672t2n","content":"<p>ES6引入rest参数，用于获取函数的实参，用来代替arguments</p>\n<h3 id=\"1-首先来看一下ES5获取参数的方式\"><a href=\"#1-首先来看一下ES5获取参数的方式\" class=\"headerlink\" title=\"1.首先来看一下ES5获取参数的方式\"></a>1.首先来看一下ES5获取参数的方式</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">data</span></span>()&#123;</span><br><span class=\"line\">    console.log(arguments);</span><br><span class=\"line\">    //获取的是一个对象</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">data(<span class=\"string\">&quot;xiaohao&quot;</span>,<span class=\"string\">&quot;ahao&quot;</span>,<span class=\"string\">&quot;hexo&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-ES6使用rest参数\"><a href=\"#2-ES6使用rest参数\" class=\"headerlink\" title=\"2.ES6使用rest参数\"></a>2.ES6使用rest参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"built_in\">date</span>(...args)&#123;</span><br><span class=\"line\">    console.log(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">date</span>(<span class=\"string\">&quot;xiaohao&quot;</span>,<span class=\"string\">&quot;ahao&quot;</span>,<span class=\"string\">&quot;hexo&quot;</span>);</span><br><span class=\"line\">//获取的是一个数组</span><br></pre></td></tr></table></figure>\n<p>rest参数必须放到参数最后,否则就会报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">function</span> fn(a,b,...args) &#123;</span><br><span class=\"line\">  console.log(a);</span><br><span class=\"line\">  console.log(b);</span><br><span class=\"line\">  console.log(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(1,2,3,4,5,6,7,8,9);</span><br><span class=\"line\">//1</span><br><span class=\"line\">//2</span><br><span class=\"line\">//[3,4,5,6,7,8,9]</span><br></pre></td></tr></table></figure>\n<p>rest参数放在a和b中，获取最前面，都会报错。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ES6引入rest参数，用于获取函数的实参，用来代替arguments</p>\n<h3 id=\"1-首先来看一下ES5获取参数的方式\"><a href=\"#1-首先来看一下ES5获取参数的方式\" class=\"headerlink\" title=\"1.首先来看一下ES5获取参数的方式\"></a>1.首先来看一下ES5获取参数的方式</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">data</span></span>()&#123;</span><br><span class=\"line\">    console.log(arguments);</span><br><span class=\"line\">    //获取的是一个对象</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">data(<span class=\"string\">&quot;xiaohao&quot;</span>,<span class=\"string\">&quot;ahao&quot;</span>,<span class=\"string\">&quot;hexo&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-ES6使用rest参数\"><a href=\"#2-ES6使用rest参数\" class=\"headerlink\" title=\"2.ES6使用rest参数\"></a>2.ES6使用rest参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"built_in\">date</span>(...args)&#123;</span><br><span class=\"line\">    console.log(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">date</span>(<span class=\"string\">&quot;xiaohao&quot;</span>,<span class=\"string\">&quot;ahao&quot;</span>,<span class=\"string\">&quot;hexo&quot;</span>);</span><br><span class=\"line\">//获取的是一个数组</span><br></pre></td></tr></table></figure>\n<p>rest参数必须放到参数最后,否则就会报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">function</span> fn(a,b,...args) &#123;</span><br><span class=\"line\">  console.log(a);</span><br><span class=\"line\">  console.log(b);</span><br><span class=\"line\">  console.log(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(1,2,3,4,5,6,7,8,9);</span><br><span class=\"line\">//1</span><br><span class=\"line\">//2</span><br><span class=\"line\">//[3,4,5,6,7,8,9]</span><br></pre></td></tr></table></figure>\n<p>rest参数放在a和b中，获取最前面，都会报错。</p>\n"},{"title":"ES6-class","date":"2021-06-23T02:27:33.000Z","_content":"### 定义  \nES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。\n\n```bash\n<script>\n    class shouji {\n        constructor(brand,price) {\n            this.brand=brand;\n            this.price=price\n        }\n\n        call(){\n            console.log('我可以打电话')\n        }\n    }\n\n    let A = new shouji('1+',1999);\n    console.log(A)\n</script>\n```\n### 静态成员\n```bash\n<script>\n        //class静态成员\n        function phone() {  }\n        phone.name = 'shouji';\n        phone.change = function () {\n            console.log('我可以改变世界');\n          }//这两个属于函数对象，不属于实例对象\n          phone.prototype.name1 = '小豪';\n          let huawei = new phone();\n          console.log(huawei.name);//undefined\n          console.log(huawei.name1);//小豪\n\n          class Car{\n              //静态\n              static name = 'haha';\n              static change(){\n                  console.log(\"我可以改变世界\");\n              }\n          }\n          let car = new Car();\n          console.log(car.name);//undefined\n          console.log(Car.name);//haha\n    </script>\n```\n### 构造函数继承\n```bash\n<script>\n        //构造函数的继承\n        function Phone(brand,price) { \n            this.brand = brand;\n            this.price = price;\n         }\n         Phone.prototype.call = function () {\n                console.log(\"我可以打电话\");\n              }\n              function SmartPhone(brand,price,color,size) {\n                  Phone.call(this.brand,price);\n                  this.color = color;\n                  this.size = size;\n                }\n\n            //设置子级构造函数的原型\n            SmartPhone.prototype = new Phone;\n            SmartPhone.prototype.constructor = SmartPhone;\n\n            //声明子类的方法\n            SmartPhone.prototype.photo = function () {\n                console.log(\"我可以拍照\");\n              }\n              SmartPhone.prototype.playGame = function () {\n                  console.log(\"我可以玩游戏\");\n                }\n                const chuizi = new SmartPhone('锤子',2499,'黑色','5.5inch')\n                console.log(chuizi);\n    </script>\n```\n### class类继承和重写\n```bash\n    <script>\n        //类的继承\n        class Phone{\n            //构造方法\n            constructor(brand,price){\n                this.brand = brand;\n                this.price = price;\n            }\n            //父类成员属性\n            call(){\n                console.log(\"我可以打电话\");\n            }\n        }\n\n        class SmartPhone extends Phone{\n            //构造方法\n            constructor(brand,price,color,size){\n                super(brand,price);\n                this.color = color;\n                this.size = size;\n            }\n            photo(){\n                console.log(\"拍照\");\n            }\n            playGame(){\n                console.log(\"游戏\");\n            }\n            //重写父类方法\n            call(){\n                console.log(\"我可以视频通话\");\n            }\n        }\n        const xiaomi = new SmartPhone('小米',799,'黑色','4.7inch');\n        console.log((xiaomi));\n        xiaomi.call();//我乐意视频通话\n\n    </script>\n```","source":"_posts/2021/06/ES6-class.md","raw":"---\ntitle: ES6-class\ncategories: ES6\ndate: 2021-06-23 10:27:33\ntags:  \n     - ES6 \n     - class\n---\n### 定义  \nES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。\n\n```bash\n<script>\n    class shouji {\n        constructor(brand,price) {\n            this.brand=brand;\n            this.price=price\n        }\n\n        call(){\n            console.log('我可以打电话')\n        }\n    }\n\n    let A = new shouji('1+',1999);\n    console.log(A)\n</script>\n```\n### 静态成员\n```bash\n<script>\n        //class静态成员\n        function phone() {  }\n        phone.name = 'shouji';\n        phone.change = function () {\n            console.log('我可以改变世界');\n          }//这两个属于函数对象，不属于实例对象\n          phone.prototype.name1 = '小豪';\n          let huawei = new phone();\n          console.log(huawei.name);//undefined\n          console.log(huawei.name1);//小豪\n\n          class Car{\n              //静态\n              static name = 'haha';\n              static change(){\n                  console.log(\"我可以改变世界\");\n              }\n          }\n          let car = new Car();\n          console.log(car.name);//undefined\n          console.log(Car.name);//haha\n    </script>\n```\n### 构造函数继承\n```bash\n<script>\n        //构造函数的继承\n        function Phone(brand,price) { \n            this.brand = brand;\n            this.price = price;\n         }\n         Phone.prototype.call = function () {\n                console.log(\"我可以打电话\");\n              }\n              function SmartPhone(brand,price,color,size) {\n                  Phone.call(this.brand,price);\n                  this.color = color;\n                  this.size = size;\n                }\n\n            //设置子级构造函数的原型\n            SmartPhone.prototype = new Phone;\n            SmartPhone.prototype.constructor = SmartPhone;\n\n            //声明子类的方法\n            SmartPhone.prototype.photo = function () {\n                console.log(\"我可以拍照\");\n              }\n              SmartPhone.prototype.playGame = function () {\n                  console.log(\"我可以玩游戏\");\n                }\n                const chuizi = new SmartPhone('锤子',2499,'黑色','5.5inch')\n                console.log(chuizi);\n    </script>\n```\n### class类继承和重写\n```bash\n    <script>\n        //类的继承\n        class Phone{\n            //构造方法\n            constructor(brand,price){\n                this.brand = brand;\n                this.price = price;\n            }\n            //父类成员属性\n            call(){\n                console.log(\"我可以打电话\");\n            }\n        }\n\n        class SmartPhone extends Phone{\n            //构造方法\n            constructor(brand,price,color,size){\n                super(brand,price);\n                this.color = color;\n                this.size = size;\n            }\n            photo(){\n                console.log(\"拍照\");\n            }\n            playGame(){\n                console.log(\"游戏\");\n            }\n            //重写父类方法\n            call(){\n                console.log(\"我可以视频通话\");\n            }\n        }\n        const xiaomi = new SmartPhone('小米',799,'黑色','4.7inch');\n        console.log((xiaomi));\n        xiaomi.call();//我乐意视频通话\n\n    </script>\n```","slug":"ES6-class","published":1,"updated":"2022-04-04T11:44:33.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb3440024n4vo5yy9gemx","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>ES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    class shouji &#123;</span><br><span class=\"line\">        constructor(brand,price) &#123;</span><br><span class=\"line\">            this.brand=brand;</span><br><span class=\"line\">            this.price=price</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">call</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&#x27;我可以打电话&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">let</span> A = new shouji(<span class=\"string\">&#x27;1+&#x27;</span>,1999);</span><br><span class=\"line\">    console.log(A)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        //class静态成员</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">phone</span></span>() &#123;  &#125;</span><br><span class=\"line\">        phone.name = <span class=\"string\">&#x27;shouji&#x27;</span>;</span><br><span class=\"line\">        phone.change = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&#x27;我可以改变世界&#x27;</span>);</span><br><span class=\"line\">          &#125;//这两个属于函数对象，不属于实例对象</span><br><span class=\"line\">          phone.prototype.name1 = <span class=\"string\">&#x27;小豪&#x27;</span>;</span><br><span class=\"line\">          <span class=\"built_in\">let</span> huawei = new phone();</span><br><span class=\"line\">          console.log(huawei.name);//undefined</span><br><span class=\"line\">          console.log(huawei.name1);//小豪</span><br><span class=\"line\"></span><br><span class=\"line\">          class Car&#123;</span><br><span class=\"line\">              //静态</span><br><span class=\"line\">              static name = <span class=\"string\">&#x27;haha&#x27;</span>;</span><br><span class=\"line\">              static <span class=\"function\"><span class=\"title\">change</span></span>()&#123;</span><br><span class=\"line\">                  console.log(<span class=\"string\">&quot;我可以改变世界&quot;</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"built_in\">let</span> car = new Car();</span><br><span class=\"line\">          console.log(car.name);//undefined</span><br><span class=\"line\">          console.log(Car.name);//haha</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造函数继承\"><a href=\"#构造函数继承\" class=\"headerlink\" title=\"构造函数继承\"></a>构造函数继承</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        //构造函数的继承</span><br><span class=\"line\">        <span class=\"keyword\">function</span> Phone(brand,price) &#123; </span><br><span class=\"line\">            this.brand = brand;</span><br><span class=\"line\">            this.price = price;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         Phone.prototype.call = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">&quot;我可以打电话&quot;</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">function</span> SmartPhone(brand,price,color,size) &#123;</span><br><span class=\"line\">                  Phone.call(this.brand,price);</span><br><span class=\"line\">                  this.color = color;</span><br><span class=\"line\">                  this.size = size;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //设置子级构造函数的原型</span><br><span class=\"line\">            SmartPhone.prototype = new Phone;</span><br><span class=\"line\">            SmartPhone.prototype.constructor = SmartPhone;</span><br><span class=\"line\"></span><br><span class=\"line\">            //声明子类的方法</span><br><span class=\"line\">            SmartPhone.prototype.photo = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">&quot;我可以拍照&quot;</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              SmartPhone.prototype.playGame = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">                  console.log(<span class=\"string\">&quot;我可以玩游戏&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                const chuizi = new SmartPhone(<span class=\"string\">&#x27;锤子&#x27;</span>,2499,<span class=\"string\">&#x27;黑色&#x27;</span>,<span class=\"string\">&#x27;5.5inch&#x27;</span>)</span><br><span class=\"line\">                console.log(chuizi);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"class类继承和重写\"><a href=\"#class类继承和重写\" class=\"headerlink\" title=\"class类继承和重写\"></a>class类继承和重写</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    //类的继承</span><br><span class=\"line\">    class Phone&#123;</span><br><span class=\"line\">        //构造方法</span><br><span class=\"line\">        constructor(brand,price)&#123;</span><br><span class=\"line\">            this.brand = brand;</span><br><span class=\"line\">            this.price = price;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //父类成员属性</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">call</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;我可以打电话&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class SmartPhone extends Phone&#123;</span><br><span class=\"line\">        //构造方法</span><br><span class=\"line\">        constructor(brand,price,color,size)&#123;</span><br><span class=\"line\">            super(brand,price);</span><br><span class=\"line\">            this.color = color;</span><br><span class=\"line\">            this.size = size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">photo</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;拍照&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">playGame</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;游戏&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //重写父类方法</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">call</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;我可以视频通话&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const xiaomi = new SmartPhone(<span class=\"string\">&#x27;小米&#x27;</span>,799,<span class=\"string\">&#x27;黑色&#x27;</span>,<span class=\"string\">&#x27;4.7inch&#x27;</span>);</span><br><span class=\"line\">    console.log((xiaomi));</span><br><span class=\"line\">    xiaomi.call();//我乐意视频通话</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>ES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    class shouji &#123;</span><br><span class=\"line\">        constructor(brand,price) &#123;</span><br><span class=\"line\">            this.brand=brand;</span><br><span class=\"line\">            this.price=price</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">call</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&#x27;我可以打电话&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">let</span> A = new shouji(<span class=\"string\">&#x27;1+&#x27;</span>,1999);</span><br><span class=\"line\">    console.log(A)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        //class静态成员</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">phone</span></span>() &#123;  &#125;</span><br><span class=\"line\">        phone.name = <span class=\"string\">&#x27;shouji&#x27;</span>;</span><br><span class=\"line\">        phone.change = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&#x27;我可以改变世界&#x27;</span>);</span><br><span class=\"line\">          &#125;//这两个属于函数对象，不属于实例对象</span><br><span class=\"line\">          phone.prototype.name1 = <span class=\"string\">&#x27;小豪&#x27;</span>;</span><br><span class=\"line\">          <span class=\"built_in\">let</span> huawei = new phone();</span><br><span class=\"line\">          console.log(huawei.name);//undefined</span><br><span class=\"line\">          console.log(huawei.name1);//小豪</span><br><span class=\"line\"></span><br><span class=\"line\">          class Car&#123;</span><br><span class=\"line\">              //静态</span><br><span class=\"line\">              static name = <span class=\"string\">&#x27;haha&#x27;</span>;</span><br><span class=\"line\">              static <span class=\"function\"><span class=\"title\">change</span></span>()&#123;</span><br><span class=\"line\">                  console.log(<span class=\"string\">&quot;我可以改变世界&quot;</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"built_in\">let</span> car = new Car();</span><br><span class=\"line\">          console.log(car.name);//undefined</span><br><span class=\"line\">          console.log(Car.name);//haha</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造函数继承\"><a href=\"#构造函数继承\" class=\"headerlink\" title=\"构造函数继承\"></a>构造函数继承</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        //构造函数的继承</span><br><span class=\"line\">        <span class=\"keyword\">function</span> Phone(brand,price) &#123; </span><br><span class=\"line\">            this.brand = brand;</span><br><span class=\"line\">            this.price = price;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         Phone.prototype.call = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">&quot;我可以打电话&quot;</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">function</span> SmartPhone(brand,price,color,size) &#123;</span><br><span class=\"line\">                  Phone.call(this.brand,price);</span><br><span class=\"line\">                  this.color = color;</span><br><span class=\"line\">                  this.size = size;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //设置子级构造函数的原型</span><br><span class=\"line\">            SmartPhone.prototype = new Phone;</span><br><span class=\"line\">            SmartPhone.prototype.constructor = SmartPhone;</span><br><span class=\"line\"></span><br><span class=\"line\">            //声明子类的方法</span><br><span class=\"line\">            SmartPhone.prototype.photo = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">                console.log(<span class=\"string\">&quot;我可以拍照&quot;</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              SmartPhone.prototype.playGame = <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">                  console.log(<span class=\"string\">&quot;我可以玩游戏&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                const chuizi = new SmartPhone(<span class=\"string\">&#x27;锤子&#x27;</span>,2499,<span class=\"string\">&#x27;黑色&#x27;</span>,<span class=\"string\">&#x27;5.5inch&#x27;</span>)</span><br><span class=\"line\">                console.log(chuizi);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"class类继承和重写\"><a href=\"#class类继承和重写\" class=\"headerlink\" title=\"class类继承和重写\"></a>class类继承和重写</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    //类的继承</span><br><span class=\"line\">    class Phone&#123;</span><br><span class=\"line\">        //构造方法</span><br><span class=\"line\">        constructor(brand,price)&#123;</span><br><span class=\"line\">            this.brand = brand;</span><br><span class=\"line\">            this.price = price;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //父类成员属性</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">call</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;我可以打电话&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class SmartPhone extends Phone&#123;</span><br><span class=\"line\">        //构造方法</span><br><span class=\"line\">        constructor(brand,price,color,size)&#123;</span><br><span class=\"line\">            super(brand,price);</span><br><span class=\"line\">            this.color = color;</span><br><span class=\"line\">            this.size = size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">photo</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;拍照&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">playGame</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;游戏&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //重写父类方法</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">call</span></span>()&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;我可以视频通话&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const xiaomi = new SmartPhone(<span class=\"string\">&#x27;小米&#x27;</span>,799,<span class=\"string\">&#x27;黑色&#x27;</span>,<span class=\"string\">&#x27;4.7inch&#x27;</span>);</span><br><span class=\"line\">    console.log((xiaomi));</span><br><span class=\"line\">    xiaomi.call();//我乐意视频通话</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ES6-函数参数的默认值设置","date":"2021-06-01T15:16:37.000Z","_content":"### ES6 允许给函数参数赋值初始值\n### 1.形参初始值  具有默认值的参数，一般位置要靠后(潜规则)\n```bash\n            function add(a,b,c = 10) {\n                return a + b + c;\n              }\n              let result = add(1,2);\n              console.log(result);//13\n            //如果把c放在a和b中间，b就会没有赋值，打印的是NAN\n```\n\n### 2.与解构赋值结合\n```bash\n            function connect({host,username,password,port}) {\n                // console.log(option.username);//xiaohao\n                // console.log(option.password);//123456\n                //如果这样写，每次都要调用option，麻烦，可以直接使用解构赋值\n                console.log(host);//127.0.0.1\n                console.log(username);//xiaohao\n                console.log(password);//123456\n                console.log(port);//3306\n\n                //形参可以写成host=\"127.1.1.1\"默认值,如果实参没有host\n                //那console.log(host)就会打印默认值，否则就打印实参\n              }\n              connect({\n                  host:'127.0.0.1',\n                  username:'xiaohao',\n                  password:'123456',\n                  port:3306\n              })\n```","source":"_posts/2021/06/ES6-函数参数的默认值设置.md","raw":"---\ntitle: ES6-函数参数的默认值设置\ncategories: ES6\ndate: 2021-06-01 23:16:37\ntags: \n     - ES6 \n     - 函数参数的默认值设置\n---\n### ES6 允许给函数参数赋值初始值\n### 1.形参初始值  具有默认值的参数，一般位置要靠后(潜规则)\n```bash\n            function add(a,b,c = 10) {\n                return a + b + c;\n              }\n              let result = add(1,2);\n              console.log(result);//13\n            //如果把c放在a和b中间，b就会没有赋值，打印的是NAN\n```\n\n### 2.与解构赋值结合\n```bash\n            function connect({host,username,password,port}) {\n                // console.log(option.username);//xiaohao\n                // console.log(option.password);//123456\n                //如果这样写，每次都要调用option，麻烦，可以直接使用解构赋值\n                console.log(host);//127.0.0.1\n                console.log(username);//xiaohao\n                console.log(password);//123456\n                console.log(port);//3306\n\n                //形参可以写成host=\"127.1.1.1\"默认值,如果实参没有host\n                //那console.log(host)就会打印默认值，否则就打印实参\n              }\n              connect({\n                  host:'127.0.0.1',\n                  username:'xiaohao',\n                  password:'123456',\n                  port:3306\n              })\n```","slug":"ES6-函数参数的默认值设置","published":1,"updated":"2022-04-04T11:44:33.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb3480027n4voc4x1406i","content":"<h3 id=\"ES6-允许给函数参数赋值初始值\"><a href=\"#ES6-允许给函数参数赋值初始值\" class=\"headerlink\" title=\"ES6 允许给函数参数赋值初始值\"></a>ES6 允许给函数参数赋值初始值</h3><h3 id=\"1-形参初始值-具有默认值的参数，一般位置要靠后-潜规则\"><a href=\"#1-形参初始值-具有默认值的参数，一般位置要靠后-潜规则\" class=\"headerlink\" title=\"1.形参初始值  具有默认值的参数，一般位置要靠后(潜规则)\"></a>1.形参初始值  具有默认值的参数，一般位置要靠后(潜规则)</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> add(a,b,c = 10) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> a + b + c;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">let</span> result = add(1,2);</span><br><span class=\"line\">  console.log(result);//13</span><br><span class=\"line\">//如果把c放在a和b中间，b就会没有赋值，打印的是NAN</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-与解构赋值结合\"><a href=\"#2-与解构赋值结合\" class=\"headerlink\" title=\"2.与解构赋值结合\"></a>2.与解构赋值结合</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> connect(&#123;host,username,password,port&#125;) &#123;</span><br><span class=\"line\">    // console.log(option.username);//xiaohao</span><br><span class=\"line\">    // console.log(option.password);//123456</span><br><span class=\"line\">    //如果这样写，每次都要调用option，麻烦，可以直接使用解构赋值</span><br><span class=\"line\">    console.log(host);//127.0.0.1</span><br><span class=\"line\">    console.log(username);//xiaohao</span><br><span class=\"line\">    console.log(password);//123456</span><br><span class=\"line\">    console.log(port);//3306</span><br><span class=\"line\"></span><br><span class=\"line\">    //形参可以写成host=<span class=\"string\">&quot;127.1.1.1&quot;</span>默认值,如果实参没有host</span><br><span class=\"line\">    //那console.log(host)就会打印默认值，否则就打印实参</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  connect(&#123;</span><br><span class=\"line\">      host:<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,</span><br><span class=\"line\">      username:<span class=\"string\">&#x27;xiaohao&#x27;</span>,</span><br><span class=\"line\">      password:<span class=\"string\">&#x27;123456&#x27;</span>,</span><br><span class=\"line\">      port:3306</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ES6-允许给函数参数赋值初始值\"><a href=\"#ES6-允许给函数参数赋值初始值\" class=\"headerlink\" title=\"ES6 允许给函数参数赋值初始值\"></a>ES6 允许给函数参数赋值初始值</h3><h3 id=\"1-形参初始值-具有默认值的参数，一般位置要靠后-潜规则\"><a href=\"#1-形参初始值-具有默认值的参数，一般位置要靠后-潜规则\" class=\"headerlink\" title=\"1.形参初始值  具有默认值的参数，一般位置要靠后(潜规则)\"></a>1.形参初始值  具有默认值的参数，一般位置要靠后(潜规则)</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> add(a,b,c = 10) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> a + b + c;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">let</span> result = add(1,2);</span><br><span class=\"line\">  console.log(result);//13</span><br><span class=\"line\">//如果把c放在a和b中间，b就会没有赋值，打印的是NAN</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-与解构赋值结合\"><a href=\"#2-与解构赋值结合\" class=\"headerlink\" title=\"2.与解构赋值结合\"></a>2.与解构赋值结合</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> connect(&#123;host,username,password,port&#125;) &#123;</span><br><span class=\"line\">    // console.log(option.username);//xiaohao</span><br><span class=\"line\">    // console.log(option.password);//123456</span><br><span class=\"line\">    //如果这样写，每次都要调用option，麻烦，可以直接使用解构赋值</span><br><span class=\"line\">    console.log(host);//127.0.0.1</span><br><span class=\"line\">    console.log(username);//xiaohao</span><br><span class=\"line\">    console.log(password);//123456</span><br><span class=\"line\">    console.log(port);//3306</span><br><span class=\"line\"></span><br><span class=\"line\">    //形参可以写成host=<span class=\"string\">&quot;127.1.1.1&quot;</span>默认值,如果实参没有host</span><br><span class=\"line\">    //那console.log(host)就会打印默认值，否则就打印实参</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  connect(&#123;</span><br><span class=\"line\">      host:<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,</span><br><span class=\"line\">      username:<span class=\"string\">&#x27;xiaohao&#x27;</span>,</span><br><span class=\"line\">      password:<span class=\"string\">&#x27;123456&#x27;</span>,</span><br><span class=\"line\">      port:3306</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>"},{"title":"ES6-对象方法扩展","date":"2021-06-23T04:25:09.000Z","_content":"```bash\n<script>\n        // 1.Object.is 判断两个值是否完全相等\n        console.log(Object.is(120,120));//true  和===差不多\n        console.log(Object.is(NaN,NaN));//true\n        console.log(NaN === NaN);//false\n\n        //2.Object.assign对象的合并\n        const config1 = {\n            host: 'localhost',\n            port: 3306,\n            name: 'root',\n            pass: 'root',\n            test1: 'test'\n        };\n        const config2 = {\n            host: 'http://xiaohao.com',\n            port: 33060,\n            name: 'xiaohao',\n            pass: 'i love you',\n            test2: 'test2'\n        };\n        console.log(Object.assign(config1,config2));//如果同名的话，后面的对象会覆盖前面的对象\n        //3.Object.setPrototypeOf 设置原型对象 Object.getPrototypeof\n        const school = {\n        name:'小豪'\n    }\n    const cities = {\n        xiaoqu:['北京','上海','广州']\n    }\n    Object.setPrototypeOf(school,cities)\n    console.log(Object.getPrototypeOf(school))  //{xiaoqu: Array(2)}\n    console.log(school)  //{name: \"小豪\"}\n    </script>\n```","source":"_posts/2021/06/ES6-对象方法扩展.md","raw":"---\ntitle: ES6-对象方法扩展\ncategories: ES6\ndate: 2021-06-23 12:25:09\ntags:  \n     - ES6 \n     - 对象方法扩展\n---\n```bash\n<script>\n        // 1.Object.is 判断两个值是否完全相等\n        console.log(Object.is(120,120));//true  和===差不多\n        console.log(Object.is(NaN,NaN));//true\n        console.log(NaN === NaN);//false\n\n        //2.Object.assign对象的合并\n        const config1 = {\n            host: 'localhost',\n            port: 3306,\n            name: 'root',\n            pass: 'root',\n            test1: 'test'\n        };\n        const config2 = {\n            host: 'http://xiaohao.com',\n            port: 33060,\n            name: 'xiaohao',\n            pass: 'i love you',\n            test2: 'test2'\n        };\n        console.log(Object.assign(config1,config2));//如果同名的话，后面的对象会覆盖前面的对象\n        //3.Object.setPrototypeOf 设置原型对象 Object.getPrototypeof\n        const school = {\n        name:'小豪'\n    }\n    const cities = {\n        xiaoqu:['北京','上海','广州']\n    }\n    Object.setPrototypeOf(school,cities)\n    console.log(Object.getPrototypeOf(school))  //{xiaoqu: Array(2)}\n    console.log(school)  //{name: \"小豪\"}\n    </script>\n```","slug":"ES6-对象方法扩展","published":1,"updated":"2022-04-04T11:44:33.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb349002an4vofcsqhgdt","content":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        // 1.Object.is 判断两个值是否完全相等</span><br><span class=\"line\">        console.log(Object.is(120,120));//true  和===差不多</span><br><span class=\"line\">        console.log(Object.is(NaN,NaN));//true</span><br><span class=\"line\">        console.log(NaN === NaN);//false</span><br><span class=\"line\"></span><br><span class=\"line\">        //2.Object.assign对象的合并</span><br><span class=\"line\">        const config1 = &#123;</span><br><span class=\"line\">            host: <span class=\"string\">&#x27;localhost&#x27;</span>,</span><br><span class=\"line\">            port: 3306,</span><br><span class=\"line\">            name: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">            pass: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">            test1: <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        const config2 = &#123;</span><br><span class=\"line\">            host: <span class=\"string\">&#x27;http://xiaohao.com&#x27;</span>,</span><br><span class=\"line\">            port: 33060,</span><br><span class=\"line\">            name: <span class=\"string\">&#x27;xiaohao&#x27;</span>,</span><br><span class=\"line\">            pass: <span class=\"string\">&#x27;i love you&#x27;</span>,</span><br><span class=\"line\">            test2: <span class=\"string\">&#x27;test2&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        console.log(Object.assign(config1,config2));//如果同名的话，后面的对象会覆盖前面的对象</span><br><span class=\"line\">        //3.Object.setPrototypeOf 设置原型对象 Object.getPrototypeof</span><br><span class=\"line\">        const school = &#123;</span><br><span class=\"line\">        name:<span class=\"string\">&#x27;小豪&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const cities = &#123;</span><br><span class=\"line\">        xiaoqu:[<span class=\"string\">&#x27;北京&#x27;</span>,<span class=\"string\">&#x27;上海&#x27;</span>,<span class=\"string\">&#x27;广州&#x27;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Object.setPrototypeOf(school,cities)</span><br><span class=\"line\">    console.log(Object.getPrototypeOf(school))  //&#123;xiaoqu: Array(2)&#125;</span><br><span class=\"line\">    console.log(school)  //&#123;name: <span class=\"string\">&quot;小豪&quot;</span>&#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        // 1.Object.is 判断两个值是否完全相等</span><br><span class=\"line\">        console.log(Object.is(120,120));//true  和===差不多</span><br><span class=\"line\">        console.log(Object.is(NaN,NaN));//true</span><br><span class=\"line\">        console.log(NaN === NaN);//false</span><br><span class=\"line\"></span><br><span class=\"line\">        //2.Object.assign对象的合并</span><br><span class=\"line\">        const config1 = &#123;</span><br><span class=\"line\">            host: <span class=\"string\">&#x27;localhost&#x27;</span>,</span><br><span class=\"line\">            port: 3306,</span><br><span class=\"line\">            name: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">            pass: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">            test1: <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        const config2 = &#123;</span><br><span class=\"line\">            host: <span class=\"string\">&#x27;http://xiaohao.com&#x27;</span>,</span><br><span class=\"line\">            port: 33060,</span><br><span class=\"line\">            name: <span class=\"string\">&#x27;xiaohao&#x27;</span>,</span><br><span class=\"line\">            pass: <span class=\"string\">&#x27;i love you&#x27;</span>,</span><br><span class=\"line\">            test2: <span class=\"string\">&#x27;test2&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        console.log(Object.assign(config1,config2));//如果同名的话，后面的对象会覆盖前面的对象</span><br><span class=\"line\">        //3.Object.setPrototypeOf 设置原型对象 Object.getPrototypeof</span><br><span class=\"line\">        const school = &#123;</span><br><span class=\"line\">        name:<span class=\"string\">&#x27;小豪&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const cities = &#123;</span><br><span class=\"line\">        xiaoqu:[<span class=\"string\">&#x27;北京&#x27;</span>,<span class=\"string\">&#x27;上海&#x27;</span>,<span class=\"string\">&#x27;广州&#x27;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Object.setPrototypeOf(school,cities)</span><br><span class=\"line\">    console.log(Object.getPrototypeOf(school))  //&#123;xiaoqu: Array(2)&#125;</span><br><span class=\"line\">    console.log(school)  //&#123;name: <span class=\"string\">&quot;小豪&quot;</span>&#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ES6-扩展运算符","date":"2021-06-03T06:05:39.000Z","_content":"### [..]扩展运算符能将[数组]转换为逗号分隔的[参数序列]\n```bash\n        //声明一个数组...\n        const tfboys = ['易烊千玺','王源','王俊凯'];\n        \n        //声明一个函数\n        function wang() {\n            console.log(arguments);\n          }\n          wang(tfboys);//0: (3) [\"易烊千玺\", \"王源\", \"王俊凯\"] 只有一个\n          wang(...tfboys);\n        //   0: \"易烊千玺\"\n        //   1: \"王源\"\n        //   2: \"王俊凯\"\n```\n### 扩展运算符的应用\n1)数组的合并\n```bash\n        const kuaizi = ['王太利','肖央'];\n        const fenghuang = ['曾毅','玲花'];\n        //以前的做法就是concat()\n        // const zuixuanxiaopingguo = kuaizi.concat(fenghuang);\n\n        //但现在可以使用扩展运算符\n        const  zuixuanxiaopingguo = [...kuaizi,...fenghuang];\n        console.log(zuixuanxiaopingguo);//['王太利','肖央','曾毅','玲花']\n```\n\n2)数组克隆\n```bash\n        const sanzhihua = ['E','G','M'];\n        const sanyecao = [...sanzhihua];\n        console.log(sanyecao);//['E','G','M']\n```\n\n3)将伪数组转为真正的数组\n```bash \n<body>\n    <div></div>\n    <div></div>\n    <div></div>\n    <script>\n        const divs = document.querySelectorAll('div');\n        const divArr = [...divs];\n        console.log(divArr);//[div,div,div] 变成真正的数组    \n    </script>\n</body>\n```\n\n\n","source":"_posts/2021/06/ES6-扩展运算符.md","raw":"---\ntitle: ES6-扩展运算符\ncategories: ES6\ndate: 2021-06-03 14:05:39\ntags: \n     - ES6 \n     - 扩展运算符\n---\n### [..]扩展运算符能将[数组]转换为逗号分隔的[参数序列]\n```bash\n        //声明一个数组...\n        const tfboys = ['易烊千玺','王源','王俊凯'];\n        \n        //声明一个函数\n        function wang() {\n            console.log(arguments);\n          }\n          wang(tfboys);//0: (3) [\"易烊千玺\", \"王源\", \"王俊凯\"] 只有一个\n          wang(...tfboys);\n        //   0: \"易烊千玺\"\n        //   1: \"王源\"\n        //   2: \"王俊凯\"\n```\n### 扩展运算符的应用\n1)数组的合并\n```bash\n        const kuaizi = ['王太利','肖央'];\n        const fenghuang = ['曾毅','玲花'];\n        //以前的做法就是concat()\n        // const zuixuanxiaopingguo = kuaizi.concat(fenghuang);\n\n        //但现在可以使用扩展运算符\n        const  zuixuanxiaopingguo = [...kuaizi,...fenghuang];\n        console.log(zuixuanxiaopingguo);//['王太利','肖央','曾毅','玲花']\n```\n\n2)数组克隆\n```bash\n        const sanzhihua = ['E','G','M'];\n        const sanyecao = [...sanzhihua];\n        console.log(sanyecao);//['E','G','M']\n```\n\n3)将伪数组转为真正的数组\n```bash \n<body>\n    <div></div>\n    <div></div>\n    <div></div>\n    <script>\n        const divs = document.querySelectorAll('div');\n        const divArr = [...divs];\n        console.log(divArr);//[div,div,div] 变成真正的数组    \n    </script>\n</body>\n```\n\n\n","slug":"ES6-扩展运算符","published":1,"updated":"2022-04-04T11:44:33.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb34f002en4vo0drg7fh2","content":"<h3 id=\"扩展运算符能将-数组-转换为逗号分隔的-参数序列\"><a href=\"#扩展运算符能将-数组-转换为逗号分隔的-参数序列\" class=\"headerlink\" title=\"[..]扩展运算符能将[数组]转换为逗号分隔的[参数序列]\"></a>[..]扩展运算符能将[数组]转换为逗号分隔的[参数序列]</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//声明一个数组...</span><br><span class=\"line\">const tfboys = [<span class=\"string\">&#x27;易烊千玺&#x27;</span>,<span class=\"string\">&#x27;王源&#x27;</span>,<span class=\"string\">&#x27;王俊凯&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">//声明一个函数</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">wang</span></span>() &#123;</span><br><span class=\"line\">    console.log(arguments);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  wang(tfboys);//0: (3) [<span class=\"string\">&quot;易烊千玺&quot;</span>, <span class=\"string\">&quot;王源&quot;</span>, <span class=\"string\">&quot;王俊凯&quot;</span>] 只有一个</span><br><span class=\"line\">  wang(...tfboys);</span><br><span class=\"line\">//   0: <span class=\"string\">&quot;易烊千玺&quot;</span></span><br><span class=\"line\">//   1: <span class=\"string\">&quot;王源&quot;</span></span><br><span class=\"line\">//   2: <span class=\"string\">&quot;王俊凯&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"扩展运算符的应用\"><a href=\"#扩展运算符的应用\" class=\"headerlink\" title=\"扩展运算符的应用\"></a>扩展运算符的应用</h3><p>1)数组的合并</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const kuaizi = [<span class=\"string\">&#x27;王太利&#x27;</span>,<span class=\"string\">&#x27;肖央&#x27;</span>];</span><br><span class=\"line\">const fenghuang = [<span class=\"string\">&#x27;曾毅&#x27;</span>,<span class=\"string\">&#x27;玲花&#x27;</span>];</span><br><span class=\"line\">//以前的做法就是concat()</span><br><span class=\"line\">// const zuixuanxiaopingguo = kuaizi.concat(fenghuang);</span><br><span class=\"line\"></span><br><span class=\"line\">//但现在可以使用扩展运算符</span><br><span class=\"line\">const  zuixuanxiaopingguo = [...kuaizi,...fenghuang];</span><br><span class=\"line\">console.log(zuixuanxiaopingguo);//[<span class=\"string\">&#x27;王太利&#x27;</span>,<span class=\"string\">&#x27;肖央&#x27;</span>,<span class=\"string\">&#x27;曾毅&#x27;</span>,<span class=\"string\">&#x27;玲花&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>2)数组克隆</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const sanzhihua = [<span class=\"string\">&#x27;E&#x27;</span>,<span class=\"string\">&#x27;G&#x27;</span>,<span class=\"string\">&#x27;M&#x27;</span>];</span><br><span class=\"line\">const sanyecao = [...sanzhihua];</span><br><span class=\"line\">console.log(sanyecao);//[<span class=\"string\">&#x27;E&#x27;</span>,<span class=\"string\">&#x27;G&#x27;</span>,<span class=\"string\">&#x27;M&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>3)将伪数组转为真正的数组</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        const divs = document.querySelectorAll(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">        const divArr = [...divs];</span><br><span class=\"line\">        console.log(divArr);//[div,div,div] 变成真正的数组    </span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"扩展运算符能将-数组-转换为逗号分隔的-参数序列\"><a href=\"#扩展运算符能将-数组-转换为逗号分隔的-参数序列\" class=\"headerlink\" title=\"[..]扩展运算符能将[数组]转换为逗号分隔的[参数序列]\"></a>[..]扩展运算符能将[数组]转换为逗号分隔的[参数序列]</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//声明一个数组...</span><br><span class=\"line\">const tfboys = [<span class=\"string\">&#x27;易烊千玺&#x27;</span>,<span class=\"string\">&#x27;王源&#x27;</span>,<span class=\"string\">&#x27;王俊凯&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">//声明一个函数</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">wang</span></span>() &#123;</span><br><span class=\"line\">    console.log(arguments);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  wang(tfboys);//0: (3) [<span class=\"string\">&quot;易烊千玺&quot;</span>, <span class=\"string\">&quot;王源&quot;</span>, <span class=\"string\">&quot;王俊凯&quot;</span>] 只有一个</span><br><span class=\"line\">  wang(...tfboys);</span><br><span class=\"line\">//   0: <span class=\"string\">&quot;易烊千玺&quot;</span></span><br><span class=\"line\">//   1: <span class=\"string\">&quot;王源&quot;</span></span><br><span class=\"line\">//   2: <span class=\"string\">&quot;王俊凯&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"扩展运算符的应用\"><a href=\"#扩展运算符的应用\" class=\"headerlink\" title=\"扩展运算符的应用\"></a>扩展运算符的应用</h3><p>1)数组的合并</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const kuaizi = [<span class=\"string\">&#x27;王太利&#x27;</span>,<span class=\"string\">&#x27;肖央&#x27;</span>];</span><br><span class=\"line\">const fenghuang = [<span class=\"string\">&#x27;曾毅&#x27;</span>,<span class=\"string\">&#x27;玲花&#x27;</span>];</span><br><span class=\"line\">//以前的做法就是concat()</span><br><span class=\"line\">// const zuixuanxiaopingguo = kuaizi.concat(fenghuang);</span><br><span class=\"line\"></span><br><span class=\"line\">//但现在可以使用扩展运算符</span><br><span class=\"line\">const  zuixuanxiaopingguo = [...kuaizi,...fenghuang];</span><br><span class=\"line\">console.log(zuixuanxiaopingguo);//[<span class=\"string\">&#x27;王太利&#x27;</span>,<span class=\"string\">&#x27;肖央&#x27;</span>,<span class=\"string\">&#x27;曾毅&#x27;</span>,<span class=\"string\">&#x27;玲花&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>2)数组克隆</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">const sanzhihua = [<span class=\"string\">&#x27;E&#x27;</span>,<span class=\"string\">&#x27;G&#x27;</span>,<span class=\"string\">&#x27;M&#x27;</span>];</span><br><span class=\"line\">const sanyecao = [...sanzhihua];</span><br><span class=\"line\">console.log(sanyecao);//[<span class=\"string\">&#x27;E&#x27;</span>,<span class=\"string\">&#x27;G&#x27;</span>,<span class=\"string\">&#x27;M&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>3)将伪数组转为真正的数组</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        const divs = document.querySelectorAll(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">        const divArr = [...divs];</span><br><span class=\"line\">        console.log(divArr);//[div,div,div] 变成真正的数组    </span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"ES6-数值扩展","date":"2021-06-23T04:10:35.000Z","_content":"\n```bash\n<script>\n   // Number.EPSILON是 JavaScript的最小精度，属性的值接近于 2.22044...E-16\n   function equal(a,b){\n       if(Math.abs(a-b) < Number.EPSILON){\n           return true;\n       }else {\n           return false;\n       }\n   }\n\n   console.log(equal(0.1 + 0.2 === 0.3))  //false\n   console.log(equal(0.1+0.2,0.3))  //true\n```\n```bash\n   //二进制和八进制\n   let b = 0b1010; //2进制\n   let o = 0o777;  //8进制\n   let d = 100;    //10进制\n   let x = 0xff;   //16进制\n   console.log(x)   //255\n\n   //检测一个数是否为有限数\n   console.log(Number.isFinite(100));  //true\n   console.log(Number.isFinite(100/0));  //false\n   console.log(Number.isFinite(Infinity));  //false\n\n   //检测一个数值是否为NaN\n   console.log(Number.isNaN(123))  //false\n\n   //字符串转整数\n   console.log(Number.parseInt('5213123love')); //5213123\n   console.log(Number.parseFloat('5.123123神器')); //5.123123\n\n   //判断是否为整数\n   console.log(Number.isInteger(5));  //true\n   console.log(Number.isInteger(2.5)); //false\n   \n   //将小数部分抹除\n   console.log(Math.trunc(3.45345345345)) //3\n\n   //检测一个数到底是正数、负数、还是0\n   console.log(Math.sign(100)) //1\n   console.log(Math.sign(0))  //0\n   console.log(Math.sign(-123)) //-1\n</script>\n```\n","source":"_posts/2021/06/ES6-数值扩展.md","raw":"---\ntitle: ES6-数值扩展\ncategories: ES6\ndate: 2021-06-23 12:10:35\ntags:  \n     - ES6 \n     - 数值扩展\n---\n\n```bash\n<script>\n   // Number.EPSILON是 JavaScript的最小精度，属性的值接近于 2.22044...E-16\n   function equal(a,b){\n       if(Math.abs(a-b) < Number.EPSILON){\n           return true;\n       }else {\n           return false;\n       }\n   }\n\n   console.log(equal(0.1 + 0.2 === 0.3))  //false\n   console.log(equal(0.1+0.2,0.3))  //true\n```\n```bash\n   //二进制和八进制\n   let b = 0b1010; //2进制\n   let o = 0o777;  //8进制\n   let d = 100;    //10进制\n   let x = 0xff;   //16进制\n   console.log(x)   //255\n\n   //检测一个数是否为有限数\n   console.log(Number.isFinite(100));  //true\n   console.log(Number.isFinite(100/0));  //false\n   console.log(Number.isFinite(Infinity));  //false\n\n   //检测一个数值是否为NaN\n   console.log(Number.isNaN(123))  //false\n\n   //字符串转整数\n   console.log(Number.parseInt('5213123love')); //5213123\n   console.log(Number.parseFloat('5.123123神器')); //5.123123\n\n   //判断是否为整数\n   console.log(Number.isInteger(5));  //true\n   console.log(Number.isInteger(2.5)); //false\n   \n   //将小数部分抹除\n   console.log(Math.trunc(3.45345345345)) //3\n\n   //检测一个数到底是正数、负数、还是0\n   console.log(Math.sign(100)) //1\n   console.log(Math.sign(0))  //0\n   console.log(Math.sign(-123)) //-1\n</script>\n```\n","slug":"ES6-数值扩展","published":1,"updated":"2022-04-04T11:44:33.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb34h002hn4vo3uj619o8","content":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">   // Number.EPSILON是 JavaScript的最小精度，属性的值接近于 2.22044...E-16</span><br><span class=\"line\">   <span class=\"keyword\">function</span> equal(a,b)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(Math.abs(a-b) &lt; Number.EPSILON)&#123;</span><br><span class=\"line\">           <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   console.log(equal(0.1 + 0.2 === 0.3))  //false</span><br><span class=\"line\">   console.log(equal(0.1+0.2,0.3))  //true</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">   //二进制和八进制</span><br><span class=\"line\">   <span class=\"built_in\">let</span> b = 0b1010; //2进制</span><br><span class=\"line\">   <span class=\"built_in\">let</span> o = 0o777;  //8进制</span><br><span class=\"line\">   <span class=\"built_in\">let</span> d = 100;    //10进制</span><br><span class=\"line\">   <span class=\"built_in\">let</span> x = 0xff;   //16进制</span><br><span class=\"line\">   console.log(x)   //255</span><br><span class=\"line\"></span><br><span class=\"line\">   //检测一个数是否为有限数</span><br><span class=\"line\">   console.log(Number.isFinite(100));  //true</span><br><span class=\"line\">   console.log(Number.isFinite(100/0));  //false</span><br><span class=\"line\">   console.log(Number.isFinite(Infinity));  //false</span><br><span class=\"line\"></span><br><span class=\"line\">   //检测一个数值是否为NaN</span><br><span class=\"line\">   console.log(Number.isNaN(123))  //false</span><br><span class=\"line\"></span><br><span class=\"line\">   //字符串转整数</span><br><span class=\"line\">   console.log(Number.parseInt(<span class=\"string\">&#x27;5213123love&#x27;</span>)); //5213123</span><br><span class=\"line\">   console.log(Number.parseFloat(<span class=\"string\">&#x27;5.123123神器&#x27;</span>)); //5.123123</span><br><span class=\"line\"></span><br><span class=\"line\">   //判断是否为整数</span><br><span class=\"line\">   console.log(Number.isInteger(5));  //true</span><br><span class=\"line\">   console.log(Number.isInteger(2.5)); //false</span><br><span class=\"line\">   </span><br><span class=\"line\">   //将小数部分抹除</span><br><span class=\"line\">   console.log(Math.trunc(3.45345345345)) //3</span><br><span class=\"line\"></span><br><span class=\"line\">   //检测一个数到底是正数、负数、还是0</span><br><span class=\"line\">   console.log(Math.sign(100)) //1</span><br><span class=\"line\">   console.log(Math.sign(0))  //0</span><br><span class=\"line\">   console.log(Math.sign(-123)) //-1</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">   // Number.EPSILON是 JavaScript的最小精度，属性的值接近于 2.22044...E-16</span><br><span class=\"line\">   <span class=\"keyword\">function</span> equal(a,b)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(Math.abs(a-b) &lt; Number.EPSILON)&#123;</span><br><span class=\"line\">           <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   console.log(equal(0.1 + 0.2 === 0.3))  //false</span><br><span class=\"line\">   console.log(equal(0.1+0.2,0.3))  //true</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">   //二进制和八进制</span><br><span class=\"line\">   <span class=\"built_in\">let</span> b = 0b1010; //2进制</span><br><span class=\"line\">   <span class=\"built_in\">let</span> o = 0o777;  //8进制</span><br><span class=\"line\">   <span class=\"built_in\">let</span> d = 100;    //10进制</span><br><span class=\"line\">   <span class=\"built_in\">let</span> x = 0xff;   //16进制</span><br><span class=\"line\">   console.log(x)   //255</span><br><span class=\"line\"></span><br><span class=\"line\">   //检测一个数是否为有限数</span><br><span class=\"line\">   console.log(Number.isFinite(100));  //true</span><br><span class=\"line\">   console.log(Number.isFinite(100/0));  //false</span><br><span class=\"line\">   console.log(Number.isFinite(Infinity));  //false</span><br><span class=\"line\"></span><br><span class=\"line\">   //检测一个数值是否为NaN</span><br><span class=\"line\">   console.log(Number.isNaN(123))  //false</span><br><span class=\"line\"></span><br><span class=\"line\">   //字符串转整数</span><br><span class=\"line\">   console.log(Number.parseInt(<span class=\"string\">&#x27;5213123love&#x27;</span>)); //5213123</span><br><span class=\"line\">   console.log(Number.parseFloat(<span class=\"string\">&#x27;5.123123神器&#x27;</span>)); //5.123123</span><br><span class=\"line\"></span><br><span class=\"line\">   //判断是否为整数</span><br><span class=\"line\">   console.log(Number.isInteger(5));  //true</span><br><span class=\"line\">   console.log(Number.isInteger(2.5)); //false</span><br><span class=\"line\">   </span><br><span class=\"line\">   //将小数部分抹除</span><br><span class=\"line\">   console.log(Math.trunc(3.45345345345)) //3</span><br><span class=\"line\"></span><br><span class=\"line\">   //检测一个数到底是正数、负数、还是0</span><br><span class=\"line\">   console.log(Math.sign(100)) //1</span><br><span class=\"line\">   console.log(Math.sign(0))  //0</span><br><span class=\"line\">   console.log(Math.sign(-123)) //-1</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"ES6-迭代器","date":"2021-06-09T09:03:06.000Z","_content":"### 什么是迭代器\n1.介绍：迭代器(lterator)是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署lterator接口，就可以完成遍历操作。  \n2.原理：创建一个指针对象，指向数据结构的起始位置，第一次调用==next（）==方法，指针自动指向数据结构第一个成员，接下来不断调用next（），指针一直往后移动，直到指向最后一个成员，没调用next（）返回一个包含value和done属性的对象。  \n\n```bash\n   <script>\n        //声明一个数组\n        const xiyou = ['唐僧','孙悟空','猪八戒','沙僧'];\n        for(let v in xiyou){ //保存键名\n            console.log(v);\n        }\n        for(let v of xiyou){ //保存键值\n            console.log(v);\n        }\n\n        let iterator = xiyou[Symbol.iterator]();\n        //调用对象的next方法，每次返回value的值，和done的状态\n        console.log(iterator.next());//{value: \"唐僧\", done: false}\n        console.log(iterator.next());//{value: \"孙悟空\", done: false}\n        console.log(iterator.next());//{value: \"猪八戒\", done: false}\n        console.log(iterator.next());//{value: \"沙僧\", done: false}\n        console.log(iterator.next());//{value: undefined, done: true}\n\n        //应用\n        const banji = {\n    name : \"终极一班\",\n    stus: [\n        'aa',\n        'bb',\n        'cc',\n        'dd'\n    ],\n    [Symbol.iterator](){\n        let index = 0;\n        let _this = this;\n        return {\n            next: () => {\n                if(index < this.stus.length){\n                    const result = {value: _this.stus[index],done: false};\n                    //下标自增\n                    index++;\n                    //返回结果\n                    return result;\n                }else {\n                    return {value: underfined,done:true};\n                }\n            }\n        }\n    }\n}\nfor(let v of banji){\n    console.log(v);  // aa bb cc dd\n}\n        \n    </script>\n```","source":"_posts/2021/06/ES6-迭代器.md","raw":"---\ntitle: ES6-迭代器\ncategories: ES6\ndate: 2021-06-09 17:03:06\ntags: \n     - ES6 \n     - 迭代器\n---\n### 什么是迭代器\n1.介绍：迭代器(lterator)是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署lterator接口，就可以完成遍历操作。  \n2.原理：创建一个指针对象，指向数据结构的起始位置，第一次调用==next（）==方法，指针自动指向数据结构第一个成员，接下来不断调用next（），指针一直往后移动，直到指向最后一个成员，没调用next（）返回一个包含value和done属性的对象。  \n\n```bash\n   <script>\n        //声明一个数组\n        const xiyou = ['唐僧','孙悟空','猪八戒','沙僧'];\n        for(let v in xiyou){ //保存键名\n            console.log(v);\n        }\n        for(let v of xiyou){ //保存键值\n            console.log(v);\n        }\n\n        let iterator = xiyou[Symbol.iterator]();\n        //调用对象的next方法，每次返回value的值，和done的状态\n        console.log(iterator.next());//{value: \"唐僧\", done: false}\n        console.log(iterator.next());//{value: \"孙悟空\", done: false}\n        console.log(iterator.next());//{value: \"猪八戒\", done: false}\n        console.log(iterator.next());//{value: \"沙僧\", done: false}\n        console.log(iterator.next());//{value: undefined, done: true}\n\n        //应用\n        const banji = {\n    name : \"终极一班\",\n    stus: [\n        'aa',\n        'bb',\n        'cc',\n        'dd'\n    ],\n    [Symbol.iterator](){\n        let index = 0;\n        let _this = this;\n        return {\n            next: () => {\n                if(index < this.stus.length){\n                    const result = {value: _this.stus[index],done: false};\n                    //下标自增\n                    index++;\n                    //返回结果\n                    return result;\n                }else {\n                    return {value: underfined,done:true};\n                }\n            }\n        }\n    }\n}\nfor(let v of banji){\n    console.log(v);  // aa bb cc dd\n}\n        \n    </script>\n```","slug":"ES6-迭代器","published":1,"updated":"2022-04-04T11:44:33.794Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb34i002ln4vo5j159zli","content":"<h3 id=\"什么是迭代器\"><a href=\"#什么是迭代器\" class=\"headerlink\" title=\"什么是迭代器\"></a>什么是迭代器</h3><p>1.介绍：迭代器(lterator)是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署lterator接口，就可以完成遍历操作。<br>2.原理：创建一个指针对象，指向数据结构的起始位置，第一次调用==next（）==方法，指针自动指向数据结构第一个成员，接下来不断调用next（），指针一直往后移动，直到指向最后一个成员，没调用next（）返回一个包含value和done属性的对象。  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">   &lt;script&gt;</span><br><span class=\"line\">        //声明一个数组</span><br><span class=\"line\">        const xiyou = [<span class=\"string\">&#x27;唐僧&#x27;</span>,<span class=\"string\">&#x27;孙悟空&#x27;</span>,<span class=\"string\">&#x27;猪八戒&#x27;</span>,<span class=\"string\">&#x27;沙僧&#x27;</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> v <span class=\"keyword\">in</span> xiyou)&#123; //保存键名</span><br><span class=\"line\">            console.log(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> v of xiyou)&#123; //保存键值</span><br><span class=\"line\">            console.log(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">let</span> iterator = xiyou[Symbol.iterator]();</span><br><span class=\"line\">        //调用对象的next方法，每次返回value的值，和<span class=\"keyword\">done</span>的状态</span><br><span class=\"line\">        console.log(iterator.next());//&#123;value: <span class=\"string\">&quot;唐僧&quot;</span>, <span class=\"keyword\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        console.log(iterator.next());//&#123;value: <span class=\"string\">&quot;孙悟空&quot;</span>, <span class=\"keyword\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        console.log(iterator.next());//&#123;value: <span class=\"string\">&quot;猪八戒&quot;</span>, <span class=\"keyword\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        console.log(iterator.next());//&#123;value: <span class=\"string\">&quot;沙僧&quot;</span>, <span class=\"keyword\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        console.log(iterator.next());//&#123;value: undefined, <span class=\"keyword\">done</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //应用</span><br><span class=\"line\">        const banji = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">&quot;终极一班&quot;</span>,</span><br><span class=\"line\">    stus: [</span><br><span class=\"line\">        <span class=\"string\">&#x27;aa&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;bb&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;cc&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;dd&#x27;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [Symbol.iterator]()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> index = 0;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> _this = this;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">            next: () =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(index &lt; this.stus.length)&#123;</span><br><span class=\"line\">                    const result = &#123;value: _this.stus[index],<span class=\"keyword\">done</span>: <span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">                    //下标自增</span><br><span class=\"line\">                    index++;</span><br><span class=\"line\">                    //返回结果</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> result;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> &#123;value: underfined,<span class=\"keyword\">done</span>:<span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> v of banji)&#123;</span><br><span class=\"line\">    console.log(v);  // aa bb cc <span class=\"built_in\">dd</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是迭代器\"><a href=\"#什么是迭代器\" class=\"headerlink\" title=\"什么是迭代器\"></a>什么是迭代器</h3><p>1.介绍：迭代器(lterator)是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署lterator接口，就可以完成遍历操作。<br>2.原理：创建一个指针对象，指向数据结构的起始位置，第一次调用==next（）==方法，指针自动指向数据结构第一个成员，接下来不断调用next（），指针一直往后移动，直到指向最后一个成员，没调用next（）返回一个包含value和done属性的对象。  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">   &lt;script&gt;</span><br><span class=\"line\">        //声明一个数组</span><br><span class=\"line\">        const xiyou = [<span class=\"string\">&#x27;唐僧&#x27;</span>,<span class=\"string\">&#x27;孙悟空&#x27;</span>,<span class=\"string\">&#x27;猪八戒&#x27;</span>,<span class=\"string\">&#x27;沙僧&#x27;</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> v <span class=\"keyword\">in</span> xiyou)&#123; //保存键名</span><br><span class=\"line\">            console.log(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> v of xiyou)&#123; //保存键值</span><br><span class=\"line\">            console.log(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">let</span> iterator = xiyou[Symbol.iterator]();</span><br><span class=\"line\">        //调用对象的next方法，每次返回value的值，和<span class=\"keyword\">done</span>的状态</span><br><span class=\"line\">        console.log(iterator.next());//&#123;value: <span class=\"string\">&quot;唐僧&quot;</span>, <span class=\"keyword\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        console.log(iterator.next());//&#123;value: <span class=\"string\">&quot;孙悟空&quot;</span>, <span class=\"keyword\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        console.log(iterator.next());//&#123;value: <span class=\"string\">&quot;猪八戒&quot;</span>, <span class=\"keyword\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        console.log(iterator.next());//&#123;value: <span class=\"string\">&quot;沙僧&quot;</span>, <span class=\"keyword\">done</span>: <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">        console.log(iterator.next());//&#123;value: undefined, <span class=\"keyword\">done</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //应用</span><br><span class=\"line\">        const banji = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">&quot;终极一班&quot;</span>,</span><br><span class=\"line\">    stus: [</span><br><span class=\"line\">        <span class=\"string\">&#x27;aa&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;bb&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;cc&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;dd&#x27;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [Symbol.iterator]()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> index = 0;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> _this = this;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">            next: () =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(index &lt; this.stus.length)&#123;</span><br><span class=\"line\">                    const result = &#123;value: _this.stus[index],<span class=\"keyword\">done</span>: <span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">                    //下标自增</span><br><span class=\"line\">                    index++;</span><br><span class=\"line\">                    //返回结果</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> result;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> &#123;value: underfined,<span class=\"keyword\">done</span>:<span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> v of banji)&#123;</span><br><span class=\"line\">    console.log(v);  // aa bb cc <span class=\"built_in\">dd</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ES6-集合","date":"2021-06-22T12:59:58.000Z","_content":"### 定义\nES6提供了新的数据结构set(集合）。它类似于数组，但成员的值都是唯一的，集合实现了iterator接口，所以可以使用「扩展运算符』和「 for…of…』进行遍历，集合的属性和方法: \n\n· size返回集合的元素个数  \n· add增加一个新元素，返回当前集合  \n· delete删除元素，返回boolean值has检测集合中是否包含某个元素，返回boolean值  \n\n```bash\n<script>\n    let s = new Set();\n    let s2 = new Set(['1','2','3','4','5']);\n    //元素个数\n    console.log(s2.size);//5\n    //添加新的元素\n    s2.add('6'); //Set(5) {\"1\", \"2\", \"3\", \"4\", \"5\",\"6\"}\n    //删除元素\n    s2.delete('5');\n    console.log(s2); //Set(5) {\"1\", \"2\", \"3\", \"4\",\"6\"}\n    //检测\n    console.log(s2.has('6')); //true\n    //清空\n    s2.clear();\n    console.log(s2);\n\n    //实现了iterator接口，可以使用for of遍历元素\n    for(v of s2){\n        console.log(v);\n    }\n```\n### 集合的应用\n```bash\n    let arr = [1,2,3,4,5,4,3,2,1];\n    //1.数组去重\n    // let result = [...new Set(arr)];\n    //2.交集\n    let arr2 = [4,5,6,5,6];\n    let result = [...new Set(arr)].filter(item=>{\n        let s2 = new Set(arr2);\n        if(s2.has(item)){\n            return true;\n        }else{\n            return false;\n        }\n    });\n    //简化\n    // let result = [...new Set(arr)].filter(item=>new Set(arr2).has(item));\n    console.log(result);\n\n    //3.并集\n    let union = [...new Set([...arr,...arr2])];\n    console.log(union);\n\n    //4.差集\n    let diff = [...new Set(arr)].filter(item=>!(new Set(arr2).has(item)));\n    console.log(diff);\n</script>\n```\n","source":"_posts/2021/06/ES6-集合.md","raw":"---\ntitle: ES6-集合\ncategories: ES6\ndate: 2021-06-22 20:59:58\ntags:  \n     - ES6 \n     - 集合\n---\n### 定义\nES6提供了新的数据结构set(集合）。它类似于数组，但成员的值都是唯一的，集合实现了iterator接口，所以可以使用「扩展运算符』和「 for…of…』进行遍历，集合的属性和方法: \n\n· size返回集合的元素个数  \n· add增加一个新元素，返回当前集合  \n· delete删除元素，返回boolean值has检测集合中是否包含某个元素，返回boolean值  \n\n```bash\n<script>\n    let s = new Set();\n    let s2 = new Set(['1','2','3','4','5']);\n    //元素个数\n    console.log(s2.size);//5\n    //添加新的元素\n    s2.add('6'); //Set(5) {\"1\", \"2\", \"3\", \"4\", \"5\",\"6\"}\n    //删除元素\n    s2.delete('5');\n    console.log(s2); //Set(5) {\"1\", \"2\", \"3\", \"4\",\"6\"}\n    //检测\n    console.log(s2.has('6')); //true\n    //清空\n    s2.clear();\n    console.log(s2);\n\n    //实现了iterator接口，可以使用for of遍历元素\n    for(v of s2){\n        console.log(v);\n    }\n```\n### 集合的应用\n```bash\n    let arr = [1,2,3,4,5,4,3,2,1];\n    //1.数组去重\n    // let result = [...new Set(arr)];\n    //2.交集\n    let arr2 = [4,5,6,5,6];\n    let result = [...new Set(arr)].filter(item=>{\n        let s2 = new Set(arr2);\n        if(s2.has(item)){\n            return true;\n        }else{\n            return false;\n        }\n    });\n    //简化\n    // let result = [...new Set(arr)].filter(item=>new Set(arr2).has(item));\n    console.log(result);\n\n    //3.并集\n    let union = [...new Set([...arr,...arr2])];\n    console.log(union);\n\n    //4.差集\n    let diff = [...new Set(arr)].filter(item=>!(new Set(arr2).has(item)));\n    console.log(diff);\n</script>\n```\n","slug":"ES6-集合","published":1,"updated":"2022-04-04T11:44:33.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb34k002on4vocovvgak9","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>ES6提供了新的数据结构set(集合）。它类似于数组，但成员的值都是唯一的，集合实现了iterator接口，所以可以使用「扩展运算符』和「 for…of…』进行遍历，集合的属性和方法: </p>\n<p>· size返回集合的元素个数<br>· add增加一个新元素，返回当前集合<br>· delete删除元素，返回boolean值has检测集合中是否包含某个元素，返回boolean值  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> s = new Set();</span><br><span class=\"line\">    <span class=\"built_in\">let</span> s2 = new Set([<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"string\">&#x27;5&#x27;</span>]);</span><br><span class=\"line\">    //元素个数</span><br><span class=\"line\">    console.log(s2.size);//5</span><br><span class=\"line\">    //添加新的元素</span><br><span class=\"line\">    s2.add(<span class=\"string\">&#x27;6&#x27;</span>); //Set(5) &#123;<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>, <span class=\"string\">&quot;5&quot;</span>,<span class=\"string\">&quot;6&quot;</span>&#125;</span><br><span class=\"line\">    //删除元素</span><br><span class=\"line\">    s2.delete(<span class=\"string\">&#x27;5&#x27;</span>);</span><br><span class=\"line\">    console.log(s2); //Set(5) &#123;<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>,<span class=\"string\">&quot;6&quot;</span>&#125;</span><br><span class=\"line\">    //检测</span><br><span class=\"line\">    console.log(s2.has(<span class=\"string\">&#x27;6&#x27;</span>)); //true</span><br><span class=\"line\">    //清空</span><br><span class=\"line\">    s2.clear();</span><br><span class=\"line\">    console.log(s2);</span><br><span class=\"line\"></span><br><span class=\"line\">    //实现了iterator接口，可以使用<span class=\"keyword\">for</span> of遍历元素</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(v of s2)&#123;</span><br><span class=\"line\">        console.log(v);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"集合的应用\"><a href=\"#集合的应用\" class=\"headerlink\" title=\"集合的应用\"></a>集合的应用</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">let</span> arr = [1,2,3,4,5,4,3,2,1];</span><br><span class=\"line\">    //1.数组去重</span><br><span class=\"line\">    // <span class=\"built_in\">let</span> result = [...new Set(arr)];</span><br><span class=\"line\">    //2.交集</span><br><span class=\"line\">    <span class=\"built_in\">let</span> arr2 = [4,5,6,5,6];</span><br><span class=\"line\">    <span class=\"built_in\">let</span> result = [...new Set(arr)].filter(item=&gt;&#123;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> s2 = new Set(arr2);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s2.has(item))&#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    //简化</span><br><span class=\"line\">    // <span class=\"built_in\">let</span> result = [...new Set(arr)].filter(item=&gt;new Set(arr2).has(item));</span><br><span class=\"line\">    console.log(result);</span><br><span class=\"line\"></span><br><span class=\"line\">    //3.并集</span><br><span class=\"line\">    <span class=\"built_in\">let</span> union = [...new Set([...arr,...arr2])];</span><br><span class=\"line\">    console.log(union);</span><br><span class=\"line\"></span><br><span class=\"line\">    //4.差集</span><br><span class=\"line\">    <span class=\"built_in\">let</span> diff = [...new Set(arr)].filter(item=&gt;!(new Set(arr2).has(item)));</span><br><span class=\"line\">    console.log(diff);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>ES6提供了新的数据结构set(集合）。它类似于数组，但成员的值都是唯一的，集合实现了iterator接口，所以可以使用「扩展运算符』和「 for…of…』进行遍历，集合的属性和方法: </p>\n<p>· size返回集合的元素个数<br>· add增加一个新元素，返回当前集合<br>· delete删除元素，返回boolean值has检测集合中是否包含某个元素，返回boolean值  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> s = new Set();</span><br><span class=\"line\">    <span class=\"built_in\">let</span> s2 = new Set([<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"string\">&#x27;5&#x27;</span>]);</span><br><span class=\"line\">    //元素个数</span><br><span class=\"line\">    console.log(s2.size);//5</span><br><span class=\"line\">    //添加新的元素</span><br><span class=\"line\">    s2.add(<span class=\"string\">&#x27;6&#x27;</span>); //Set(5) &#123;<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>, <span class=\"string\">&quot;5&quot;</span>,<span class=\"string\">&quot;6&quot;</span>&#125;</span><br><span class=\"line\">    //删除元素</span><br><span class=\"line\">    s2.delete(<span class=\"string\">&#x27;5&#x27;</span>);</span><br><span class=\"line\">    console.log(s2); //Set(5) &#123;<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>, <span class=\"string\">&quot;4&quot;</span>,<span class=\"string\">&quot;6&quot;</span>&#125;</span><br><span class=\"line\">    //检测</span><br><span class=\"line\">    console.log(s2.has(<span class=\"string\">&#x27;6&#x27;</span>)); //true</span><br><span class=\"line\">    //清空</span><br><span class=\"line\">    s2.clear();</span><br><span class=\"line\">    console.log(s2);</span><br><span class=\"line\"></span><br><span class=\"line\">    //实现了iterator接口，可以使用<span class=\"keyword\">for</span> of遍历元素</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(v of s2)&#123;</span><br><span class=\"line\">        console.log(v);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"集合的应用\"><a href=\"#集合的应用\" class=\"headerlink\" title=\"集合的应用\"></a>集合的应用</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">let</span> arr = [1,2,3,4,5,4,3,2,1];</span><br><span class=\"line\">    //1.数组去重</span><br><span class=\"line\">    // <span class=\"built_in\">let</span> result = [...new Set(arr)];</span><br><span class=\"line\">    //2.交集</span><br><span class=\"line\">    <span class=\"built_in\">let</span> arr2 = [4,5,6,5,6];</span><br><span class=\"line\">    <span class=\"built_in\">let</span> result = [...new Set(arr)].filter(item=&gt;&#123;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> s2 = new Set(arr2);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s2.has(item))&#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    //简化</span><br><span class=\"line\">    // <span class=\"built_in\">let</span> result = [...new Set(arr)].filter(item=&gt;new Set(arr2).has(item));</span><br><span class=\"line\">    console.log(result);</span><br><span class=\"line\"></span><br><span class=\"line\">    //3.并集</span><br><span class=\"line\">    <span class=\"built_in\">let</span> union = [...new Set([...arr,...arr2])];</span><br><span class=\"line\">    console.log(union);</span><br><span class=\"line\"></span><br><span class=\"line\">    //4.差集</span><br><span class=\"line\">    <span class=\"built_in\">let</span> diff = [...new Set(arr)].filter(item=&gt;!(new Set(arr2).has(item)));</span><br><span class=\"line\">    console.log(diff);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"js算法排序","date":"2022-03-28T06:56:38.000Z","_content":"js算法排序可视化网站：链接: [https://visualgo.net](https://www.csdn.net/)\n# 冒泡排序\n```\nfunction BubbleSort(array) {\n  var length = array.length;\n  for (var i = length - 1; i > 0; i--) { //用于缩小范围\n    for (var j = 0; j < i; j++) { //在范围内进行冒泡，在此范围内最大的一个将冒到最后面\n      if (array[j] > array[j+1]) { \n        var temp = array[j];\n        array[j] = array[j+1];\n        array[j+1] = temp;\n      }\n    }\n    console.log(array);\n    console.log(\"-----------------------------\");\n  }\n  return array;\n}\nvar arr = [10,9,8,7,7,6,5,11,3];\nvar result = BubbleSort(arr);\nconsole.log(result); \n/*\n[ 9, 8, 7, 7, 6, 5, 10, 3, 11 ]\n-----------------------------\n[ 8, 7, 7, 6, 5, 9, 3, 10, 11 ]\n-----------------------------\n[ 7, 7, 6, 5, 8, 3, 9, 10, 11 ]\n-----------------------------\n[ 7, 6, 5, 7, 3, 8, 9, 10, 11 ]\n-----------------------------\n[ 6, 5, 7, 3, 7, 8, 9, 10, 11 ]\n-----------------------------\n[ 5, 6, 3, 7, 7, 8, 9, 10, 11 ]\n-----------------------------\n[ 5, 3, 6, 7, 7, 8, 9, 10, 11 ]\n-----------------------------\n[ 3, 5, 6, 7, 7, 8, 9, 10, 11 ]\n-----------------------------\n[ 3, 5, 6, 7, 7, 8, 9, 10, 11 ]\n*/\n```\n\n# 选择排序\n```\nfunction SelectionSort(array) {\n  var length = array.length;\n  for (var i = 0; i < length; i++) { //缩小选择的范围\n    var min = array[i]; //假定范围内第一个为最小值\n    var index = i; //记录最小值的下标\n    for (var j = i + 1; j < length; j++) { //在范围内选取最小值\n      if (array[j] < min) {\n        min = array[j];\n        index = j;\n      }\n    }\n    if (index != i) { //把范围内最小值交换到范围内第一个\n      var temp = array[i];\n      array[i] = array[index];\n      array[index] = temp;\n    }\n    console.log(array);\n    console.log(\"---------------------\");\n  }\n  return array;\n}\n\nvar arr = [ 1, 10, 100, 90, 65, 5, 4, 10, 2, 4 ];\nvar result = SelectionSort(arr);\nconsole.log(result);\n/*\n[ 1, 10, 100, 90, 65, 5, 4, 10, 2, 4 ]\n---------------------\n[ 1, 2, 100, 90, 65, 5, 4, 10, 10, 4 ]\n---------------------\n[ 1, 2, 4, 90, 65, 5, 100, 10, 10, 4 ]\n---------------------\n[ 1, 2, 4, 4, 65, 5, 100, 10, 10, 90 ]\n---------------------\n[ 1, 2, 4, 4, 5, 65, 100, 10, 10, 90 ]\n---------------------\n[ 1, 2, 4, 4, 5, 10, 100, 65, 10, 90 ]\n---------------------\n[ 1, 2, 4, 4, 5, 10, 10, 65, 100, 90 ]\n---------------------\n[ 1, 2, 4, 4, 5, 10, 10, 65, 100, 90 ]\n---------------------\n[ 1, 2, 4, 4, 5, 10, 10, 65, 90, 100 ]\n---------------------\n[ 1, 2, 4, 4, 5, 10, 10, 65, 90, 100 ]\n---------------------\n[ 1, 2, 4, 4, 5, 10, 10, 65, 90, 100 ]\n*/\n```\n\n# 插入排序\n```\nfunction InsertionSort(array) {\n  var length = array.length;\n  for (var i = 0; i < length - 1; i++) {\n    //i代表已经排序好的序列最后一项下标\n    var insert = array[i+1];\n    var index = i + 1;//记录要被插入的下标\n    for (var j = i; j >= 0; j--) {\n      if (insert < array[j]) {\n        //要插入的项比它小，往后移动\n        array[j+1] = array[j];\n        index = j;\n      }\n    }\n    array[index] = insert;\n    console.log(array);\n    console.log(\"-----------------------\");\n  }\n  return array;\n}\n\nvar arr = [100,90,80,62,80,8,1,2,39];\nvar result = InsertionSort(arr);\nconsole.log(result);\n/*\n[ 90, 100, 80, 62, 80, 8, 1, 2, 39 ]\n-----------------------\n[ 80, 90, 100, 62, 80, 8, 1, 2, 39 ]\n-----------------------\n[ 62, 80, 90, 100, 80, 8, 1, 2, 39 ]\n-----------------------\n[ 62, 80, 80, 90, 100, 8, 1, 2, 39 ]\n-----------------------\n[ 8, 62, 80, 80, 90, 100, 1, 2, 39 ]\n-----------------------\n[ 1, 8, 62, 80, 80, 90, 100, 2, 39 ]\n-----------------------\n[ 1, 2, 8, 62, 80, 80, 90, 100, 39 ]\n-----------------------\n[ 1, 2, 8, 39, 62, 80, 80, 90, 100 ]\n-----------------------\n[ 1, 2, 8, 39, 62, 80, 80, 90, 100 ]\n*/\n```\n\n# 希尔排序\n```\nfunction ShellSort(array) {\n  var length = array.length;\n  var gap = Math.round(length / 2);\n  while (gap > 0) {\n    for (var i = gap; i < length; i++) {\n      var insert = array[i];\n      var index = i;\n      for (var j = i; j >= 0; j-=gap) {\n        if (insert < array[j]) {\n          array[j+gap] = array[j];\n          index = j;\n        }\n      }\n      array[index] = insert;\n    }\n    console.log(array);\n    console.log(\"-----------------------\");\n    gap = Math.round(gap/2 - 0.1);\n  }\n  return array;\n}\n\nvar arr = [ 13, 14, 94, 33, 82, 25, 59, 94, 65, 23, 45, 27, 73, 25, 39, 10 ];\nvar result = ShellSort(arr);\nconsole.log(result); \n/*\n[ 13, 14, 45, 27, 73, 25, 39, 10, 65, 23, 94, 33, 82, 25, 59, 94 ]\n-----------------------\n[ 13, 14, 39, 10, 65, 23, 45, 27, 73, 25, 59, 33, 82, 25, 94, 94 ]\n-----------------------\n[ 13, 10, 39, 14, 45, 23, 59, 25, 65, 25, 73, 27, 82, 33, 94, 94 ]\n-----------------------\n[ 10, 13, 14, 23, 25, 25, 27, 33, 39, 45, 59, 65, 73, 82, 94, 94 ]\n-----------------------\n[ 10, 13, 14, 23, 25, 25, 27, 33, 39, 45, 59, 65, 73, 82, 94, 94 ]\n*/\n```\n\n# 归并排序\n```\nfunction MergeSort(array) {\n  var length = array.length;\n  if (length <= 1) {\n    return array;\n  } else {\n    var num = Math.ceil(length/2);\n    var left = MergeSort(array.slice(0, num));\n    var right = MergeSort(array.slice(num, length));\n    return merge(left, right);\n  }\n}\n\nfunction merge(left, right) {\n  console.log(left);\n  console.log(right);\n  var a = new Array();\n  while (left.length > 0 && right.length > 0) {\n    if (left[0] <= right[0]) {\n      var temp = left.shift();\n      a.push(temp);\n    } else {\n      var temp = right.shift();\n      a.push(temp);\n    }\n  }\n  if (left.length > 0) {\n    a = a.concat(left);\n  }\n  if (right.length > 0) {\n    a = a.concat(right);\n  }\n  console.log(a);\n  console.log(\"-----------------------------\");\n  return a;\n}\n\nvar arr = [ 13, 14, 94, 33, 82, 25, 59, 94, 65, 23, 45, 27, 73, 25, 39, 10 ];\nvar result = MergeSort(arr);\nconsole.log(result);\n/*\n[ 13 ]\n[ 14 ]\n[ 13, 14 ]\n-----------------------------\n[ 94 ]\n[ 33 ]\n[ 33, 94 ]\n-----------------------------\n[ 13, 14 ]\n[ 33, 94 ]\n[ 13, 14, 33, 94 ]\n-----------------------------\n[ 82 ]\n[ 25 ]\n[ 25, 82 ]\n-----------------------------\n[ 59 ]\n[ 94 ]\n[ 59, 94 ]\n-----------------------------\n[ 25, 82 ]\n[ 59, 94 ]\n[ 25, 59, 82, 94 ]\n-----------------------------\n[ 13, 14, 33, 94 ]\n[ 25, 59, 82, 94 ]\n[ 13, 14, 25, 33, 59, 82, 94, 94 ]\n-----------------------------\n[ 65 ]\n[ 23 ]\n[ 23, 65 ]\n-----------------------------\n[ 45 ]\n[ 27 ]\n[ 27, 45 ]\n-----------------------------\n[ 23, 65 ]\n[ 27, 45 ]\n[ 23, 27, 45, 65 ]\n-----------------------------\n[ 73 ]\n[ 25 ]\n[ 25, 73 ]\n-----------------------------\n[ 39 ]\n[ 10 ]\n[ 10, 39 ]\n-----------------------------\n[ 25, 73 ]\n[ 10, 39 ]\n[ 10, 25, 39, 73 ]\n-----------------------------\n[ 23, 27, 45, 65 ]\n[ 10, 25, 39, 73 ]\n[ 10, 23, 25, 27, 39, 45, 65, 73 ]\n-----------------------------\n[ 13, 14, 25, 33, 59, 82, 94, 94 ]\n[ 10, 23, 25, 27, 39, 45, 65, 73 ]\n[ 10, 13, 14, 23, 25, 25, 27, 33, 39, 45, 59, 65, 73, 82, 94, 94 ]\n-----------------------------\n[ 10, 13, 14, 23, 25, 25, 27, 33, 39, 45, 59, 65, 73, 82, 94, 94 ]\n*/\n```\n\n# 快速排序\n```\nfunction QuickSort(array) {\n  var length = array.length;\n  if (length <= 1) {\n    return array;\n  } else {\n    var smaller = [];\n    var bigger = [];\n    var base = [array[0]];\n    for (var i = 1; i < length; i++) {\n      if (array[i] <= base[0]) {\n        smaller.push(array[i]);\n      } else {\n        bigger.push(array[i]);\n      }\n    }\n    console.log(smaller.concat(base.concat(bigger)));\n    console.log(\"-----------------------\");\n    return QuickSort(smaller).concat(base.concat(QuickSort(bigger)));\n  }\n}\n\n\nvar arr = [ 8, 10, 100, 90, 65, 5, 4, 10, 2, 4 ];\nvar result = QuickSort(arr);\nconsole.log(result);\n/*\n[ 5, 4, 2, 4, 8, 10, 100, 90, 65, 10 ]\n-----------------------\n[ 4, 2, 4, 5 ]\n-----------------------\n[ 2, 4, 4 ]\n-----------------------\n[ 2, 4 ]\n-----------------------\n[ 10, 10, 100, 90, 65 ]\n-----------------------\n[ 90, 65, 100 ]\n-----------------------\n[ 65, 90 ]\n-----------------------\n[ 2, 4, 4, 5, 8, 10, 10, 65, 90, 100 ]\n*/\n```\n# 计数排序\n```\n function countingSort(nums) {\n            let arr = [];  // 定义一个空数组\n            let max = Math.max(...nums); // 找到这个数组的 最大 最小值\n            let min = Math.min(...nums);\n\n            // 装桶\n            for(let i=0, len=nums.length; i<len; i++) { // 把传入数组的值作为下标  装入一个长度为数组最大值长度的临时数组\n                // 比如 第一位是5  传入arr后 arr为[,,,,,1]   =>   [empty × 5, 1]\n                let temp = nums[i];\n                arr[temp] = arr[temp] + 1 || 1;  \n            }\n            let index = 0;  // 定义一个索引 这个索引是 后面用来改变原数组的 \n\n            // 还原原数组\n            for(let i=min; i<=max; i++) { // 写一个for循环 i=原数组最小值  i>原数组最大值的时候跳出循环  i每次++\n                while(arr[i] > 0) { // 从arr[i]开始 如果他>0 \n                    nums[index++] = i; // 就把原数组的第index位赋值为 i\n                    arr[i]--; // 每赋值完一次后 临时数组当前位的值就--   如果=0 就说明这位上没有值了\n                }\n            }\n        }\n```\n\n","source":"_posts/2022/03/js算法排序.md","raw":"---\ntitle: js算法排序\ncategories: JavaScript\ndate: 2022-03-28 14:56:38\ntags:\n     - JavaScript\n---\njs算法排序可视化网站：链接: [https://visualgo.net](https://www.csdn.net/)\n# 冒泡排序\n```\nfunction BubbleSort(array) {\n  var length = array.length;\n  for (var i = length - 1; i > 0; i--) { //用于缩小范围\n    for (var j = 0; j < i; j++) { //在范围内进行冒泡，在此范围内最大的一个将冒到最后面\n      if (array[j] > array[j+1]) { \n        var temp = array[j];\n        array[j] = array[j+1];\n        array[j+1] = temp;\n      }\n    }\n    console.log(array);\n    console.log(\"-----------------------------\");\n  }\n  return array;\n}\nvar arr = [10,9,8,7,7,6,5,11,3];\nvar result = BubbleSort(arr);\nconsole.log(result); \n/*\n[ 9, 8, 7, 7, 6, 5, 10, 3, 11 ]\n-----------------------------\n[ 8, 7, 7, 6, 5, 9, 3, 10, 11 ]\n-----------------------------\n[ 7, 7, 6, 5, 8, 3, 9, 10, 11 ]\n-----------------------------\n[ 7, 6, 5, 7, 3, 8, 9, 10, 11 ]\n-----------------------------\n[ 6, 5, 7, 3, 7, 8, 9, 10, 11 ]\n-----------------------------\n[ 5, 6, 3, 7, 7, 8, 9, 10, 11 ]\n-----------------------------\n[ 5, 3, 6, 7, 7, 8, 9, 10, 11 ]\n-----------------------------\n[ 3, 5, 6, 7, 7, 8, 9, 10, 11 ]\n-----------------------------\n[ 3, 5, 6, 7, 7, 8, 9, 10, 11 ]\n*/\n```\n\n# 选择排序\n```\nfunction SelectionSort(array) {\n  var length = array.length;\n  for (var i = 0; i < length; i++) { //缩小选择的范围\n    var min = array[i]; //假定范围内第一个为最小值\n    var index = i; //记录最小值的下标\n    for (var j = i + 1; j < length; j++) { //在范围内选取最小值\n      if (array[j] < min) {\n        min = array[j];\n        index = j;\n      }\n    }\n    if (index != i) { //把范围内最小值交换到范围内第一个\n      var temp = array[i];\n      array[i] = array[index];\n      array[index] = temp;\n    }\n    console.log(array);\n    console.log(\"---------------------\");\n  }\n  return array;\n}\n\nvar arr = [ 1, 10, 100, 90, 65, 5, 4, 10, 2, 4 ];\nvar result = SelectionSort(arr);\nconsole.log(result);\n/*\n[ 1, 10, 100, 90, 65, 5, 4, 10, 2, 4 ]\n---------------------\n[ 1, 2, 100, 90, 65, 5, 4, 10, 10, 4 ]\n---------------------\n[ 1, 2, 4, 90, 65, 5, 100, 10, 10, 4 ]\n---------------------\n[ 1, 2, 4, 4, 65, 5, 100, 10, 10, 90 ]\n---------------------\n[ 1, 2, 4, 4, 5, 65, 100, 10, 10, 90 ]\n---------------------\n[ 1, 2, 4, 4, 5, 10, 100, 65, 10, 90 ]\n---------------------\n[ 1, 2, 4, 4, 5, 10, 10, 65, 100, 90 ]\n---------------------\n[ 1, 2, 4, 4, 5, 10, 10, 65, 100, 90 ]\n---------------------\n[ 1, 2, 4, 4, 5, 10, 10, 65, 90, 100 ]\n---------------------\n[ 1, 2, 4, 4, 5, 10, 10, 65, 90, 100 ]\n---------------------\n[ 1, 2, 4, 4, 5, 10, 10, 65, 90, 100 ]\n*/\n```\n\n# 插入排序\n```\nfunction InsertionSort(array) {\n  var length = array.length;\n  for (var i = 0; i < length - 1; i++) {\n    //i代表已经排序好的序列最后一项下标\n    var insert = array[i+1];\n    var index = i + 1;//记录要被插入的下标\n    for (var j = i; j >= 0; j--) {\n      if (insert < array[j]) {\n        //要插入的项比它小，往后移动\n        array[j+1] = array[j];\n        index = j;\n      }\n    }\n    array[index] = insert;\n    console.log(array);\n    console.log(\"-----------------------\");\n  }\n  return array;\n}\n\nvar arr = [100,90,80,62,80,8,1,2,39];\nvar result = InsertionSort(arr);\nconsole.log(result);\n/*\n[ 90, 100, 80, 62, 80, 8, 1, 2, 39 ]\n-----------------------\n[ 80, 90, 100, 62, 80, 8, 1, 2, 39 ]\n-----------------------\n[ 62, 80, 90, 100, 80, 8, 1, 2, 39 ]\n-----------------------\n[ 62, 80, 80, 90, 100, 8, 1, 2, 39 ]\n-----------------------\n[ 8, 62, 80, 80, 90, 100, 1, 2, 39 ]\n-----------------------\n[ 1, 8, 62, 80, 80, 90, 100, 2, 39 ]\n-----------------------\n[ 1, 2, 8, 62, 80, 80, 90, 100, 39 ]\n-----------------------\n[ 1, 2, 8, 39, 62, 80, 80, 90, 100 ]\n-----------------------\n[ 1, 2, 8, 39, 62, 80, 80, 90, 100 ]\n*/\n```\n\n# 希尔排序\n```\nfunction ShellSort(array) {\n  var length = array.length;\n  var gap = Math.round(length / 2);\n  while (gap > 0) {\n    for (var i = gap; i < length; i++) {\n      var insert = array[i];\n      var index = i;\n      for (var j = i; j >= 0; j-=gap) {\n        if (insert < array[j]) {\n          array[j+gap] = array[j];\n          index = j;\n        }\n      }\n      array[index] = insert;\n    }\n    console.log(array);\n    console.log(\"-----------------------\");\n    gap = Math.round(gap/2 - 0.1);\n  }\n  return array;\n}\n\nvar arr = [ 13, 14, 94, 33, 82, 25, 59, 94, 65, 23, 45, 27, 73, 25, 39, 10 ];\nvar result = ShellSort(arr);\nconsole.log(result); \n/*\n[ 13, 14, 45, 27, 73, 25, 39, 10, 65, 23, 94, 33, 82, 25, 59, 94 ]\n-----------------------\n[ 13, 14, 39, 10, 65, 23, 45, 27, 73, 25, 59, 33, 82, 25, 94, 94 ]\n-----------------------\n[ 13, 10, 39, 14, 45, 23, 59, 25, 65, 25, 73, 27, 82, 33, 94, 94 ]\n-----------------------\n[ 10, 13, 14, 23, 25, 25, 27, 33, 39, 45, 59, 65, 73, 82, 94, 94 ]\n-----------------------\n[ 10, 13, 14, 23, 25, 25, 27, 33, 39, 45, 59, 65, 73, 82, 94, 94 ]\n*/\n```\n\n# 归并排序\n```\nfunction MergeSort(array) {\n  var length = array.length;\n  if (length <= 1) {\n    return array;\n  } else {\n    var num = Math.ceil(length/2);\n    var left = MergeSort(array.slice(0, num));\n    var right = MergeSort(array.slice(num, length));\n    return merge(left, right);\n  }\n}\n\nfunction merge(left, right) {\n  console.log(left);\n  console.log(right);\n  var a = new Array();\n  while (left.length > 0 && right.length > 0) {\n    if (left[0] <= right[0]) {\n      var temp = left.shift();\n      a.push(temp);\n    } else {\n      var temp = right.shift();\n      a.push(temp);\n    }\n  }\n  if (left.length > 0) {\n    a = a.concat(left);\n  }\n  if (right.length > 0) {\n    a = a.concat(right);\n  }\n  console.log(a);\n  console.log(\"-----------------------------\");\n  return a;\n}\n\nvar arr = [ 13, 14, 94, 33, 82, 25, 59, 94, 65, 23, 45, 27, 73, 25, 39, 10 ];\nvar result = MergeSort(arr);\nconsole.log(result);\n/*\n[ 13 ]\n[ 14 ]\n[ 13, 14 ]\n-----------------------------\n[ 94 ]\n[ 33 ]\n[ 33, 94 ]\n-----------------------------\n[ 13, 14 ]\n[ 33, 94 ]\n[ 13, 14, 33, 94 ]\n-----------------------------\n[ 82 ]\n[ 25 ]\n[ 25, 82 ]\n-----------------------------\n[ 59 ]\n[ 94 ]\n[ 59, 94 ]\n-----------------------------\n[ 25, 82 ]\n[ 59, 94 ]\n[ 25, 59, 82, 94 ]\n-----------------------------\n[ 13, 14, 33, 94 ]\n[ 25, 59, 82, 94 ]\n[ 13, 14, 25, 33, 59, 82, 94, 94 ]\n-----------------------------\n[ 65 ]\n[ 23 ]\n[ 23, 65 ]\n-----------------------------\n[ 45 ]\n[ 27 ]\n[ 27, 45 ]\n-----------------------------\n[ 23, 65 ]\n[ 27, 45 ]\n[ 23, 27, 45, 65 ]\n-----------------------------\n[ 73 ]\n[ 25 ]\n[ 25, 73 ]\n-----------------------------\n[ 39 ]\n[ 10 ]\n[ 10, 39 ]\n-----------------------------\n[ 25, 73 ]\n[ 10, 39 ]\n[ 10, 25, 39, 73 ]\n-----------------------------\n[ 23, 27, 45, 65 ]\n[ 10, 25, 39, 73 ]\n[ 10, 23, 25, 27, 39, 45, 65, 73 ]\n-----------------------------\n[ 13, 14, 25, 33, 59, 82, 94, 94 ]\n[ 10, 23, 25, 27, 39, 45, 65, 73 ]\n[ 10, 13, 14, 23, 25, 25, 27, 33, 39, 45, 59, 65, 73, 82, 94, 94 ]\n-----------------------------\n[ 10, 13, 14, 23, 25, 25, 27, 33, 39, 45, 59, 65, 73, 82, 94, 94 ]\n*/\n```\n\n# 快速排序\n```\nfunction QuickSort(array) {\n  var length = array.length;\n  if (length <= 1) {\n    return array;\n  } else {\n    var smaller = [];\n    var bigger = [];\n    var base = [array[0]];\n    for (var i = 1; i < length; i++) {\n      if (array[i] <= base[0]) {\n        smaller.push(array[i]);\n      } else {\n        bigger.push(array[i]);\n      }\n    }\n    console.log(smaller.concat(base.concat(bigger)));\n    console.log(\"-----------------------\");\n    return QuickSort(smaller).concat(base.concat(QuickSort(bigger)));\n  }\n}\n\n\nvar arr = [ 8, 10, 100, 90, 65, 5, 4, 10, 2, 4 ];\nvar result = QuickSort(arr);\nconsole.log(result);\n/*\n[ 5, 4, 2, 4, 8, 10, 100, 90, 65, 10 ]\n-----------------------\n[ 4, 2, 4, 5 ]\n-----------------------\n[ 2, 4, 4 ]\n-----------------------\n[ 2, 4 ]\n-----------------------\n[ 10, 10, 100, 90, 65 ]\n-----------------------\n[ 90, 65, 100 ]\n-----------------------\n[ 65, 90 ]\n-----------------------\n[ 2, 4, 4, 5, 8, 10, 10, 65, 90, 100 ]\n*/\n```\n# 计数排序\n```\n function countingSort(nums) {\n            let arr = [];  // 定义一个空数组\n            let max = Math.max(...nums); // 找到这个数组的 最大 最小值\n            let min = Math.min(...nums);\n\n            // 装桶\n            for(let i=0, len=nums.length; i<len; i++) { // 把传入数组的值作为下标  装入一个长度为数组最大值长度的临时数组\n                // 比如 第一位是5  传入arr后 arr为[,,,,,1]   =>   [empty × 5, 1]\n                let temp = nums[i];\n                arr[temp] = arr[temp] + 1 || 1;  \n            }\n            let index = 0;  // 定义一个索引 这个索引是 后面用来改变原数组的 \n\n            // 还原原数组\n            for(let i=min; i<=max; i++) { // 写一个for循环 i=原数组最小值  i>原数组最大值的时候跳出循环  i每次++\n                while(arr[i] > 0) { // 从arr[i]开始 如果他>0 \n                    nums[index++] = i; // 就把原数组的第index位赋值为 i\n                    arr[i]--; // 每赋值完一次后 临时数组当前位的值就--   如果=0 就说明这位上没有值了\n                }\n            }\n        }\n```\n\n","slug":"js算法排序","published":1,"updated":"2022-04-04T11:44:33.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb34l002qn4vo00x33mop","content":"<p>js算法排序可视化网站：链接: <a href=\"https://www.csdn.net/\">https://visualgo.net</a></p>\n<h1 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h1><figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">function BubbleSort(array) &#123;</span><br><span class=\"line\"><span class=\"code\">  var length = array.length;</span></span><br><span class=\"line\"><span class=\"code\">  for (var i = length - 1; i &gt; 0; i--) &#123; //用于缩小范围</span></span><br><span class=\"line\"><span class=\"code\">    for (var j = 0; j &lt; i; j++) &#123; //在范围内进行冒泡，在此范围内最大的一个将冒到最后面</span></span><br><span class=\"line\"><span class=\"code\">      if (array[j] &gt; array[j+1]) &#123; </span></span><br><span class=\"line\"><span class=\"code\">        var temp = array[j];</span></span><br><span class=\"line\"><span class=\"code\">        array[j] = array[j+1];</span></span><br><span class=\"line\"><span class=\"code\">        array[j+1] = temp;</span></span><br><span class=\"line\"><span class=\"code\">      &#125;</span></span><br><span class=\"line\"><span class=\"code\">    &#125;</span></span><br><span class=\"line\"><span class=\"code\">    console.log(array);</span></span><br><span class=\"line\"><span class=\"code\">    console.log(&quot;-----------------------------&quot;);</span></span><br><span class=\"line\"><span class=\"code\">  &#125;</span></span><br><span class=\"line\"><span class=\"code\">  return array;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var arr = [10,9,8,7,7,6,5,11,3];</span><br><span class=\"line\">var result = BubbleSort(arr);</span><br><span class=\"line\">console.log(result); </span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"meta\">[ 9, 8, 7, 7, 6, 5, 10, 3, 11 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 8, 7, 7, 6, 5, 9, 3, 10, 11 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 7, 7, 6, 5, 8, 3, 9, 10, 11 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 7, 6, 5, 7, 3, 8, 9, 10, 11 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 6, 5, 7, 3, 7, 8, 9, 10, 11 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 5, 6, 3, 7, 7, 8, 9, 10, 11 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 5, 3, 6, 7, 7, 8, 9, 10, 11 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 3, 5, 6, 7, 7, 8, 9, 10, 11 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 3, 5, 6, 7, 7, 8, 9, 10, 11 ]</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h1><figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">function SelectionSort(array) &#123;</span><br><span class=\"line\"><span class=\"code\">  var length = array.length;</span></span><br><span class=\"line\"><span class=\"code\">  for (var i = 0; i &lt; length; i++) &#123; //缩小选择的范围</span></span><br><span class=\"line\"><span class=\"code\">    var min = array[i]; //假定范围内第一个为最小值</span></span><br><span class=\"line\"><span class=\"code\">    var index = i; //记录最小值的下标</span></span><br><span class=\"line\"><span class=\"code\">    for (var j = i + 1; j &lt; length; j++) &#123; //在范围内选取最小值</span></span><br><span class=\"line\"><span class=\"code\">      if (array[j] &lt; min) &#123;</span></span><br><span class=\"line\"><span class=\"code\">        min = array[j];</span></span><br><span class=\"line\"><span class=\"code\">        index = j;</span></span><br><span class=\"line\"><span class=\"code\">      &#125;</span></span><br><span class=\"line\"><span class=\"code\">    &#125;</span></span><br><span class=\"line\"><span class=\"code\">    if (index != i) &#123; //把范围内最小值交换到范围内第一个</span></span><br><span class=\"line\"><span class=\"code\">      var temp = array[i];</span></span><br><span class=\"line\"><span class=\"code\">      array[i] = array[index];</span></span><br><span class=\"line\"><span class=\"code\">      array[index] = temp;</span></span><br><span class=\"line\"><span class=\"code\">    &#125;</span></span><br><span class=\"line\"><span class=\"code\">    console.log(array);</span></span><br><span class=\"line\"><span class=\"code\">    console.log(&quot;---------------------&quot;);</span></span><br><span class=\"line\"><span class=\"code\">  &#125;</span></span><br><span class=\"line\"><span class=\"code\">  return array;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var arr = [ 1, 10, 100, 90, 65, 5, 4, 10, 2, 4 ];</span><br><span class=\"line\">var result = SelectionSort(arr);</span><br><span class=\"line\">console.log(result);</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"meta\">[ 1, 10, 100, 90, 65, 5, 4, 10, 2, 4 ]</span></span><br><span class=\"line\"><span class=\"code\">---------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 1, 2, 100, 90, 65, 5, 4, 10, 10, 4 ]</span></span><br><span class=\"line\"><span class=\"code\">---------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 1, 2, 4, 90, 65, 5, 100, 10, 10, 4 ]</span></span><br><span class=\"line\"><span class=\"code\">---------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 1, 2, 4, 4, 65, 5, 100, 10, 10, 90 ]</span></span><br><span class=\"line\"><span class=\"code\">---------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 1, 2, 4, 4, 5, 65, 100, 10, 10, 90 ]</span></span><br><span class=\"line\"><span class=\"code\">---------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 1, 2, 4, 4, 5, 10, 100, 65, 10, 90 ]</span></span><br><span class=\"line\"><span class=\"code\">---------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 1, 2, 4, 4, 5, 10, 10, 65, 100, 90 ]</span></span><br><span class=\"line\"><span class=\"code\">---------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 1, 2, 4, 4, 5, 10, 10, 65, 100, 90 ]</span></span><br><span class=\"line\"><span class=\"code\">---------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 1, 2, 4, 4, 5, 10, 10, 65, 90, 100 ]</span></span><br><span class=\"line\"><span class=\"code\">---------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 1, 2, 4, 4, 5, 10, 10, 65, 90, 100 ]</span></span><br><span class=\"line\"><span class=\"code\">---------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 1, 2, 4, 4, 5, 10, 10, 65, 90, 100 ]</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h1><figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">function InsertionSort(array) &#123;</span><br><span class=\"line\"><span class=\"code\">  var length = array.length;</span></span><br><span class=\"line\"><span class=\"code\">  for (var i = 0; i &lt; length - 1; i++) &#123;</span></span><br><span class=\"line\"><span class=\"code\">    //i代表已经排序好的序列最后一项下标</span></span><br><span class=\"line\"><span class=\"code\">    var insert = array[i+1];</span></span><br><span class=\"line\"><span class=\"code\">    var index = i + 1;//记录要被插入的下标</span></span><br><span class=\"line\"><span class=\"code\">    for (var j = i; j &gt;= 0; j--) &#123;</span></span><br><span class=\"line\"><span class=\"code\">      if (insert &lt; array[j]) &#123;</span></span><br><span class=\"line\"><span class=\"code\">        //要插入的项比它小，往后移动</span></span><br><span class=\"line\"><span class=\"code\">        array[j+1] = array[j];</span></span><br><span class=\"line\"><span class=\"code\">        index = j;</span></span><br><span class=\"line\"><span class=\"code\">      &#125;</span></span><br><span class=\"line\"><span class=\"code\">    &#125;</span></span><br><span class=\"line\"><span class=\"code\">    array[index] = insert;</span></span><br><span class=\"line\"><span class=\"code\">    console.log(array);</span></span><br><span class=\"line\"><span class=\"code\">    console.log(&quot;-----------------------&quot;);</span></span><br><span class=\"line\"><span class=\"code\">  &#125;</span></span><br><span class=\"line\"><span class=\"code\">  return array;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var arr = [100,90,80,62,80,8,1,2,39];</span><br><span class=\"line\">var result = InsertionSort(arr);</span><br><span class=\"line\">console.log(result);</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"meta\">[ 90, 100, 80, 62, 80, 8, 1, 2, 39 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 80, 90, 100, 62, 80, 8, 1, 2, 39 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 62, 80, 90, 100, 80, 8, 1, 2, 39 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 62, 80, 80, 90, 100, 8, 1, 2, 39 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 8, 62, 80, 80, 90, 100, 1, 2, 39 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 1, 8, 62, 80, 80, 90, 100, 2, 39 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 1, 2, 8, 62, 80, 80, 90, 100, 39 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 1, 2, 8, 39, 62, 80, 80, 90, 100 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 1, 2, 8, 39, 62, 80, 80, 90, 100 ]</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h1><figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ShellSort</span>(<span class=\"params\">array</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">length</span> = <span class=\"built_in\">array</span>.<span class=\"built_in\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> gap = Math.<span class=\"built_in\">round</span>(<span class=\"built_in\">length</span> / <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (gap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = gap; i &lt; <span class=\"built_in\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> <span class=\"built_in\">insert</span> = <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">      <span class=\"keyword\">var</span> index = i;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i; j &gt;= <span class=\"number\">0</span>; j-=gap) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">insert</span> &lt; <span class=\"built_in\">array</span>[j]) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">array</span>[j+gap] = <span class=\"built_in\">array</span>[j];</span><br><span class=\"line\">          index = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">array</span>[index] = <span class=\"built_in\">insert</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(<span class=\"built_in\">array</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(<span class=\"string\">&quot;-----------------------&quot;</span>);</span><br><span class=\"line\">    gap = Math.<span class=\"built_in\">round</span>(gap/<span class=\"number\">2</span> - <span class=\"number\">0.1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">array</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [ <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">94</span>, <span class=\"number\">33</span>, <span class=\"number\">82</span>, <span class=\"number\">25</span>, <span class=\"number\">59</span>, <span class=\"number\">94</span>, <span class=\"number\">65</span>, <span class=\"number\">23</span>, <span class=\"number\">45</span>, <span class=\"number\">27</span>, <span class=\"number\">73</span>, <span class=\"number\">25</span>, <span class=\"number\">39</span>, <span class=\"number\">10</span> ];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = ShellSort(arr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(result); </span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">[ 13, 14, 45, 27, 73, 25, 39, 10, 65, 23, 94, 33, 82, 25, 59, 94 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 13, 14, 39, 10, 65, 23, 45, 27, 73, 25, 59, 33, 82, 25, 94, 94 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 13, 10, 39, 14, 45, 23, 59, 25, 65, 25, 73, 27, 82, 33, 94, 94 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 10, 13, 14, 23, 25, 25, 27, 33, 39, 45, 59, 65, 73, 82, 94, 94 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 10, 13, 14, 23, 25, 25, 27, 33, 39, 45, 59, 65, 73, 82, 94, 94 ]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h1><figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">function MergeSort(array) &#123;</span><br><span class=\"line\"><span class=\"code\">  var length = array.length;</span></span><br><span class=\"line\"><span class=\"code\">  if (length &lt;= 1) &#123;</span></span><br><span class=\"line\"><span class=\"code\">    return array;</span></span><br><span class=\"line\"><span class=\"code\">  &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"code\">    var num = Math.ceil(length/2);</span></span><br><span class=\"line\"><span class=\"code\">    var left = MergeSort(array.slice(0, num));</span></span><br><span class=\"line\"><span class=\"code\">    var right = MergeSort(array.slice(num, length));</span></span><br><span class=\"line\"><span class=\"code\">    return merge(left, right);</span></span><br><span class=\"line\"><span class=\"code\">  &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function merge(left, right) &#123;</span><br><span class=\"line\"><span class=\"code\">  console.log(left);</span></span><br><span class=\"line\"><span class=\"code\">  console.log(right);</span></span><br><span class=\"line\"><span class=\"code\">  var a = new Array();</span></span><br><span class=\"line\"><span class=\"code\">  while (left.length &gt; 0 &amp;&amp; right.length &gt; 0) &#123;</span></span><br><span class=\"line\"><span class=\"code\">    if (left[0] &lt;= right[0]) &#123;</span></span><br><span class=\"line\"><span class=\"code\">      var temp = left.shift();</span></span><br><span class=\"line\"><span class=\"code\">      a.push(temp);</span></span><br><span class=\"line\"><span class=\"code\">    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"code\">      var temp = right.shift();</span></span><br><span class=\"line\"><span class=\"code\">      a.push(temp);</span></span><br><span class=\"line\"><span class=\"code\">    &#125;</span></span><br><span class=\"line\"><span class=\"code\">  &#125;</span></span><br><span class=\"line\"><span class=\"code\">  if (left.length &gt; 0) &#123;</span></span><br><span class=\"line\"><span class=\"code\">    a = a.concat(left);</span></span><br><span class=\"line\"><span class=\"code\">  &#125;</span></span><br><span class=\"line\"><span class=\"code\">  if (right.length &gt; 0) &#123;</span></span><br><span class=\"line\"><span class=\"code\">    a = a.concat(right);</span></span><br><span class=\"line\"><span class=\"code\">  &#125;</span></span><br><span class=\"line\"><span class=\"code\">  console.log(a);</span></span><br><span class=\"line\"><span class=\"code\">  console.log(&quot;-----------------------------&quot;);</span></span><br><span class=\"line\"><span class=\"code\">  return a;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var arr = [ 13, 14, 94, 33, 82, 25, 59, 94, 65, 23, 45, 27, 73, 25, 39, 10 ];</span><br><span class=\"line\">var result = MergeSort(arr);</span><br><span class=\"line\">console.log(result);</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"meta\">[ 13 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 14 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 13, 14 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 94 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 33 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 33, 94 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 13, 14 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 33, 94 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 13, 14, 33, 94 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 82 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 25 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 25, 82 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 59 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 94 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 59, 94 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 25, 82 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 59, 94 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 25, 59, 82, 94 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 13, 14, 33, 94 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 25, 59, 82, 94 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 13, 14, 25, 33, 59, 82, 94, 94 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 65 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 23 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 23, 65 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 45 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 27 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 27, 45 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 23, 65 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 27, 45 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 23, 27, 45, 65 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 73 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 25 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 25, 73 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 39 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 10 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 10, 39 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 25, 73 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 10, 39 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 10, 25, 39, 73 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 23, 27, 45, 65 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 10, 25, 39, 73 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 10, 23, 25, 27, 39, 45, 65, 73 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 13, 14, 25, 33, 59, 82, 94, 94 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 10, 23, 25, 27, 39, 45, 65, 73 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 10, 13, 14, 23, 25, 25, 27, 33, 39, 45, 59, 65, 73, 82, 94, 94 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 10, 13, 14, 23, 25, 25, 27, 33, 39, 45, 59, 65, 73, 82, 94, 94 ]</span></span><br><span class=\"line\"><span class=\"code\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h1><figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">QuickSort</span>(<span class=\"params\">array</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">length</span> = <span class=\"built_in\">array</span>.<span class=\"built_in\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">length</span> &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">array</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> smaller = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bigger = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> base = [<span class=\"built_in\">array</span>[<span class=\"number\">0</span>]];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>[i] &lt;= base[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">        smaller.<span class=\"built_in\">push</span>(<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        bigger.<span class=\"built_in\">push</span>(<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(smaller.concat(base.concat(bigger)));</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(<span class=\"string\">&quot;-----------------------&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuickSort(smaller).concat(base.concat(QuickSort(bigger)));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [ <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">90</span>, <span class=\"number\">65</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span> ];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = QuickSort(arr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(result);</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">[ 5, 4, 2, 4, 8, 10, 100, 90, 65, 10 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 4, 2, 4, 5 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 2, 4, 4 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 2, 4 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 10, 10, 100, 90, 65 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 90, 65, 100 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 65, 90 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 2, 4, 4, 5, 8, 10, 10, 65, 90, 100 ]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h1><figure class=\"highlight openscad\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countingSort</span><span class=\"params\">(nums)</span> &#123;</span></span><br><span class=\"line\">           <span class=\"built_in\">let</span> arr = [];  <span class=\"comment\">// 定义一个空数组</span></span><br><span class=\"line\">           <span class=\"built_in\">let</span> <span class=\"built_in\">max</span> = Math.<span class=\"built_in\">max</span>(...nums); <span class=\"comment\">// 找到这个数组的 最大 最小值</span></span><br><span class=\"line\">           <span class=\"built_in\">let</span> <span class=\"built_in\">min</span> = Math.<span class=\"built_in\">min</span>(...nums);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// 装桶</span></span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> i=<span class=\"number\">0</span>, len=nums.length; i&lt;len; i++) &#123; <span class=\"comment\">// 把传入数组的值作为下标  装入一个长度为数组最大值长度的临时数组</span></span><br><span class=\"line\">               <span class=\"comment\">// 比如 第一位是5  传入arr后 arr为[,,,,,1]   =&gt;   [empty × 5, 1]</span></span><br><span class=\"line\">               <span class=\"built_in\">let</span> temp = nums[i];</span><br><span class=\"line\">               arr[temp] = arr[temp] + <span class=\"number\">1</span> || <span class=\"number\">1</span>;  </span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"built_in\">let</span> index = <span class=\"number\">0</span>;  <span class=\"comment\">// 定义一个索引 这个索引是 后面用来改变原数组的 </span></span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// 还原原数组</span></span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> i=<span class=\"built_in\">min</span>; i&lt;=<span class=\"built_in\">max</span>; i++) &#123; <span class=\"comment\">// 写一个for循环 i=原数组最小值  i&gt;原数组最大值的时候跳出循环  i每次++</span></span><br><span class=\"line\">               while(arr[i] &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 从arr[i]开始 如果他&gt;0 </span></span><br><span class=\"line\">                   nums[index++] = i; <span class=\"comment\">// 就把原数组的第index位赋值为 i</span></span><br><span class=\"line\">                   arr[i]--; <span class=\"comment\">// 每赋值完一次后 临时数组当前位的值就--   如果=0 就说明这位上没有值了</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>js算法排序可视化网站：链接: <a href=\"https://www.csdn.net/\">https://visualgo.net</a></p>\n<h1 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h1><figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">function BubbleSort(array) &#123;</span><br><span class=\"line\"><span class=\"code\">  var length = array.length;</span></span><br><span class=\"line\"><span class=\"code\">  for (var i = length - 1; i &gt; 0; i--) &#123; //用于缩小范围</span></span><br><span class=\"line\"><span class=\"code\">    for (var j = 0; j &lt; i; j++) &#123; //在范围内进行冒泡，在此范围内最大的一个将冒到最后面</span></span><br><span class=\"line\"><span class=\"code\">      if (array[j] &gt; array[j+1]) &#123; </span></span><br><span class=\"line\"><span class=\"code\">        var temp = array[j];</span></span><br><span class=\"line\"><span class=\"code\">        array[j] = array[j+1];</span></span><br><span class=\"line\"><span class=\"code\">        array[j+1] = temp;</span></span><br><span class=\"line\"><span class=\"code\">      &#125;</span></span><br><span class=\"line\"><span class=\"code\">    &#125;</span></span><br><span class=\"line\"><span class=\"code\">    console.log(array);</span></span><br><span class=\"line\"><span class=\"code\">    console.log(&quot;-----------------------------&quot;);</span></span><br><span class=\"line\"><span class=\"code\">  &#125;</span></span><br><span class=\"line\"><span class=\"code\">  return array;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var arr = [10,9,8,7,7,6,5,11,3];</span><br><span class=\"line\">var result = BubbleSort(arr);</span><br><span class=\"line\">console.log(result); </span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"meta\">[ 9, 8, 7, 7, 6, 5, 10, 3, 11 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 8, 7, 7, 6, 5, 9, 3, 10, 11 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 7, 7, 6, 5, 8, 3, 9, 10, 11 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 7, 6, 5, 7, 3, 8, 9, 10, 11 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 6, 5, 7, 3, 7, 8, 9, 10, 11 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 5, 6, 3, 7, 7, 8, 9, 10, 11 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 5, 3, 6, 7, 7, 8, 9, 10, 11 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 3, 5, 6, 7, 7, 8, 9, 10, 11 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 3, 5, 6, 7, 7, 8, 9, 10, 11 ]</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h1><figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">function SelectionSort(array) &#123;</span><br><span class=\"line\"><span class=\"code\">  var length = array.length;</span></span><br><span class=\"line\"><span class=\"code\">  for (var i = 0; i &lt; length; i++) &#123; //缩小选择的范围</span></span><br><span class=\"line\"><span class=\"code\">    var min = array[i]; //假定范围内第一个为最小值</span></span><br><span class=\"line\"><span class=\"code\">    var index = i; //记录最小值的下标</span></span><br><span class=\"line\"><span class=\"code\">    for (var j = i + 1; j &lt; length; j++) &#123; //在范围内选取最小值</span></span><br><span class=\"line\"><span class=\"code\">      if (array[j] &lt; min) &#123;</span></span><br><span class=\"line\"><span class=\"code\">        min = array[j];</span></span><br><span class=\"line\"><span class=\"code\">        index = j;</span></span><br><span class=\"line\"><span class=\"code\">      &#125;</span></span><br><span class=\"line\"><span class=\"code\">    &#125;</span></span><br><span class=\"line\"><span class=\"code\">    if (index != i) &#123; //把范围内最小值交换到范围内第一个</span></span><br><span class=\"line\"><span class=\"code\">      var temp = array[i];</span></span><br><span class=\"line\"><span class=\"code\">      array[i] = array[index];</span></span><br><span class=\"line\"><span class=\"code\">      array[index] = temp;</span></span><br><span class=\"line\"><span class=\"code\">    &#125;</span></span><br><span class=\"line\"><span class=\"code\">    console.log(array);</span></span><br><span class=\"line\"><span class=\"code\">    console.log(&quot;---------------------&quot;);</span></span><br><span class=\"line\"><span class=\"code\">  &#125;</span></span><br><span class=\"line\"><span class=\"code\">  return array;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var arr = [ 1, 10, 100, 90, 65, 5, 4, 10, 2, 4 ];</span><br><span class=\"line\">var result = SelectionSort(arr);</span><br><span class=\"line\">console.log(result);</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"meta\">[ 1, 10, 100, 90, 65, 5, 4, 10, 2, 4 ]</span></span><br><span class=\"line\"><span class=\"code\">---------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 1, 2, 100, 90, 65, 5, 4, 10, 10, 4 ]</span></span><br><span class=\"line\"><span class=\"code\">---------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 1, 2, 4, 90, 65, 5, 100, 10, 10, 4 ]</span></span><br><span class=\"line\"><span class=\"code\">---------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 1, 2, 4, 4, 65, 5, 100, 10, 10, 90 ]</span></span><br><span class=\"line\"><span class=\"code\">---------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 1, 2, 4, 4, 5, 65, 100, 10, 10, 90 ]</span></span><br><span class=\"line\"><span class=\"code\">---------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 1, 2, 4, 4, 5, 10, 100, 65, 10, 90 ]</span></span><br><span class=\"line\"><span class=\"code\">---------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 1, 2, 4, 4, 5, 10, 10, 65, 100, 90 ]</span></span><br><span class=\"line\"><span class=\"code\">---------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 1, 2, 4, 4, 5, 10, 10, 65, 100, 90 ]</span></span><br><span class=\"line\"><span class=\"code\">---------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 1, 2, 4, 4, 5, 10, 10, 65, 90, 100 ]</span></span><br><span class=\"line\"><span class=\"code\">---------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 1, 2, 4, 4, 5, 10, 10, 65, 90, 100 ]</span></span><br><span class=\"line\"><span class=\"code\">---------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 1, 2, 4, 4, 5, 10, 10, 65, 90, 100 ]</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h1><figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">function InsertionSort(array) &#123;</span><br><span class=\"line\"><span class=\"code\">  var length = array.length;</span></span><br><span class=\"line\"><span class=\"code\">  for (var i = 0; i &lt; length - 1; i++) &#123;</span></span><br><span class=\"line\"><span class=\"code\">    //i代表已经排序好的序列最后一项下标</span></span><br><span class=\"line\"><span class=\"code\">    var insert = array[i+1];</span></span><br><span class=\"line\"><span class=\"code\">    var index = i + 1;//记录要被插入的下标</span></span><br><span class=\"line\"><span class=\"code\">    for (var j = i; j &gt;= 0; j--) &#123;</span></span><br><span class=\"line\"><span class=\"code\">      if (insert &lt; array[j]) &#123;</span></span><br><span class=\"line\"><span class=\"code\">        //要插入的项比它小，往后移动</span></span><br><span class=\"line\"><span class=\"code\">        array[j+1] = array[j];</span></span><br><span class=\"line\"><span class=\"code\">        index = j;</span></span><br><span class=\"line\"><span class=\"code\">      &#125;</span></span><br><span class=\"line\"><span class=\"code\">    &#125;</span></span><br><span class=\"line\"><span class=\"code\">    array[index] = insert;</span></span><br><span class=\"line\"><span class=\"code\">    console.log(array);</span></span><br><span class=\"line\"><span class=\"code\">    console.log(&quot;-----------------------&quot;);</span></span><br><span class=\"line\"><span class=\"code\">  &#125;</span></span><br><span class=\"line\"><span class=\"code\">  return array;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var arr = [100,90,80,62,80,8,1,2,39];</span><br><span class=\"line\">var result = InsertionSort(arr);</span><br><span class=\"line\">console.log(result);</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"meta\">[ 90, 100, 80, 62, 80, 8, 1, 2, 39 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 80, 90, 100, 62, 80, 8, 1, 2, 39 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 62, 80, 90, 100, 80, 8, 1, 2, 39 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 62, 80, 80, 90, 100, 8, 1, 2, 39 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 8, 62, 80, 80, 90, 100, 1, 2, 39 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 1, 8, 62, 80, 80, 90, 100, 2, 39 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 1, 2, 8, 62, 80, 80, 90, 100, 39 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 1, 2, 8, 39, 62, 80, 80, 90, 100 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 1, 2, 8, 39, 62, 80, 80, 90, 100 ]</span></span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h1><figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ShellSort</span>(<span class=\"params\">array</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">length</span> = <span class=\"built_in\">array</span>.<span class=\"built_in\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> gap = Math.<span class=\"built_in\">round</span>(<span class=\"built_in\">length</span> / <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (gap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = gap; i &lt; <span class=\"built_in\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> <span class=\"built_in\">insert</span> = <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">      <span class=\"keyword\">var</span> index = i;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i; j &gt;= <span class=\"number\">0</span>; j-=gap) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">insert</span> &lt; <span class=\"built_in\">array</span>[j]) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">array</span>[j+gap] = <span class=\"built_in\">array</span>[j];</span><br><span class=\"line\">          index = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">array</span>[index] = <span class=\"built_in\">insert</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(<span class=\"built_in\">array</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(<span class=\"string\">&quot;-----------------------&quot;</span>);</span><br><span class=\"line\">    gap = Math.<span class=\"built_in\">round</span>(gap/<span class=\"number\">2</span> - <span class=\"number\">0.1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">array</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [ <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">94</span>, <span class=\"number\">33</span>, <span class=\"number\">82</span>, <span class=\"number\">25</span>, <span class=\"number\">59</span>, <span class=\"number\">94</span>, <span class=\"number\">65</span>, <span class=\"number\">23</span>, <span class=\"number\">45</span>, <span class=\"number\">27</span>, <span class=\"number\">73</span>, <span class=\"number\">25</span>, <span class=\"number\">39</span>, <span class=\"number\">10</span> ];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = ShellSort(arr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(result); </span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">[ 13, 14, 45, 27, 73, 25, 39, 10, 65, 23, 94, 33, 82, 25, 59, 94 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 13, 14, 39, 10, 65, 23, 45, 27, 73, 25, 59, 33, 82, 25, 94, 94 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 13, 10, 39, 14, 45, 23, 59, 25, 65, 25, 73, 27, 82, 33, 94, 94 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 10, 13, 14, 23, 25, 25, 27, 33, 39, 45, 59, 65, 73, 82, 94, 94 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 10, 13, 14, 23, 25, 25, 27, 33, 39, 45, 59, 65, 73, 82, 94, 94 ]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h1><figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">function MergeSort(array) &#123;</span><br><span class=\"line\"><span class=\"code\">  var length = array.length;</span></span><br><span class=\"line\"><span class=\"code\">  if (length &lt;= 1) &#123;</span></span><br><span class=\"line\"><span class=\"code\">    return array;</span></span><br><span class=\"line\"><span class=\"code\">  &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"code\">    var num = Math.ceil(length/2);</span></span><br><span class=\"line\"><span class=\"code\">    var left = MergeSort(array.slice(0, num));</span></span><br><span class=\"line\"><span class=\"code\">    var right = MergeSort(array.slice(num, length));</span></span><br><span class=\"line\"><span class=\"code\">    return merge(left, right);</span></span><br><span class=\"line\"><span class=\"code\">  &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function merge(left, right) &#123;</span><br><span class=\"line\"><span class=\"code\">  console.log(left);</span></span><br><span class=\"line\"><span class=\"code\">  console.log(right);</span></span><br><span class=\"line\"><span class=\"code\">  var a = new Array();</span></span><br><span class=\"line\"><span class=\"code\">  while (left.length &gt; 0 &amp;&amp; right.length &gt; 0) &#123;</span></span><br><span class=\"line\"><span class=\"code\">    if (left[0] &lt;= right[0]) &#123;</span></span><br><span class=\"line\"><span class=\"code\">      var temp = left.shift();</span></span><br><span class=\"line\"><span class=\"code\">      a.push(temp);</span></span><br><span class=\"line\"><span class=\"code\">    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"code\">      var temp = right.shift();</span></span><br><span class=\"line\"><span class=\"code\">      a.push(temp);</span></span><br><span class=\"line\"><span class=\"code\">    &#125;</span></span><br><span class=\"line\"><span class=\"code\">  &#125;</span></span><br><span class=\"line\"><span class=\"code\">  if (left.length &gt; 0) &#123;</span></span><br><span class=\"line\"><span class=\"code\">    a = a.concat(left);</span></span><br><span class=\"line\"><span class=\"code\">  &#125;</span></span><br><span class=\"line\"><span class=\"code\">  if (right.length &gt; 0) &#123;</span></span><br><span class=\"line\"><span class=\"code\">    a = a.concat(right);</span></span><br><span class=\"line\"><span class=\"code\">  &#125;</span></span><br><span class=\"line\"><span class=\"code\">  console.log(a);</span></span><br><span class=\"line\"><span class=\"code\">  console.log(&quot;-----------------------------&quot;);</span></span><br><span class=\"line\"><span class=\"code\">  return a;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var arr = [ 13, 14, 94, 33, 82, 25, 59, 94, 65, 23, 45, 27, 73, 25, 39, 10 ];</span><br><span class=\"line\">var result = MergeSort(arr);</span><br><span class=\"line\">console.log(result);</span><br><span class=\"line\">/*</span><br><span class=\"line\"><span class=\"meta\">[ 13 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 14 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 13, 14 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 94 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 33 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 33, 94 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 13, 14 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 33, 94 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 13, 14, 33, 94 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 82 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 25 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 25, 82 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 59 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 94 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 59, 94 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 25, 82 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 59, 94 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 25, 59, 82, 94 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 13, 14, 33, 94 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 25, 59, 82, 94 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 13, 14, 25, 33, 59, 82, 94, 94 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 65 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 23 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 23, 65 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 45 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 27 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 27, 45 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 23, 65 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 27, 45 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 23, 27, 45, 65 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 73 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 25 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 25, 73 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 39 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 10 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 10, 39 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 25, 73 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 10, 39 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 10, 25, 39, 73 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 23, 27, 45, 65 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 10, 25, 39, 73 ]</span></span><br><span class=\"line\"><span class=\"code\">[ 10, 23, 25, 27, 39, 45, 65, 73 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"meta\">[ 13, 14, 25, 33, 59, 82, 94, 94 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 10, 23, 25, 27, 39, 45, 65, 73 ]</span></span><br><span class=\"line\"><span class=\"meta\">[ 10, 13, 14, 23, 25, 25, 27, 33, 39, 45, 59, 65, 73, 82, 94, 94 ]</span></span><br><span class=\"line\"><span class=\"code\">-----------------------------</span></span><br><span class=\"line\"><span class=\"code\">[ 10, 13, 14, 23, 25, 25, 27, 33, 39, 45, 59, 65, 73, 82, 94, 94 ]</span></span><br><span class=\"line\"><span class=\"code\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h1><figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">QuickSort</span>(<span class=\"params\">array</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">length</span> = <span class=\"built_in\">array</span>.<span class=\"built_in\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">length</span> &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">array</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> smaller = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bigger = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> base = [<span class=\"built_in\">array</span>[<span class=\"number\">0</span>]];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>[i] &lt;= base[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">        smaller.<span class=\"built_in\">push</span>(<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        bigger.<span class=\"built_in\">push</span>(<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(smaller.concat(base.concat(bigger)));</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(<span class=\"string\">&quot;-----------------------&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QuickSort(smaller).concat(base.concat(QuickSort(bigger)));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [ <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">90</span>, <span class=\"number\">65</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span> ];</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = QuickSort(arr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(result);</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">[ 5, 4, 2, 4, 8, 10, 100, 90, 65, 10 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 4, 2, 4, 5 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 2, 4, 4 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 2, 4 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 10, 10, 100, 90, 65 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 90, 65, 100 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 65, 90 ]</span></span><br><span class=\"line\"><span class=\"comment\">-----------------------</span></span><br><span class=\"line\"><span class=\"comment\">[ 2, 4, 4, 5, 8, 10, 10, 65, 90, 100 ]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h1><figure class=\"highlight openscad\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countingSort</span><span class=\"params\">(nums)</span> &#123;</span></span><br><span class=\"line\">           <span class=\"built_in\">let</span> arr = [];  <span class=\"comment\">// 定义一个空数组</span></span><br><span class=\"line\">           <span class=\"built_in\">let</span> <span class=\"built_in\">max</span> = Math.<span class=\"built_in\">max</span>(...nums); <span class=\"comment\">// 找到这个数组的 最大 最小值</span></span><br><span class=\"line\">           <span class=\"built_in\">let</span> <span class=\"built_in\">min</span> = Math.<span class=\"built_in\">min</span>(...nums);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// 装桶</span></span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> i=<span class=\"number\">0</span>, len=nums.length; i&lt;len; i++) &#123; <span class=\"comment\">// 把传入数组的值作为下标  装入一个长度为数组最大值长度的临时数组</span></span><br><span class=\"line\">               <span class=\"comment\">// 比如 第一位是5  传入arr后 arr为[,,,,,1]   =&gt;   [empty × 5, 1]</span></span><br><span class=\"line\">               <span class=\"built_in\">let</span> temp = nums[i];</span><br><span class=\"line\">               arr[temp] = arr[temp] + <span class=\"number\">1</span> || <span class=\"number\">1</span>;  </span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"built_in\">let</span> index = <span class=\"number\">0</span>;  <span class=\"comment\">// 定义一个索引 这个索引是 后面用来改变原数组的 </span></span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">// 还原原数组</span></span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> i=<span class=\"built_in\">min</span>; i&lt;=<span class=\"built_in\">max</span>; i++) &#123; <span class=\"comment\">// 写一个for循环 i=原数组最小值  i&gt;原数组最大值的时候跳出循环  i每次++</span></span><br><span class=\"line\">               while(arr[i] &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 从arr[i]开始 如果他&gt;0 </span></span><br><span class=\"line\">                   nums[index++] = i; <span class=\"comment\">// 就把原数组的第index位赋值为 i</span></span><br><span class=\"line\">                   arr[i]--; <span class=\"comment\">// 每赋值完一次后 临时数组当前位的值就--   如果=0 就说明这位上没有值了</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"vue-cli3创建项目","date":"2022-03-31T06:59:11.000Z","_content":"### 简介\nVue CLI 是一个基于 Vue.js 进行快速开发的完整系统，提供： \n通过 @vue/cli 实现的交互式的项目脚手架。  \n通过 @vue/cli + @vue/cli-service-global 实现的零配置原型开发。  \n一个运行时依赖 (@vue/cli-service)，该依赖： \n可升级； \n基于 webpack 构建，并带有合理的默认配置；  \n可以通过项目内的配置文件进行配置；  \n可以通过插件进行扩展。  \n一个丰富的官方插件集合，集成了前端生态中最好的工具。  \n一套完全图形化的创建和管理 Vue.js 项目的用户界面。 \nVue CLI 致力于将 Vue 生态中的工具基础标准化。它确保了各种构建工具能够基于智能的默认配置即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。与此同时，它也为每个工具提供了调整配置的灵活性，无需 eject。  \n![在这里插入图片描述](https://img-blog.csdnimg.cn/3bf082800cdc4173b30fcd27033aadf7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16)\n废话不多说，直接操作。\n\n\n### 步骤\n先检查电脑是否安装vue-cli\n```\nvue --version\n```\n若无\n```\nnpm i -g @vue/cli\n```\n创建vue项目\n```\nvue create project\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/85ed9e9907804e95bcc10fc6383f47cd.png)\n按键盘上下键可以选择默认（default）还是手动（Manually），如果选择default，一路回车执行下去就行了。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/8a2eaa1444d846b6b4a0a1158aeec47d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16)\n```\n--选择配置--\n//提示，空格键是选中与取消\nTypeScript 支持使用 TypeScript 书写源码\nProgressive Web App (PWA) Support PWA 支持。\nRouter 支持 vue-router 。\nVuex 支持 vuex 。\nCSS Pre-processors 支持 CSS 预处理器。\nLinter / Formatter 支持代码风格检查和格式化。\nUnit Testing 支持单元测试。\nE2E Testing 支持 E2E 测试。\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/6cf4c348c2e5491dad21b59f2bfbb645.png)\n选择3.x\n然后一路回车，css处理去我选择的是Saaa/SCSS\n![在这里插入图片描述](https://img-blog.csdnimg.cn/6960065aea69496491130506c741a86c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16)\n选择ESLint + Prettier\n![在这里插入图片描述](https://img-blog.csdnimg.cn/dd7937881d9343668e88acb8dbc388a1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16)\n选择保存就检查（Lint on save）\n![在这里插入图片描述](https://img-blog.csdnimg.cn/92f7560db23a48819e769dd7cd261939.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16)\n配置文件存放地方\n第一个是独立文件夹位置，第二个是在package.json文件里,这我选择独立文件夹\n![在这里插入图片描述](https://img-blog.csdnimg.cn/4958cb5afe6841a19a34406e8be7dd82.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16)\n然后继续默认回车，最后等待安装完成......\n![在这里插入图片描述](https://img-blog.csdnimg.cn/12498ece55ff4b2ba5e7754cbc12e285.png)\n启动\n```\ncd project\nnpm run serve\n```\n\n接下来配置一下vue.config.js文件，如果没有这个文件，就在src同一目录下创建，其实真正需要修改添加的也不多，简单的项目，大部分配置都默认好了。\n```\nmodule.exports = {\n  // 部署应用时的基本 URL\n  publicPath: process.env.NODE_ENV === 'production' ? '/' : '/',\n  // build时构建文件的目录 构建时传入 --no-clean 可关闭该行为\n  outputDir: 'dist',\n  // build时放置生成的静态资源 (js、css、img、fonts) 的 (相对于 outputDir 的) 目录\n  assetsDir: '',\n  // 指定生成的 index.html 的输出路径 (相对于 outputDir)。也可以是一个绝对路径。\n  indexPath: 'index.html',\n  // 默认在生成的静态资源文件名中包含hash以控制缓存\n  filenameHashing: true,\n  // 构建多页面应用，页面的配置\n  pages: {\n    index: {\n      // page 的入口\n      entry: 'src/main.ts',\n      // 模板来源\n      template: 'public/index.html',\n      // 在 dist/index.html 的输出\n      filename: 'index.html',\n      // 当使用 title 选项时，\n      // template 中的 title 标签需要是 <title><%= htmlWebpackPlugin.options.title %></title>\n      title: 'Index Page',\n      // 在这个页面中包含的块，默认情况下会包含\n      // 提取出来的通用 chunk 和 vendor chunk。\n      chunks: ['chunk-vendors', 'chunk-common', 'index']\n    },\n    // 当使用只有入口的字符串格式时，\n    // 模板会被推导为 `public/subpage.html`\n    // 并且如果找不到的话，就回退到 `public/index.html`。\n    // 输出文件名会被推导为 `subpage.html`。\n    // subpage: 'src/subpage/main.js'\n  },\n  // 是否在开发环境下通过 eslint-loader 在每次保存时 lint 代码 (在生产构建时禁用 eslint-loader)\n  lintOnSave: process.env.NODE_ENV !== 'production',\n  // 是否使用包含运行时编译器的 Vue 构建版本\n  runtimeCompiler: false,\n  // Babel 显式转译列表\n  transpileDependencies: [],\n  // 如果你不需要生产环境的 source map，可以将其设置为 false 以加速生产环境构建\n  productionSourceMap: true,\n  // 设置生成的 HTML 中 <link rel=\"stylesheet\"> 和 <script> 标签的 crossorigin 属性（注：仅影响构建时注入的标签）\n  crossorigin: '',\n  // 在生成的 HTML 中的 <link rel=\"stylesheet\"> 和 <script> 标签上启用 Subresource Integrity (SRI)\n  integrity: false,\n  // 如果这个值是一个对象，则会通过 webpack-merge 合并到最终的配置中\n  // 如果你需要基于环境有条件地配置行为，或者想要直接修改配置，那就换成一个函数 (该函数会在环境变量被设置之后懒执行)。该方法的第一个参数会收到已经解析好的配置。在函数内，你可以直接修改配置，或者返回一个将会被合并的对象\n  configureWebpack: {},\n  // 对内部的 webpack 配置（比如修改、增加Loader选项）(链式操作)\n  chainWebpack: () => {},\n  // css的处理\n  css: {\n    // // 当为true时，css文件名可省略 module 默认为 false\n    // modules: false,\n    // 是否将组件中的 CSS 提取至一个独立的 CSS 文件中,当作为一个库构建时，你也可以将其设置为 false 免得用户自己导入 CSS\n    // 默认生产环境下是 true，开发环境下是 false\n    extract: false,\n    // 是否为 CSS 开启 source map。设置为 true 之后可能会影响构建的性能\n    sourceMap: false,\n    //向 CSS 相关的 loader 传递选项(支持 css-loader postcss-loader sass-loader less-loader stylus-loader)\n    loaderOptions: {\n      css: {},\n      less: {}\n    }\n  },\n  // 所有 webpack-dev-server 的选项都支持\n  devServer: {\n    open: false,\n    // host: 'localhost', //默认是 localhost。如果你希望服务器外部可访问，指定如下 host: '0.0.0.0'，设置之后之后可以访问ip地址\n    port: 8080,\n    hot: true,\n    // proxy: {\n    //   '/': {\n    //     target: 'http://localhost:8080', //目标接口域名\n    //     secure: false, //false为http访问，true为https访问\n    //     changeOrigin: true, //是否跨域\n    //     pathRewrite: {\n    //       '^/': '/' //重写接口\n    //     }\n    //   }\n    // }, // 设置代理\n  },\n  // 是否为 Babel 或 TypeScript 使用 thread-loader\n  parallel: require('os').cpus().length > 1,\n  // 向 PWA 插件传递选项\n  pwa: {},\n  // 可以用来传递任何第三方插件选项\n  pluginOptions: {}\n}\n```\n\n\n\n\n\n\n\n","source":"_posts/2022/03/vue-cli3创建项目.md","raw":"---\ntitle: vue-cli3创建项目\ncategories: Vue\ndate: 2022-03-31 14:59:11\ntags:\n     - vue\n---\n### 简介\nVue CLI 是一个基于 Vue.js 进行快速开发的完整系统，提供： \n通过 @vue/cli 实现的交互式的项目脚手架。  \n通过 @vue/cli + @vue/cli-service-global 实现的零配置原型开发。  \n一个运行时依赖 (@vue/cli-service)，该依赖： \n可升级； \n基于 webpack 构建，并带有合理的默认配置；  \n可以通过项目内的配置文件进行配置；  \n可以通过插件进行扩展。  \n一个丰富的官方插件集合，集成了前端生态中最好的工具。  \n一套完全图形化的创建和管理 Vue.js 项目的用户界面。 \nVue CLI 致力于将 Vue 生态中的工具基础标准化。它确保了各种构建工具能够基于智能的默认配置即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。与此同时，它也为每个工具提供了调整配置的灵活性，无需 eject。  \n![在这里插入图片描述](https://img-blog.csdnimg.cn/3bf082800cdc4173b30fcd27033aadf7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16)\n废话不多说，直接操作。\n\n\n### 步骤\n先检查电脑是否安装vue-cli\n```\nvue --version\n```\n若无\n```\nnpm i -g @vue/cli\n```\n创建vue项目\n```\nvue create project\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/85ed9e9907804e95bcc10fc6383f47cd.png)\n按键盘上下键可以选择默认（default）还是手动（Manually），如果选择default，一路回车执行下去就行了。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/8a2eaa1444d846b6b4a0a1158aeec47d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16)\n```\n--选择配置--\n//提示，空格键是选中与取消\nTypeScript 支持使用 TypeScript 书写源码\nProgressive Web App (PWA) Support PWA 支持。\nRouter 支持 vue-router 。\nVuex 支持 vuex 。\nCSS Pre-processors 支持 CSS 预处理器。\nLinter / Formatter 支持代码风格检查和格式化。\nUnit Testing 支持单元测试。\nE2E Testing 支持 E2E 测试。\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/6cf4c348c2e5491dad21b59f2bfbb645.png)\n选择3.x\n然后一路回车，css处理去我选择的是Saaa/SCSS\n![在这里插入图片描述](https://img-blog.csdnimg.cn/6960065aea69496491130506c741a86c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16)\n选择ESLint + Prettier\n![在这里插入图片描述](https://img-blog.csdnimg.cn/dd7937881d9343668e88acb8dbc388a1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16)\n选择保存就检查（Lint on save）\n![在这里插入图片描述](https://img-blog.csdnimg.cn/92f7560db23a48819e769dd7cd261939.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16)\n配置文件存放地方\n第一个是独立文件夹位置，第二个是在package.json文件里,这我选择独立文件夹\n![在这里插入图片描述](https://img-blog.csdnimg.cn/4958cb5afe6841a19a34406e8be7dd82.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16)\n然后继续默认回车，最后等待安装完成......\n![在这里插入图片描述](https://img-blog.csdnimg.cn/12498ece55ff4b2ba5e7754cbc12e285.png)\n启动\n```\ncd project\nnpm run serve\n```\n\n接下来配置一下vue.config.js文件，如果没有这个文件，就在src同一目录下创建，其实真正需要修改添加的也不多，简单的项目，大部分配置都默认好了。\n```\nmodule.exports = {\n  // 部署应用时的基本 URL\n  publicPath: process.env.NODE_ENV === 'production' ? '/' : '/',\n  // build时构建文件的目录 构建时传入 --no-clean 可关闭该行为\n  outputDir: 'dist',\n  // build时放置生成的静态资源 (js、css、img、fonts) 的 (相对于 outputDir 的) 目录\n  assetsDir: '',\n  // 指定生成的 index.html 的输出路径 (相对于 outputDir)。也可以是一个绝对路径。\n  indexPath: 'index.html',\n  // 默认在生成的静态资源文件名中包含hash以控制缓存\n  filenameHashing: true,\n  // 构建多页面应用，页面的配置\n  pages: {\n    index: {\n      // page 的入口\n      entry: 'src/main.ts',\n      // 模板来源\n      template: 'public/index.html',\n      // 在 dist/index.html 的输出\n      filename: 'index.html',\n      // 当使用 title 选项时，\n      // template 中的 title 标签需要是 <title><%= htmlWebpackPlugin.options.title %></title>\n      title: 'Index Page',\n      // 在这个页面中包含的块，默认情况下会包含\n      // 提取出来的通用 chunk 和 vendor chunk。\n      chunks: ['chunk-vendors', 'chunk-common', 'index']\n    },\n    // 当使用只有入口的字符串格式时，\n    // 模板会被推导为 `public/subpage.html`\n    // 并且如果找不到的话，就回退到 `public/index.html`。\n    // 输出文件名会被推导为 `subpage.html`。\n    // subpage: 'src/subpage/main.js'\n  },\n  // 是否在开发环境下通过 eslint-loader 在每次保存时 lint 代码 (在生产构建时禁用 eslint-loader)\n  lintOnSave: process.env.NODE_ENV !== 'production',\n  // 是否使用包含运行时编译器的 Vue 构建版本\n  runtimeCompiler: false,\n  // Babel 显式转译列表\n  transpileDependencies: [],\n  // 如果你不需要生产环境的 source map，可以将其设置为 false 以加速生产环境构建\n  productionSourceMap: true,\n  // 设置生成的 HTML 中 <link rel=\"stylesheet\"> 和 <script> 标签的 crossorigin 属性（注：仅影响构建时注入的标签）\n  crossorigin: '',\n  // 在生成的 HTML 中的 <link rel=\"stylesheet\"> 和 <script> 标签上启用 Subresource Integrity (SRI)\n  integrity: false,\n  // 如果这个值是一个对象，则会通过 webpack-merge 合并到最终的配置中\n  // 如果你需要基于环境有条件地配置行为，或者想要直接修改配置，那就换成一个函数 (该函数会在环境变量被设置之后懒执行)。该方法的第一个参数会收到已经解析好的配置。在函数内，你可以直接修改配置，或者返回一个将会被合并的对象\n  configureWebpack: {},\n  // 对内部的 webpack 配置（比如修改、增加Loader选项）(链式操作)\n  chainWebpack: () => {},\n  // css的处理\n  css: {\n    // // 当为true时，css文件名可省略 module 默认为 false\n    // modules: false,\n    // 是否将组件中的 CSS 提取至一个独立的 CSS 文件中,当作为一个库构建时，你也可以将其设置为 false 免得用户自己导入 CSS\n    // 默认生产环境下是 true，开发环境下是 false\n    extract: false,\n    // 是否为 CSS 开启 source map。设置为 true 之后可能会影响构建的性能\n    sourceMap: false,\n    //向 CSS 相关的 loader 传递选项(支持 css-loader postcss-loader sass-loader less-loader stylus-loader)\n    loaderOptions: {\n      css: {},\n      less: {}\n    }\n  },\n  // 所有 webpack-dev-server 的选项都支持\n  devServer: {\n    open: false,\n    // host: 'localhost', //默认是 localhost。如果你希望服务器外部可访问，指定如下 host: '0.0.0.0'，设置之后之后可以访问ip地址\n    port: 8080,\n    hot: true,\n    // proxy: {\n    //   '/': {\n    //     target: 'http://localhost:8080', //目标接口域名\n    //     secure: false, //false为http访问，true为https访问\n    //     changeOrigin: true, //是否跨域\n    //     pathRewrite: {\n    //       '^/': '/' //重写接口\n    //     }\n    //   }\n    // }, // 设置代理\n  },\n  // 是否为 Babel 或 TypeScript 使用 thread-loader\n  parallel: require('os').cpus().length > 1,\n  // 向 PWA 插件传递选项\n  pwa: {},\n  // 可以用来传递任何第三方插件选项\n  pluginOptions: {}\n}\n```\n\n\n\n\n\n\n\n","slug":"vue-cli3创建项目","published":1,"updated":"2022-04-04T11:44:33.810Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb34n002un4vo01lg0rzs","content":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，提供：<br>通过 @vue/cli 实现的交互式的项目脚手架。<br>通过 @vue/cli + @vue/cli-service-global 实现的零配置原型开发。<br>一个运行时依赖 (@vue/cli-service)，该依赖：<br>可升级；<br>基于 webpack 构建，并带有合理的默认配置；<br>可以通过项目内的配置文件进行配置；<br>可以通过插件进行扩展。<br>一个丰富的官方插件集合，集成了前端生态中最好的工具。<br>一套完全图形化的创建和管理 Vue.js 项目的用户界面。<br>Vue CLI 致力于将 Vue 生态中的工具基础标准化。它确保了各种构建工具能够基于智能的默认配置即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。与此同时，它也为每个工具提供了调整配置的灵活性，无需 eject。<br><img src=\"https://img-blog.csdnimg.cn/3bf082800cdc4173b30fcd27033aadf7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br>废话不多说，直接操作。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>先检查电脑是否安装vue-cli</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue <span class=\"comment\">--version</span></span><br></pre></td></tr></table></figure>\n<p>若无</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> i -g @vue/cli</span><br></pre></td></tr></table></figure>\n<p>创建vue项目</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue create <span class=\"keyword\">project</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/85ed9e9907804e95bcc10fc6383f47cd.png\" alt=\"在这里插入图片描述\"><br>按键盘上下键可以选择默认（default）还是手动（Manually），如果选择default，一路回车执行下去就行了。<br><img src=\"https://img-blog.csdnimg.cn/8a2eaa1444d846b6b4a0a1158aeec47d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"code\"><pre><span class=\"line\">--选择配置--</span><br><span class=\"line\">//提示，空格键是选中与取消</span><br><span class=\"line\">TypeScript 支持使用 TypeScript 书写源码</span><br><span class=\"line\"><span class=\"keyword\">Progress</span>ive Web App (PWA) Support PWA 支持。</span><br><span class=\"line\">Router 支持 vue-router 。</span><br><span class=\"line\">Vuex 支持 vuex 。</span><br><span class=\"line\">CSS Pre-processors 支持 CSS 预处理器。</span><br><span class=\"line\">Linter / Formatter 支持代码风格检查和格式化。</span><br><span class=\"line\">Unit Testing 支持单元测试。</span><br><span class=\"line\">E2E Testing 支持 E2E 测试。</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/6cf4c348c2e5491dad21b59f2bfbb645.png\" alt=\"在这里插入图片描述\"><br>选择3.x<br>然后一路回车，css处理去我选择的是Saaa/SCSS<br><img src=\"https://img-blog.csdnimg.cn/6960065aea69496491130506c741a86c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br>选择ESLint + Prettier<br><img src=\"https://img-blog.csdnimg.cn/dd7937881d9343668e88acb8dbc388a1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br>选择保存就检查（Lint on save）<br><img src=\"https://img-blog.csdnimg.cn/92f7560db23a48819e769dd7cd261939.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br>配置文件存放地方<br>第一个是独立文件夹位置，第二个是在package.json文件里,这我选择独立文件夹<br><img src=\"https://img-blog.csdnimg.cn/4958cb5afe6841a19a34406e8be7dd82.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br>然后继续默认回车，最后等待安装完成……<br><img src=\"https://img-blog.csdnimg.cn/12498ece55ff4b2ba5e7754cbc12e285.png\" alt=\"在这里插入图片描述\"><br>启动</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd project</span><br><span class=\"line\">npm <span class=\"built_in\">run</span> serve</span><br></pre></td></tr></table></figure>\n\n<p>接下来配置一下vue.config.js文件，如果没有这个文件，就在src同一目录下创建，其实真正需要修改添加的也不多，简单的项目，大部分配置都默认好了。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 部署应用时的基本 URL</span><br><span class=\"line\">  publicPath: process.env.NODE_ENV === <span class=\"string\">&#x27;production&#x27;</span> ? <span class=\"string\">&#x27;/&#x27;</span> : <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> build时构建文件的目录 构建时传入 --no-clean 可关闭该行为</span><br><span class=\"line\">  outputDir: <span class=\"string\">&#x27;dist&#x27;</span>,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> build时放置生成的静态资源 (js、css、img、fonts) 的 (相对于 outputDir 的) 目录</span><br><span class=\"line\">  assetsDir: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 指定生成的 index.html 的输出路径 (相对于 outputDir)。也可以是一个绝对路径。</span><br><span class=\"line\">  indexPath: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 默认在生成的静态资源文件名中包含hash以控制缓存</span><br><span class=\"line\">  filenameHashing: true,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 构建多页面应用，页面的配置</span><br><span class=\"line\">  pages: &#123;</span><br><span class=\"line\">    index: &#123;</span><br><span class=\"line\">      <span class=\"regexp\">//</span> page 的入口</span><br><span class=\"line\">      entry: <span class=\"string\">&#x27;src/main.ts&#x27;</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span> 模板来源</span><br><span class=\"line\">      template: <span class=\"string\">&#x27;public/index.html&#x27;</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span> 在 dist/index.html 的输出</span><br><span class=\"line\">      filename: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span> 当使用 title 选项时，</span><br><span class=\"line\">      <span class=\"regexp\">//</span> template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br><span class=\"line\">      title: <span class=\"string\">&#x27;Index Page&#x27;</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span> 在这个页面中包含的块，默认情况下会包含</span><br><span class=\"line\">      <span class=\"regexp\">//</span> 提取出来的通用 chunk 和 vendor chunk。</span><br><span class=\"line\">      chunks: [<span class=\"string\">&#x27;chunk-vendors&#x27;</span>, <span class=\"string\">&#x27;chunk-common&#x27;</span>, <span class=\"string\">&#x27;index&#x27;</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"regexp\">//</span> 当使用只有入口的字符串格式时，</span><br><span class=\"line\">    <span class=\"regexp\">//</span> 模板会被推导为 `public/subpage.html`</span><br><span class=\"line\">    <span class=\"regexp\">//</span> 并且如果找不到的话，就回退到 `public/index.html`。</span><br><span class=\"line\">    <span class=\"regexp\">//</span> 输出文件名会被推导为 `subpage.html`。</span><br><span class=\"line\">    <span class=\"regexp\">//</span> subpage: <span class=\"string\">&#x27;src/subpage/main.js&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 是否在开发环境下通过 eslint-loader 在每次保存时 lint 代码 (在生产构建时禁用 eslint-loader)</span><br><span class=\"line\">  lintOnSave: process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 是否使用包含运行时编译器的 Vue 构建版本</span><br><span class=\"line\">  runtimeCompiler: false,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> Babel 显式转译列表</span><br><span class=\"line\">  transpileDependencies: [],</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 如果你不需要生产环境的 source map，可以将其设置为 false 以加速生产环境构建</span><br><span class=\"line\">  productionSourceMap: true,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 设置生成的 HTML 中 &lt;link rel=<span class=\"string\">&quot;stylesheet&quot;</span>&gt; 和 &lt;script&gt; 标签的 crossorigin 属性（注：仅影响构建时注入的标签）</span><br><span class=\"line\">  crossorigin: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 在生成的 HTML 中的 &lt;link rel=<span class=\"string\">&quot;stylesheet&quot;</span>&gt; 和 &lt;script&gt; 标签上启用 Subresource Integrity (SRI)</span><br><span class=\"line\">  integrity: false,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 如果这个值是一个对象，则会通过 webpack-merge 合并到最终的配置中</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 如果你需要基于环境有条件地配置行为，或者想要直接修改配置，那就换成一个函数 (该函数会在环境变量被设置之后懒执行)。该方法的第一个参数会收到已经解析好的配置。在函数内，你可以直接修改配置，或者返回一个将会被合并的对象</span><br><span class=\"line\">  configureWebpack: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 对内部的 webpack 配置（比如修改、增加Loader选项）(链式操作)</span><br><span class=\"line\">  chainWebpack: () =&gt; &#123;&#125;,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> css的处理</span><br><span class=\"line\">  css: &#123;</span><br><span class=\"line\">    <span class=\"regexp\">//</span> <span class=\"regexp\">//</span> 当为true时，css文件名可省略 module 默认为 false</span><br><span class=\"line\">    <span class=\"regexp\">//</span> modules: false,</span><br><span class=\"line\">    <span class=\"regexp\">//</span> 是否将组件中的 CSS 提取至一个独立的 CSS 文件中,当作为一个库构建时，你也可以将其设置为 false 免得用户自己导入 CSS</span><br><span class=\"line\">    <span class=\"regexp\">//</span> 默认生产环境下是 true，开发环境下是 false</span><br><span class=\"line\">    extract: false,</span><br><span class=\"line\">    <span class=\"regexp\">//</span> 是否为 CSS 开启 source map。设置为 true 之后可能会影响构建的性能</span><br><span class=\"line\">    sourceMap: false,</span><br><span class=\"line\">    <span class=\"regexp\">//</span>向 CSS 相关的 loader 传递选项(支持 css-loader postcss-loader sass-loader less-loader stylus-loader)</span><br><span class=\"line\">    loaderOptions: &#123;</span><br><span class=\"line\">      css: &#123;&#125;,</span><br><span class=\"line\">      less: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 所有 webpack-dev-server 的选项都支持</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    open: false,</span><br><span class=\"line\">    <span class=\"regexp\">//</span> host: <span class=\"string\">&#x27;localhost&#x27;</span>, <span class=\"regexp\">//</span>默认是 localhost。如果你希望服务器外部可访问，指定如下 host: <span class=\"string\">&#x27;0.0.0.0&#x27;</span>，设置之后之后可以访问ip地址</span><br><span class=\"line\">    port: <span class=\"number\">8080</span>,</span><br><span class=\"line\">    hot: true,</span><br><span class=\"line\">    <span class=\"regexp\">//</span> proxy: &#123;</span><br><span class=\"line\">    <span class=\"regexp\">//</span>   <span class=\"string\">&#x27;/&#x27;</span>: &#123;</span><br><span class=\"line\">    <span class=\"regexp\">//</span>     target: <span class=\"string\">&#x27;http://localhost:8080&#x27;</span>, <span class=\"regexp\">//</span>目标接口域名</span><br><span class=\"line\">    <span class=\"regexp\">//</span>     secure: false, <span class=\"regexp\">//</span>false为http访问，true为https访问</span><br><span class=\"line\">    <span class=\"regexp\">//</span>     changeOrigin: true, <span class=\"regexp\">//</span>是否跨域</span><br><span class=\"line\">    <span class=\"regexp\">//</span>     pathRewrite: &#123;</span><br><span class=\"line\">    <span class=\"regexp\">//</span>       <span class=\"string\">&#x27;^/&#x27;</span>: <span class=\"string\">&#x27;/&#x27;</span> <span class=\"regexp\">//</span>重写接口</span><br><span class=\"line\">    <span class=\"regexp\">//</span>     &#125;</span><br><span class=\"line\">    <span class=\"regexp\">//</span>   &#125;</span><br><span class=\"line\">    <span class=\"regexp\">//</span> &#125;, <span class=\"regexp\">//</span> 设置代理</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 是否为 Babel 或 TypeScript 使用 thread-loader</span><br><span class=\"line\">  parallel: require(<span class=\"string\">&#x27;os&#x27;</span>).cpus().length &gt; <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 向 PWA 插件传递选项</span><br><span class=\"line\">  pwa: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 可以用来传递任何第三方插件选项</span><br><span class=\"line\">  pluginOptions: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，提供：<br>通过 @vue/cli 实现的交互式的项目脚手架。<br>通过 @vue/cli + @vue/cli-service-global 实现的零配置原型开发。<br>一个运行时依赖 (@vue/cli-service)，该依赖：<br>可升级；<br>基于 webpack 构建，并带有合理的默认配置；<br>可以通过项目内的配置文件进行配置；<br>可以通过插件进行扩展。<br>一个丰富的官方插件集合，集成了前端生态中最好的工具。<br>一套完全图形化的创建和管理 Vue.js 项目的用户界面。<br>Vue CLI 致力于将 Vue 生态中的工具基础标准化。它确保了各种构建工具能够基于智能的默认配置即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。与此同时，它也为每个工具提供了调整配置的灵活性，无需 eject。<br><img src=\"https://img-blog.csdnimg.cn/3bf082800cdc4173b30fcd27033aadf7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br>废话不多说，直接操作。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>先检查电脑是否安装vue-cli</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue <span class=\"comment\">--version</span></span><br></pre></td></tr></table></figure>\n<p>若无</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> i -g @vue/cli</span><br></pre></td></tr></table></figure>\n<p>创建vue项目</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue create <span class=\"keyword\">project</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/85ed9e9907804e95bcc10fc6383f47cd.png\" alt=\"在这里插入图片描述\"><br>按键盘上下键可以选择默认（default）还是手动（Manually），如果选择default，一路回车执行下去就行了。<br><img src=\"https://img-blog.csdnimg.cn/8a2eaa1444d846b6b4a0a1158aeec47d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"code\"><pre><span class=\"line\">--选择配置--</span><br><span class=\"line\">//提示，空格键是选中与取消</span><br><span class=\"line\">TypeScript 支持使用 TypeScript 书写源码</span><br><span class=\"line\"><span class=\"keyword\">Progress</span>ive Web App (PWA) Support PWA 支持。</span><br><span class=\"line\">Router 支持 vue-router 。</span><br><span class=\"line\">Vuex 支持 vuex 。</span><br><span class=\"line\">CSS Pre-processors 支持 CSS 预处理器。</span><br><span class=\"line\">Linter / Formatter 支持代码风格检查和格式化。</span><br><span class=\"line\">Unit Testing 支持单元测试。</span><br><span class=\"line\">E2E Testing 支持 E2E 测试。</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/6cf4c348c2e5491dad21b59f2bfbb645.png\" alt=\"在这里插入图片描述\"><br>选择3.x<br>然后一路回车，css处理去我选择的是Saaa/SCSS<br><img src=\"https://img-blog.csdnimg.cn/6960065aea69496491130506c741a86c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br>选择ESLint + Prettier<br><img src=\"https://img-blog.csdnimg.cn/dd7937881d9343668e88acb8dbc388a1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br>选择保存就检查（Lint on save）<br><img src=\"https://img-blog.csdnimg.cn/92f7560db23a48819e769dd7cd261939.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br>配置文件存放地方<br>第一个是独立文件夹位置，第二个是在package.json文件里,这我选择独立文件夹<br><img src=\"https://img-blog.csdnimg.cn/4958cb5afe6841a19a34406e8be7dd82.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pif6L6w5LiN5Y-K6Zaj5LiL,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br>然后继续默认回车，最后等待安装完成……<br><img src=\"https://img-blog.csdnimg.cn/12498ece55ff4b2ba5e7754cbc12e285.png\" alt=\"在这里插入图片描述\"><br>启动</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd project</span><br><span class=\"line\">npm <span class=\"built_in\">run</span> serve</span><br></pre></td></tr></table></figure>\n\n<p>接下来配置一下vue.config.js文件，如果没有这个文件，就在src同一目录下创建，其实真正需要修改添加的也不多，简单的项目，大部分配置都默认好了。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 部署应用时的基本 URL</span><br><span class=\"line\">  publicPath: process.env.NODE_ENV === <span class=\"string\">&#x27;production&#x27;</span> ? <span class=\"string\">&#x27;/&#x27;</span> : <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> build时构建文件的目录 构建时传入 --no-clean 可关闭该行为</span><br><span class=\"line\">  outputDir: <span class=\"string\">&#x27;dist&#x27;</span>,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> build时放置生成的静态资源 (js、css、img、fonts) 的 (相对于 outputDir 的) 目录</span><br><span class=\"line\">  assetsDir: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 指定生成的 index.html 的输出路径 (相对于 outputDir)。也可以是一个绝对路径。</span><br><span class=\"line\">  indexPath: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 默认在生成的静态资源文件名中包含hash以控制缓存</span><br><span class=\"line\">  filenameHashing: true,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 构建多页面应用，页面的配置</span><br><span class=\"line\">  pages: &#123;</span><br><span class=\"line\">    index: &#123;</span><br><span class=\"line\">      <span class=\"regexp\">//</span> page 的入口</span><br><span class=\"line\">      entry: <span class=\"string\">&#x27;src/main.ts&#x27;</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span> 模板来源</span><br><span class=\"line\">      template: <span class=\"string\">&#x27;public/index.html&#x27;</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span> 在 dist/index.html 的输出</span><br><span class=\"line\">      filename: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span> 当使用 title 选项时，</span><br><span class=\"line\">      <span class=\"regexp\">//</span> template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br><span class=\"line\">      title: <span class=\"string\">&#x27;Index Page&#x27;</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span> 在这个页面中包含的块，默认情况下会包含</span><br><span class=\"line\">      <span class=\"regexp\">//</span> 提取出来的通用 chunk 和 vendor chunk。</span><br><span class=\"line\">      chunks: [<span class=\"string\">&#x27;chunk-vendors&#x27;</span>, <span class=\"string\">&#x27;chunk-common&#x27;</span>, <span class=\"string\">&#x27;index&#x27;</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"regexp\">//</span> 当使用只有入口的字符串格式时，</span><br><span class=\"line\">    <span class=\"regexp\">//</span> 模板会被推导为 `public/subpage.html`</span><br><span class=\"line\">    <span class=\"regexp\">//</span> 并且如果找不到的话，就回退到 `public/index.html`。</span><br><span class=\"line\">    <span class=\"regexp\">//</span> 输出文件名会被推导为 `subpage.html`。</span><br><span class=\"line\">    <span class=\"regexp\">//</span> subpage: <span class=\"string\">&#x27;src/subpage/main.js&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 是否在开发环境下通过 eslint-loader 在每次保存时 lint 代码 (在生产构建时禁用 eslint-loader)</span><br><span class=\"line\">  lintOnSave: process.env.NODE_ENV !== <span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 是否使用包含运行时编译器的 Vue 构建版本</span><br><span class=\"line\">  runtimeCompiler: false,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> Babel 显式转译列表</span><br><span class=\"line\">  transpileDependencies: [],</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 如果你不需要生产环境的 source map，可以将其设置为 false 以加速生产环境构建</span><br><span class=\"line\">  productionSourceMap: true,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 设置生成的 HTML 中 &lt;link rel=<span class=\"string\">&quot;stylesheet&quot;</span>&gt; 和 &lt;script&gt; 标签的 crossorigin 属性（注：仅影响构建时注入的标签）</span><br><span class=\"line\">  crossorigin: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 在生成的 HTML 中的 &lt;link rel=<span class=\"string\">&quot;stylesheet&quot;</span>&gt; 和 &lt;script&gt; 标签上启用 Subresource Integrity (SRI)</span><br><span class=\"line\">  integrity: false,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 如果这个值是一个对象，则会通过 webpack-merge 合并到最终的配置中</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 如果你需要基于环境有条件地配置行为，或者想要直接修改配置，那就换成一个函数 (该函数会在环境变量被设置之后懒执行)。该方法的第一个参数会收到已经解析好的配置。在函数内，你可以直接修改配置，或者返回一个将会被合并的对象</span><br><span class=\"line\">  configureWebpack: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 对内部的 webpack 配置（比如修改、增加Loader选项）(链式操作)</span><br><span class=\"line\">  chainWebpack: () =&gt; &#123;&#125;,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> css的处理</span><br><span class=\"line\">  css: &#123;</span><br><span class=\"line\">    <span class=\"regexp\">//</span> <span class=\"regexp\">//</span> 当为true时，css文件名可省略 module 默认为 false</span><br><span class=\"line\">    <span class=\"regexp\">//</span> modules: false,</span><br><span class=\"line\">    <span class=\"regexp\">//</span> 是否将组件中的 CSS 提取至一个独立的 CSS 文件中,当作为一个库构建时，你也可以将其设置为 false 免得用户自己导入 CSS</span><br><span class=\"line\">    <span class=\"regexp\">//</span> 默认生产环境下是 true，开发环境下是 false</span><br><span class=\"line\">    extract: false,</span><br><span class=\"line\">    <span class=\"regexp\">//</span> 是否为 CSS 开启 source map。设置为 true 之后可能会影响构建的性能</span><br><span class=\"line\">    sourceMap: false,</span><br><span class=\"line\">    <span class=\"regexp\">//</span>向 CSS 相关的 loader 传递选项(支持 css-loader postcss-loader sass-loader less-loader stylus-loader)</span><br><span class=\"line\">    loaderOptions: &#123;</span><br><span class=\"line\">      css: &#123;&#125;,</span><br><span class=\"line\">      less: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 所有 webpack-dev-server 的选项都支持</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    open: false,</span><br><span class=\"line\">    <span class=\"regexp\">//</span> host: <span class=\"string\">&#x27;localhost&#x27;</span>, <span class=\"regexp\">//</span>默认是 localhost。如果你希望服务器外部可访问，指定如下 host: <span class=\"string\">&#x27;0.0.0.0&#x27;</span>，设置之后之后可以访问ip地址</span><br><span class=\"line\">    port: <span class=\"number\">8080</span>,</span><br><span class=\"line\">    hot: true,</span><br><span class=\"line\">    <span class=\"regexp\">//</span> proxy: &#123;</span><br><span class=\"line\">    <span class=\"regexp\">//</span>   <span class=\"string\">&#x27;/&#x27;</span>: &#123;</span><br><span class=\"line\">    <span class=\"regexp\">//</span>     target: <span class=\"string\">&#x27;http://localhost:8080&#x27;</span>, <span class=\"regexp\">//</span>目标接口域名</span><br><span class=\"line\">    <span class=\"regexp\">//</span>     secure: false, <span class=\"regexp\">//</span>false为http访问，true为https访问</span><br><span class=\"line\">    <span class=\"regexp\">//</span>     changeOrigin: true, <span class=\"regexp\">//</span>是否跨域</span><br><span class=\"line\">    <span class=\"regexp\">//</span>     pathRewrite: &#123;</span><br><span class=\"line\">    <span class=\"regexp\">//</span>       <span class=\"string\">&#x27;^/&#x27;</span>: <span class=\"string\">&#x27;/&#x27;</span> <span class=\"regexp\">//</span>重写接口</span><br><span class=\"line\">    <span class=\"regexp\">//</span>     &#125;</span><br><span class=\"line\">    <span class=\"regexp\">//</span>   &#125;</span><br><span class=\"line\">    <span class=\"regexp\">//</span> &#125;, <span class=\"regexp\">//</span> 设置代理</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 是否为 Babel 或 TypeScript 使用 thread-loader</span><br><span class=\"line\">  parallel: require(<span class=\"string\">&#x27;os&#x27;</span>).cpus().length &gt; <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 向 PWA 插件传递选项</span><br><span class=\"line\">  pwa: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"regexp\">//</span> 可以用来传递任何第三方插件选项</span><br><span class=\"line\">  pluginOptions: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n"},{"title":"人生何必太复杂","date":"2022-03-30T12:15:03.000Z","_content":"![./%E4%BA%BA%E7%94%9F%E4%BD%95%E5%BF%85%E5%A4%AA%E5%A4%8D%E6%9D%82](%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220404142320.jpg)\n    人生何必太复杂，细品生活得有一颗闲心。江山明月，本无常主，闲者便是主人。  \n    生活可以匆忙，但心态要轻闲。这一分“闲”是生活中的点滴欢喜，更是心情的宁静闲适。  \n\n    人至中年，忙不如闲，红尘多少事，不如偷得一点闲。  \n\n    罗丹说过:世界上并不缺少美，而是缺少发现美的眼睛。  \n\n    去触摸一片叶子的花纹，去闻一下夏日暴雨过后的清新空气.....那些我们有记忆的感觉，都会引发我们的心中的一丝 触动。  \n\n    一颗闲心，是发现美的眼睛，是慢下脚步的宁静，是修炼内心的平和恬淡。    \n\n    一颗闲心，不仅能够发现自然中的美景，更会给身体和大脑一份休息和缓冲，给自己一点闲功夫，喘一口气，舒展一下心情。   \n\n    工作、养家、扶老携幼。忙碌的生活会让我们失去感受力，但只要偷来一    点点闲，便会有莫大的幸福感。  \n\n    林语堂认为人生幸福就是四件事:  \n\n    一是睡在自家床上，二是吃父母做的饭菜，三是听爱人讲情话，四是跟孩子做游戏。  \n\n    生活，就是一粥一饭，一亩田一荷锄，一群鹅一垂钓，一壶茶一本书。  \n\n    在鸟鸣蝉叫的夏日清晨，在月光皎洁的秋日夜晚，叫上旧交老友，在自家小院喝茶赏蒲，闲话家常;  \n\n    或者在初秋的夜晚，陪着家人，带着孩子，在树下吹吹清风，去郊外，看看树丛间的萤火虫;又或者我们还可以带着全家人，买张车票，去探索大自然的绮丽，看看不一样的城市。  \n\n    闲适的情怀，就仿佛在静夜里开放的昙花般，悄然、美丽，不知不觉，沁人心脾。  \n\n    繁忙世事中，悠闲，是人生最难得的清福，能够悠闲生活的人，都是高人。  \n\n    周作人说:“得半日之闲，可抵十年尘梦。”闲适，不是无所事事，荒废光阴，而是细品生活，是热爱生活。  \n\n    有一颗闲心的人，更能够发现生活中的每一份美好，感受每一次真情。  \n\n    悠闲，是人生最大的富足!  ","source":"_posts/2022/03/人生何必太复杂.md","raw":"---\ntitle: 人生何必太复杂\ncategories: 生活点滴\ndate: 2022-03-30 20:15:03\ntags:  \n      - 生活点滴\n---\n![./%E4%BA%BA%E7%94%9F%E4%BD%95%E5%BF%85%E5%A4%AA%E5%A4%8D%E6%9D%82](%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220404142320.jpg)\n    人生何必太复杂，细品生活得有一颗闲心。江山明月，本无常主，闲者便是主人。  \n    生活可以匆忙，但心态要轻闲。这一分“闲”是生活中的点滴欢喜，更是心情的宁静闲适。  \n\n    人至中年，忙不如闲，红尘多少事，不如偷得一点闲。  \n\n    罗丹说过:世界上并不缺少美，而是缺少发现美的眼睛。  \n\n    去触摸一片叶子的花纹，去闻一下夏日暴雨过后的清新空气.....那些我们有记忆的感觉，都会引发我们的心中的一丝 触动。  \n\n    一颗闲心，是发现美的眼睛，是慢下脚步的宁静，是修炼内心的平和恬淡。    \n\n    一颗闲心，不仅能够发现自然中的美景，更会给身体和大脑一份休息和缓冲，给自己一点闲功夫，喘一口气，舒展一下心情。   \n\n    工作、养家、扶老携幼。忙碌的生活会让我们失去感受力，但只要偷来一    点点闲，便会有莫大的幸福感。  \n\n    林语堂认为人生幸福就是四件事:  \n\n    一是睡在自家床上，二是吃父母做的饭菜，三是听爱人讲情话，四是跟孩子做游戏。  \n\n    生活，就是一粥一饭，一亩田一荷锄，一群鹅一垂钓，一壶茶一本书。  \n\n    在鸟鸣蝉叫的夏日清晨，在月光皎洁的秋日夜晚，叫上旧交老友，在自家小院喝茶赏蒲，闲话家常;  \n\n    或者在初秋的夜晚，陪着家人，带着孩子，在树下吹吹清风，去郊外，看看树丛间的萤火虫;又或者我们还可以带着全家人，买张车票，去探索大自然的绮丽，看看不一样的城市。  \n\n    闲适的情怀，就仿佛在静夜里开放的昙花般，悄然、美丽，不知不觉，沁人心脾。  \n\n    繁忙世事中，悠闲，是人生最难得的清福，能够悠闲生活的人，都是高人。  \n\n    周作人说:“得半日之闲，可抵十年尘梦。”闲适，不是无所事事，荒废光阴，而是细品生活，是热爱生活。  \n\n    有一颗闲心的人，更能够发现生活中的每一份美好，感受每一次真情。  \n\n    悠闲，是人生最大的富足!  ","slug":"人生何必太复杂","published":1,"updated":"2022-04-04T12:42:22.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb34p002yn4vog4ps2g2r","content":"<p><img src=\"%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220404142320.jpg\" alt=\"./%E4%BA%BA%E7%94%9F%E4%BD%95%E5%BF%85%E5%A4%AA%E5%A4%8D%E6%9D%82\"><br>    人生何必太复杂，细品生活得有一颗闲心。江山明月，本无常主，闲者便是主人。<br>    生活可以匆忙，但心态要轻闲。这一分“闲”是生活中的点滴欢喜，更是心情的宁静闲适。  </p>\n<pre><code>人至中年，忙不如闲，红尘多少事，不如偷得一点闲。  \n\n罗丹说过:世界上并不缺少美，而是缺少发现美的眼睛。  \n\n去触摸一片叶子的花纹，去闻一下夏日暴雨过后的清新空气.....那些我们有记忆的感觉，都会引发我们的心中的一丝 触动。  \n\n一颗闲心，是发现美的眼睛，是慢下脚步的宁静，是修炼内心的平和恬淡。    \n\n一颗闲心，不仅能够发现自然中的美景，更会给身体和大脑一份休息和缓冲，给自己一点闲功夫，喘一口气，舒展一下心情。   \n\n工作、养家、扶老携幼。忙碌的生活会让我们失去感受力，但只要偷来一    点点闲，便会有莫大的幸福感。  \n\n林语堂认为人生幸福就是四件事:  \n\n一是睡在自家床上，二是吃父母做的饭菜，三是听爱人讲情话，四是跟孩子做游戏。  \n\n生活，就是一粥一饭，一亩田一荷锄，一群鹅一垂钓，一壶茶一本书。  \n\n在鸟鸣蝉叫的夏日清晨，在月光皎洁的秋日夜晚，叫上旧交老友，在自家小院喝茶赏蒲，闲话家常;  \n\n或者在初秋的夜晚，陪着家人，带着孩子，在树下吹吹清风，去郊外，看看树丛间的萤火虫;又或者我们还可以带着全家人，买张车票，去探索大自然的绮丽，看看不一样的城市。  \n\n闲适的情怀，就仿佛在静夜里开放的昙花般，悄然、美丽，不知不觉，沁人心脾。  \n\n繁忙世事中，悠闲，是人生最难得的清福，能够悠闲生活的人，都是高人。  \n\n周作人说:“得半日之闲，可抵十年尘梦。”闲适，不是无所事事，荒废光阴，而是细品生活，是热爱生活。  \n\n有一颗闲心的人，更能够发现生活中的每一份美好，感受每一次真情。  \n\n悠闲，是人生最大的富足!  \n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220404142320.jpg\" alt=\"./%E4%BA%BA%E7%94%9F%E4%BD%95%E5%BF%85%E5%A4%AA%E5%A4%8D%E6%9D%82\"><br>    人生何必太复杂，细品生活得有一颗闲心。江山明月，本无常主，闲者便是主人。<br>    生活可以匆忙，但心态要轻闲。这一分“闲”是生活中的点滴欢喜，更是心情的宁静闲适。  </p>\n<pre><code>人至中年，忙不如闲，红尘多少事，不如偷得一点闲。  \n\n罗丹说过:世界上并不缺少美，而是缺少发现美的眼睛。  \n\n去触摸一片叶子的花纹，去闻一下夏日暴雨过后的清新空气.....那些我们有记忆的感觉，都会引发我们的心中的一丝 触动。  \n\n一颗闲心，是发现美的眼睛，是慢下脚步的宁静，是修炼内心的平和恬淡。    \n\n一颗闲心，不仅能够发现自然中的美景，更会给身体和大脑一份休息和缓冲，给自己一点闲功夫，喘一口气，舒展一下心情。   \n\n工作、养家、扶老携幼。忙碌的生活会让我们失去感受力，但只要偷来一    点点闲，便会有莫大的幸福感。  \n\n林语堂认为人生幸福就是四件事:  \n\n一是睡在自家床上，二是吃父母做的饭菜，三是听爱人讲情话，四是跟孩子做游戏。  \n\n生活，就是一粥一饭，一亩田一荷锄，一群鹅一垂钓，一壶茶一本书。  \n\n在鸟鸣蝉叫的夏日清晨，在月光皎洁的秋日夜晚，叫上旧交老友，在自家小院喝茶赏蒲，闲话家常;  \n\n或者在初秋的夜晚，陪着家人，带着孩子，在树下吹吹清风，去郊外，看看树丛间的萤火虫;又或者我们还可以带着全家人，买张车票，去探索大自然的绮丽，看看不一样的城市。  \n\n闲适的情怀，就仿佛在静夜里开放的昙花般，悄然、美丽，不知不觉，沁人心脾。  \n\n繁忙世事中，悠闲，是人生最难得的清福，能够悠闲生活的人，都是高人。  \n\n周作人说:“得半日之闲，可抵十年尘梦。”闲适，不是无所事事，荒废光阴，而是细品生活，是热爱生活。  \n\n有一颗闲心的人，更能够发现生活中的每一份美好，感受每一次真情。  \n\n悠闲，是人生最大的富足!  \n</code></pre>\n"},{"title":"热爱，可迎万难","date":"2022-03-31T11:57:17.000Z","_content":"    因为热爱，所以可以迎万难  \n\n    流水爱高山，它滋养苍绿千千万万年，飞鸟爱天空，他不留痕迹，划过白昼与黑夜，而你，有没有如此热爱过，像此间人生不能重复般炽热地、绵长地、锱铢必较或不求回报地热爱。   --《你好，生活》  \n\n    与这个世界交手多年以后是否光彩依旧兴致盎然?  \n\n    世界是兵荒马乱的，生活是杂乱无章的，而我们每个人都是单枪匹马的。所以我想我们要热爱，对这个世界枕热，就像恰似草木对光阴的钟情。我们总要去承受生活的糟糕和不好的结果，所以啊，活着就应该热爱生活，而说到热爱生活，人也必须要热爱，不幸，失败，孤独。这个世界其实还挺有趣，我们伴随着时间认清生活真相。而我们就需要热爱，因为热爱，我们才能咬牙坚持，我们才能不被时间消磨掉生活的希望。因为，一个人几乎可以在任何他怀有无限热忱的事情上获得成功。  \n\n    希望我们都做一个真诚的人，不放弃对生活的热爱和执着，在有限的时间里，过无限的日子。  \n\n    与这个世界交手多年，愿你光彩依旧，兴致盎然'。      ","source":"_posts/2022/03/热爱，可迎万难.md","raw":"---\ntitle: 热爱，可迎万难 \ncategories: 生活点滴\ndate: 2022-03-31 19:57:17\ntags:  \n      - 生活点滴\n---\n    因为热爱，所以可以迎万难  \n\n    流水爱高山，它滋养苍绿千千万万年，飞鸟爱天空，他不留痕迹，划过白昼与黑夜，而你，有没有如此热爱过，像此间人生不能重复般炽热地、绵长地、锱铢必较或不求回报地热爱。   --《你好，生活》  \n\n    与这个世界交手多年以后是否光彩依旧兴致盎然?  \n\n    世界是兵荒马乱的，生活是杂乱无章的，而我们每个人都是单枪匹马的。所以我想我们要热爱，对这个世界枕热，就像恰似草木对光阴的钟情。我们总要去承受生活的糟糕和不好的结果，所以啊，活着就应该热爱生活，而说到热爱生活，人也必须要热爱，不幸，失败，孤独。这个世界其实还挺有趣，我们伴随着时间认清生活真相。而我们就需要热爱，因为热爱，我们才能咬牙坚持，我们才能不被时间消磨掉生活的希望。因为，一个人几乎可以在任何他怀有无限热忱的事情上获得成功。  \n\n    希望我们都做一个真诚的人，不放弃对生活的热爱和执着，在有限的时间里，过无限的日子。  \n\n    与这个世界交手多年，愿你光彩依旧，兴致盎然'。      ","slug":"热爱，可迎万难","published":1,"updated":"2022-04-04T12:32:31.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb34r0031n4vo4fx9hqfi","content":"<pre><code>因为热爱，所以可以迎万难  \n\n流水爱高山，它滋养苍绿千千万万年，飞鸟爱天空，他不留痕迹，划过白昼与黑夜，而你，有没有如此热爱过，像此间人生不能重复般炽热地、绵长地、锱铢必较或不求回报地热爱。   --《你好，生活》  \n\n与这个世界交手多年以后是否光彩依旧兴致盎然?  \n\n世界是兵荒马乱的，生活是杂乱无章的，而我们每个人都是单枪匹马的。所以我想我们要热爱，对这个世界枕热，就像恰似草木对光阴的钟情。我们总要去承受生活的糟糕和不好的结果，所以啊，活着就应该热爱生活，而说到热爱生活，人也必须要热爱，不幸，失败，孤独。这个世界其实还挺有趣，我们伴随着时间认清生活真相。而我们就需要热爱，因为热爱，我们才能咬牙坚持，我们才能不被时间消磨掉生活的希望。因为，一个人几乎可以在任何他怀有无限热忱的事情上获得成功。  \n\n希望我们都做一个真诚的人，不放弃对生活的热爱和执着，在有限的时间里，过无限的日子。  \n\n与这个世界交手多年，愿你光彩依旧，兴致盎然&#39;。      \n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>因为热爱，所以可以迎万难  \n\n流水爱高山，它滋养苍绿千千万万年，飞鸟爱天空，他不留痕迹，划过白昼与黑夜，而你，有没有如此热爱过，像此间人生不能重复般炽热地、绵长地、锱铢必较或不求回报地热爱。   --《你好，生活》  \n\n与这个世界交手多年以后是否光彩依旧兴致盎然?  \n\n世界是兵荒马乱的，生活是杂乱无章的，而我们每个人都是单枪匹马的。所以我想我们要热爱，对这个世界枕热，就像恰似草木对光阴的钟情。我们总要去承受生活的糟糕和不好的结果，所以啊，活着就应该热爱生活，而说到热爱生活，人也必须要热爱，不幸，失败，孤独。这个世界其实还挺有趣，我们伴随着时间认清生活真相。而我们就需要热爱，因为热爱，我们才能咬牙坚持，我们才能不被时间消磨掉生活的希望。因为，一个人几乎可以在任何他怀有无限热忱的事情上获得成功。  \n\n希望我们都做一个真诚的人，不放弃对生活的热爱和执着，在有限的时间里，过无限的日子。  \n\n与这个世界交手多年，愿你光彩依旧，兴致盎然&#39;。      \n</code></pre>\n"},{"title":"温柔和善良","date":"2022-03-29T11:28:15.000Z","_content":"    世界上所有的惊喜和好运，都是你累积的温柔和善良。\n\n    岁月静好是片刻，一地鸡毛是日常，即使世界偶尔薄凉，内心也要繁华似锦，浅浅喜，静静爱，深深懂得，淡淡释怀，望远处的是风景，看近处的才是人生。唯愿此生，岁月无恙;只言温暖，不语悲伤。  --杨绛  \n\n    我们常常说，柔弱的性格会被欺负，善良的人会受伤，懂事会没有糖吃...其实是真的。可是不管是受委屈还是受伤几乎  都是一个人成长最快的途径，吃下去的是委屈，消化掉后得到的是格局。  \n\n    我知道噩梦太长，黑暗太久，真的会让人把仅有的希望和期望都会消耗掉，可是我也依旧相信，生活要给你带来磨难，也会在其他方面给予我们礼物。我依旧相信善良的人，终究还是会有好报，兴许会来得太迟，可是总会到来。  \n\n    愿我们扫开满地的鸡毛能欢喜地发现，生活里还有细碎的惊喜和幸运。继续保持我们的善良和温柔吧，我们都不该被世俗  消磨掉，同流合污。  ","source":"_posts/2022/03/温柔和善良.md","raw":"---\ntitle: 温柔和善良\ncategories: 生活点滴\ndate: 2022-03-29 19:28:15\ntags:  \n      - 生活点滴\n---\n    世界上所有的惊喜和好运，都是你累积的温柔和善良。\n\n    岁月静好是片刻，一地鸡毛是日常，即使世界偶尔薄凉，内心也要繁华似锦，浅浅喜，静静爱，深深懂得，淡淡释怀，望远处的是风景，看近处的才是人生。唯愿此生，岁月无恙;只言温暖，不语悲伤。  --杨绛  \n\n    我们常常说，柔弱的性格会被欺负，善良的人会受伤，懂事会没有糖吃...其实是真的。可是不管是受委屈还是受伤几乎  都是一个人成长最快的途径，吃下去的是委屈，消化掉后得到的是格局。  \n\n    我知道噩梦太长，黑暗太久，真的会让人把仅有的希望和期望都会消耗掉，可是我也依旧相信，生活要给你带来磨难，也会在其他方面给予我们礼物。我依旧相信善良的人，终究还是会有好报，兴许会来得太迟，可是总会到来。  \n\n    愿我们扫开满地的鸡毛能欢喜地发现，生活里还有细碎的惊喜和幸运。继续保持我们的善良和温柔吧，我们都不该被世俗  消磨掉，同流合污。  ","slug":"温柔和善良","published":1,"updated":"2022-04-04T12:35:31.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb34s0034n4vogwjy11zs","content":"<pre><code>世界上所有的惊喜和好运，都是你累积的温柔和善良。\n\n岁月静好是片刻，一地鸡毛是日常，即使世界偶尔薄凉，内心也要繁华似锦，浅浅喜，静静爱，深深懂得，淡淡释怀，望远处的是风景，看近处的才是人生。唯愿此生，岁月无恙;只言温暖，不语悲伤。  --杨绛  \n\n我们常常说，柔弱的性格会被欺负，善良的人会受伤，懂事会没有糖吃...其实是真的。可是不管是受委屈还是受伤几乎  都是一个人成长最快的途径，吃下去的是委屈，消化掉后得到的是格局。  \n\n我知道噩梦太长，黑暗太久，真的会让人把仅有的希望和期望都会消耗掉，可是我也依旧相信，生活要给你带来磨难，也会在其他方面给予我们礼物。我依旧相信善良的人，终究还是会有好报，兴许会来得太迟，可是总会到来。  \n\n愿我们扫开满地的鸡毛能欢喜地发现，生活里还有细碎的惊喜和幸运。继续保持我们的善良和温柔吧，我们都不该被世俗  消磨掉，同流合污。  \n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>世界上所有的惊喜和好运，都是你累积的温柔和善良。\n\n岁月静好是片刻，一地鸡毛是日常，即使世界偶尔薄凉，内心也要繁华似锦，浅浅喜，静静爱，深深懂得，淡淡释怀，望远处的是风景，看近处的才是人生。唯愿此生，岁月无恙;只言温暖，不语悲伤。  --杨绛  \n\n我们常常说，柔弱的性格会被欺负，善良的人会受伤，懂事会没有糖吃...其实是真的。可是不管是受委屈还是受伤几乎  都是一个人成长最快的途径，吃下去的是委屈，消化掉后得到的是格局。  \n\n我知道噩梦太长，黑暗太久，真的会让人把仅有的希望和期望都会消耗掉，可是我也依旧相信，生活要给你带来磨难，也会在其他方面给予我们礼物。我依旧相信善良的人，终究还是会有好报，兴许会来得太迟，可是总会到来。  \n\n愿我们扫开满地的鸡毛能欢喜地发现，生活里还有细碎的惊喜和幸运。继续保持我们的善良和温柔吧，我们都不该被世俗  消磨掉，同流合污。  \n</code></pre>\n"},{"title":"18个JS的单行代码技巧","date":"2022-04-05T09:16:35.000Z","_content":"### 1、生成随机字符串  \n我们可以使用 Math.random 生成一个随机字符串，当我们需要一个唯一的 ID 时非常方便。\n```\nconst randomString = () => Math.random().toString(36).slice(2)\nrandomString() // gi1qtdego0b\nrandomString() // f3qixv40mot\nrandomString() // eeelv1pm3ja\n```\n\n### 2、转义HTML特殊字符\n如果您了解 XSS，其中一种解决方案是转义 HTML 字符串。\n```\nconst escape = (str) => str.replace(/[&<>\"']/g, (m) => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '\"': '&quot;', \"'\": '&#39;' }[m]))\nescape('<div class=\"medium\">Hi Medium.</div>') \n// &lt;div class=&quot;medium&quot;&gt;Hi Medium.&lt;/div&gt\n```\n\n### 3、字符串中每个单词的第一个字符大写\n此方法用于将字符串中每个单词的第一个字符大写。\n```\nconst uppercaseWords = (str) => str.replace(/^(.)|\\s+(.)/g, (c) => c.toUpperCase())\nuppercaseWords('hello world'); // 'Hello World'\n```\n```\n//更简单的方法\nconst uppercaseWords = (str) => str.replace(/^(.)|\\s+(.)/g, (c) => c.toUpperCase())\n```\n\n### 4、将字符串转换为camelCase\n```\nconst toCamelCase = (str) => str.trim().replace(/[-_\\s]+(.)?/g, (_, c) => (c ? c.toUpperCase() : ''));\ntoCamelCase('background-color'); // backgroundColor\ntoCamelCase('-webkit-scrollbar-thumb'); // WebkitScrollbarThumb\ntoCamelCase('_hello_world'); // HelloWorld\ntoCamelCase('hello_world'); // helloWorld\n```\n\n### 5、删除数组中的重复值\n删除数组的重复项是非常有必要的，使用“Set”会变得非常简单。\n```\nconst removeDuplicates = (arr) => [...new Set(arr)]\nconsole.log(removeDuplicates([1, 2, 2, 3, 3, 4, 4, 5, 5, 6])) \n// [1, 2, 3, 4, 5, 6]\n```\n\n### 6、展平一个数组\n我们经常在面试中受到考验，这可以通过两种方式来实现。\n```\nconst flat = (arr) =>\n    [].concat.apply(\n        [],\n        arr.map((a) => (Array.isArray(a) ? flat(a) : a))\n    )\n// Or\nconst flat = (arr) => arr.reduce((a, b) => (Array.isArray(b) ? [...a, ...flat(b)] : [...a, b]), [])\nflat(['cat', ['lion', 'tiger']]) // ['cat', 'lion', 'tiger']\n```\n\n### 7、从数组中删除虚假值\n使用此方法，您将能够过滤掉数组中的所有虚假值。\n```\nconst removeFalsy = (arr) => arr.filter(Boolean)\nremoveFalsy([0, 'a string', '', NaN, true, 5, undefined, 'another string', false])\n// ['a string', true, 5, 'another string']\n```\n\n### 8、检查一个数字是偶数还是奇数\n超级简单的任务，可以通过使用模运算符 (%) 来解决。\n```\nconst isEven = num => num % 2 === 0\nisEven(2) // true\nisEven(1) // false\n```\n\n### 9、获取两个数字之间的随机整数\n此方法用于获取两个数字之间的随机整数。\n```\nconst random = (min, max) => Math.floor(Math.random() * (max - min + 1) + min)\nrandom(1, 50) // 25\nrandom(1, 50) // 34\n```\n\n### 10、获取参数的平均值\n我们可以使用 reduce 方法来获取我们在此函数中提供的参数的平均值。\n```\nconst average = (...args) => args.reduce((a, b) => a + b) / args.length;\naverage(1, 2, 3, 4, 5);   // 3\n```\n\n### 11、将数字截断为固定小数点\n使用 Math.pow() 方法，我们可以将一个数字截断为我们在函数中提供的某个小数点。\n```\nconst round = (n, d) => Number(Math.round(n + \"e\" + d) + \"e-\" + d)\nround(1.005, 2) //1.01\nround(1.555, 2) //1.56\n```\n\n### 12、计算两个日期相差天数\n有时候我们需要计算两个日期之间的天数，一行代码就可以搞定。\n```\nconst diffDays = (date, otherDate) => Math.ceil(Math.abs(date - otherDate) / (1000 * 60 * 60 * 24));\ndiffDays(new Date(\"2021-11-3\"), new Date(\"2022-2-1\"))  // 90\n```\n\n### 13、从日期中获取一年中的哪一天\n您想知道某个日期是一年中的哪一天吗？\n```\nconst dayOfYear = (date) => Math.floor((date - new Date(date.getFullYear(), 0, 0)) / (1000 * 60 * 60 * 24))\ndayOfYear(new Date()) // 74\n```\n\n### 14、生成一个随机的十六进制颜色\n如果你需要一个随机的颜色值，这个函数就可以了。\n```\nconst randomColor = () => `#${Math.random().toString(16).slice(2, 8).padEnd(6, '0')}`\nrandomColor() // #9dae4f\nrandomColor() // #6ef10e\n```\n\n### 15、将RGB颜色转换为十六进制\n```\nconst rgbToHex = (r, g, b) => \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)\nrgbToHex(255, 255, 255)  // '#ffffff'\n```\n\n### 16、清除所有cookies\n```\nconst clearCookies = () => document.cookie.split(';').forEach((c) => (document.cookie = c.replace(/^ +/, '').replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`)))\n```\n\n### 17、检测暗模式\n```\nconst isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches\n```\n\n### 18、交换两个变量\n```\n[foo, bar] = [bar, foo]\n```\n\n### 19、暂停一会\n```\nconst pause = (millis) => new Promise(resolve => setTimeout(resolve, millis))\nconst fn = async () => {\n  await pause(1000)\n  console.log('fatfish') // 1s later\n}\nfn()\n```","source":"_posts/2022/04/18个JS的单行代码技巧.md","raw":"---\ntitle: 18个JS的单行代码技巧\ncategories: JavaScript\ndate: 2022-04-05 17:16:35\ntags:\n  - JavaScript\n---\n### 1、生成随机字符串  \n我们可以使用 Math.random 生成一个随机字符串，当我们需要一个唯一的 ID 时非常方便。\n```\nconst randomString = () => Math.random().toString(36).slice(2)\nrandomString() // gi1qtdego0b\nrandomString() // f3qixv40mot\nrandomString() // eeelv1pm3ja\n```\n\n### 2、转义HTML特殊字符\n如果您了解 XSS，其中一种解决方案是转义 HTML 字符串。\n```\nconst escape = (str) => str.replace(/[&<>\"']/g, (m) => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '\"': '&quot;', \"'\": '&#39;' }[m]))\nescape('<div class=\"medium\">Hi Medium.</div>') \n// &lt;div class=&quot;medium&quot;&gt;Hi Medium.&lt;/div&gt\n```\n\n### 3、字符串中每个单词的第一个字符大写\n此方法用于将字符串中每个单词的第一个字符大写。\n```\nconst uppercaseWords = (str) => str.replace(/^(.)|\\s+(.)/g, (c) => c.toUpperCase())\nuppercaseWords('hello world'); // 'Hello World'\n```\n```\n//更简单的方法\nconst uppercaseWords = (str) => str.replace(/^(.)|\\s+(.)/g, (c) => c.toUpperCase())\n```\n\n### 4、将字符串转换为camelCase\n```\nconst toCamelCase = (str) => str.trim().replace(/[-_\\s]+(.)?/g, (_, c) => (c ? c.toUpperCase() : ''));\ntoCamelCase('background-color'); // backgroundColor\ntoCamelCase('-webkit-scrollbar-thumb'); // WebkitScrollbarThumb\ntoCamelCase('_hello_world'); // HelloWorld\ntoCamelCase('hello_world'); // helloWorld\n```\n\n### 5、删除数组中的重复值\n删除数组的重复项是非常有必要的，使用“Set”会变得非常简单。\n```\nconst removeDuplicates = (arr) => [...new Set(arr)]\nconsole.log(removeDuplicates([1, 2, 2, 3, 3, 4, 4, 5, 5, 6])) \n// [1, 2, 3, 4, 5, 6]\n```\n\n### 6、展平一个数组\n我们经常在面试中受到考验，这可以通过两种方式来实现。\n```\nconst flat = (arr) =>\n    [].concat.apply(\n        [],\n        arr.map((a) => (Array.isArray(a) ? flat(a) : a))\n    )\n// Or\nconst flat = (arr) => arr.reduce((a, b) => (Array.isArray(b) ? [...a, ...flat(b)] : [...a, b]), [])\nflat(['cat', ['lion', 'tiger']]) // ['cat', 'lion', 'tiger']\n```\n\n### 7、从数组中删除虚假值\n使用此方法，您将能够过滤掉数组中的所有虚假值。\n```\nconst removeFalsy = (arr) => arr.filter(Boolean)\nremoveFalsy([0, 'a string', '', NaN, true, 5, undefined, 'another string', false])\n// ['a string', true, 5, 'another string']\n```\n\n### 8、检查一个数字是偶数还是奇数\n超级简单的任务，可以通过使用模运算符 (%) 来解决。\n```\nconst isEven = num => num % 2 === 0\nisEven(2) // true\nisEven(1) // false\n```\n\n### 9、获取两个数字之间的随机整数\n此方法用于获取两个数字之间的随机整数。\n```\nconst random = (min, max) => Math.floor(Math.random() * (max - min + 1) + min)\nrandom(1, 50) // 25\nrandom(1, 50) // 34\n```\n\n### 10、获取参数的平均值\n我们可以使用 reduce 方法来获取我们在此函数中提供的参数的平均值。\n```\nconst average = (...args) => args.reduce((a, b) => a + b) / args.length;\naverage(1, 2, 3, 4, 5);   // 3\n```\n\n### 11、将数字截断为固定小数点\n使用 Math.pow() 方法，我们可以将一个数字截断为我们在函数中提供的某个小数点。\n```\nconst round = (n, d) => Number(Math.round(n + \"e\" + d) + \"e-\" + d)\nround(1.005, 2) //1.01\nround(1.555, 2) //1.56\n```\n\n### 12、计算两个日期相差天数\n有时候我们需要计算两个日期之间的天数，一行代码就可以搞定。\n```\nconst diffDays = (date, otherDate) => Math.ceil(Math.abs(date - otherDate) / (1000 * 60 * 60 * 24));\ndiffDays(new Date(\"2021-11-3\"), new Date(\"2022-2-1\"))  // 90\n```\n\n### 13、从日期中获取一年中的哪一天\n您想知道某个日期是一年中的哪一天吗？\n```\nconst dayOfYear = (date) => Math.floor((date - new Date(date.getFullYear(), 0, 0)) / (1000 * 60 * 60 * 24))\ndayOfYear(new Date()) // 74\n```\n\n### 14、生成一个随机的十六进制颜色\n如果你需要一个随机的颜色值，这个函数就可以了。\n```\nconst randomColor = () => `#${Math.random().toString(16).slice(2, 8).padEnd(6, '0')}`\nrandomColor() // #9dae4f\nrandomColor() // #6ef10e\n```\n\n### 15、将RGB颜色转换为十六进制\n```\nconst rgbToHex = (r, g, b) => \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)\nrgbToHex(255, 255, 255)  // '#ffffff'\n```\n\n### 16、清除所有cookies\n```\nconst clearCookies = () => document.cookie.split(';').forEach((c) => (document.cookie = c.replace(/^ +/, '').replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`)))\n```\n\n### 17、检测暗模式\n```\nconst isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches\n```\n\n### 18、交换两个变量\n```\n[foo, bar] = [bar, foo]\n```\n\n### 19、暂停一会\n```\nconst pause = (millis) => new Promise(resolve => setTimeout(resolve, millis))\nconst fn = async () => {\n  await pause(1000)\n  console.log('fatfish') // 1s later\n}\nfn()\n```","slug":"18个JS的单行代码技巧","published":1,"updated":"2022-04-05T09:38:30.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb34t0039n4vo2wa6dxn9","content":"<h3 id=\"1、生成随机字符串\"><a href=\"#1、生成随机字符串\" class=\"headerlink\" title=\"1、生成随机字符串\"></a>1、生成随机字符串</h3><p>我们可以使用 Math.random 生成一个随机字符串，当我们需要一个唯一的 ID 时非常方便。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">const randomString = () =&gt; Math<span class=\"selector-class\">.random</span>()<span class=\"selector-class\">.toString</span>(<span class=\"number\">36</span>)<span class=\"selector-class\">.slice</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">randomString</span><span class=\"params\">()</span></span> <span class=\"comment\">// gi1qtdego0b</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">randomString</span><span class=\"params\">()</span></span> <span class=\"comment\">// f3qixv40mot</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">randomString</span><span class=\"params\">()</span></span> <span class=\"comment\">// eeelv1pm3ja</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、转义HTML特殊字符\"><a href=\"#2、转义HTML特殊字符\" class=\"headerlink\" title=\"2、转义HTML特殊字符\"></a>2、转义HTML特殊字符</h3><p>如果您了解 XSS，其中一种解决方案是转义 HTML 字符串。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">const <span class=\"built_in\">escape</span> = <span class=\"function\"><span class=\"params\">(str)</span> =&gt;</span> str.replace(<span class=\"regexp\">/[&amp;&lt;&gt;&quot;&#x27;]/g</span>, <span class=\"function\"><span class=\"params\">(m)</span> =&gt;</span> (&#123; <span class=\"string\">&#x27;&amp;&#x27;</span>: <span class=\"string\">&#x27;&amp;amp;&#x27;</span>, <span class=\"string\">&#x27;&lt;&#x27;</span>: <span class=\"string\">&#x27;&amp;lt;&#x27;</span>, <span class=\"string\">&#x27;&gt;&#x27;</span>: <span class=\"string\">&#x27;&amp;gt;&#x27;</span>, <span class=\"string\">&#x27;&quot;&#x27;</span>: <span class=\"string\">&#x27;&amp;quot;&#x27;</span>, <span class=\"string\">&quot;&#x27;&quot;</span>: <span class=\"string\">&#x27;&amp;#39;&#x27;</span> &#125;[m]))</span><br><span class=\"line\"><span class=\"built_in\">escape</span>(<span class=\"string\">&#x27;&lt;div class=&quot;medium&quot;&gt;Hi Medium.&lt;/div&gt;&#x27;</span>) </span><br><span class=\"line\"><span class=\"regexp\">//</span> &amp;lt;div <span class=\"keyword\">class</span>=&amp;quot;medium&amp;quot;&amp;gt;Hi Medium.&amp;lt;/div&amp;gt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、字符串中每个单词的第一个字符大写\"><a href=\"#3、字符串中每个单词的第一个字符大写\" class=\"headerlink\" title=\"3、字符串中每个单词的第一个字符大写\"></a>3、字符串中每个单词的第一个字符大写</h3><p>此方法用于将字符串中每个单词的第一个字符大写。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">const uppercaseWords = <span class=\"function\"><span class=\"params\">(str)</span> =&gt;</span> str.replace(<span class=\"regexp\">/^(.)|\\s+(.)/g</span>, <span class=\"function\"><span class=\"params\">(c)</span> =&gt;</span> c.toUpperCase())</span><br><span class=\"line\">uppercaseWords(<span class=\"string\">&#x27;hello world&#x27;</span>); <span class=\"regexp\">//</span> <span class=\"string\">&#x27;Hello World&#x27;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>更简单的方法</span><br><span class=\"line\">const uppercaseWords = <span class=\"function\"><span class=\"params\">(str)</span> =&gt;</span> str.replace(<span class=\"regexp\">/^(.)|\\s+(.)/g</span>, <span class=\"function\"><span class=\"params\">(c)</span> =&gt;</span> c.toUpperCase())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、将字符串转换为camelCase\"><a href=\"#4、将字符串转换为camelCase\" class=\"headerlink\" title=\"4、将字符串转换为camelCase\"></a>4、将字符串转换为camelCase</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">const toCamelCase =<span class=\"function\"> (<span class=\"params\">str</span>) =&gt;</span> str.trim<span class=\"literal\">()</span>.replace(/<span class=\"literal\">[-<span class=\"identifier\">_</span>\\<span class=\"identifier\">s</span>]</span>+(.)?/g,<span class=\"function\"> (<span class=\"params\">_</span>, <span class=\"params\">c</span>) =&gt;</span> (c ? c.<span class=\"keyword\">to</span><span class=\"constructor\">UpperCase()</span> : &#x27;&#x27;));</span><br><span class=\"line\"><span class=\"keyword\">to</span><span class=\"constructor\">CamelCase(&#x27;<span class=\"params\">background</span>-<span class=\"params\">color</span>&#x27;)</span>; <span class=\"comment\">// backgroundColor</span></span><br><span class=\"line\"><span class=\"keyword\">to</span><span class=\"constructor\">CamelCase(&#x27;-<span class=\"params\">webkit</span>-<span class=\"params\">scrollbar</span>-<span class=\"params\">thumb</span>&#x27;)</span>; <span class=\"comment\">// WebkitScrollbarThumb</span></span><br><span class=\"line\"><span class=\"keyword\">to</span><span class=\"constructor\">CamelCase(&#x27;<span class=\"params\">_hello_world</span>&#x27;)</span>; <span class=\"comment\">// HelloWorld</span></span><br><span class=\"line\"><span class=\"keyword\">to</span><span class=\"constructor\">CamelCase(&#x27;<span class=\"params\">hello_world</span>&#x27;)</span>; <span class=\"comment\">// helloWorld</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、删除数组中的重复值\"><a href=\"#5、删除数组中的重复值\" class=\"headerlink\" title=\"5、删除数组中的重复值\"></a>5、删除数组中的重复值</h3><p>删除数组的重复项是非常有必要的，使用“Set”会变得非常简单。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">const removeDuplicates = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> [...<span class=\"keyword\">new</span> Set(arr)]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(removeDuplicates([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>])) </span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、展平一个数组\"><a href=\"#6、展平一个数组\" class=\"headerlink\" title=\"6、展平一个数组\"></a>6、展平一个数组</h3><p>我们经常在面试中受到考验，这可以通过两种方式来实现。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">const flat = <span class=\"function\"><span class=\"params\">(arr)</span> =&gt;</span></span><br><span class=\"line\">    [].concat.apply(</span><br><span class=\"line\">        [],</span><br><span class=\"line\">        arr.map(<span class=\"function\"><span class=\"params\">(a)</span> =&gt;</span> (<span class=\"built_in\">Array</span>.isArray(a) ? flat(a) : a))</span><br><span class=\"line\">    )</span><br><span class=\"line\"><span class=\"regexp\">//</span> Or</span><br><span class=\"line\">const flat = <span class=\"function\"><span class=\"params\">(arr)</span> =&gt;</span> arr.reduce(<span class=\"function\"><span class=\"params\">(a, b)</span> =&gt;</span> (<span class=\"built_in\">Array</span>.isArray(b) ? [...a, ...flat(b)] : [...a, b]), [])</span><br><span class=\"line\">flat([<span class=\"string\">&#x27;cat&#x27;</span>, [<span class=\"string\">&#x27;lion&#x27;</span>, <span class=\"string\">&#x27;tiger&#x27;</span>]]) <span class=\"regexp\">//</span> [<span class=\"string\">&#x27;cat&#x27;</span>, <span class=\"string\">&#x27;lion&#x27;</span>, <span class=\"string\">&#x27;tiger&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、从数组中删除虚假值\"><a href=\"#7、从数组中删除虚假值\" class=\"headerlink\" title=\"7、从数组中删除虚假值\"></a>7、从数组中删除虚假值</h3><p>使用此方法，您将能够过滤掉数组中的所有虚假值。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">const removeFalsy = <span class=\"function\"><span class=\"params\">(arr)</span> =&gt;</span> arr.filter(<span class=\"built_in\">Boolean</span>)</span><br><span class=\"line\">removeFalsy([<span class=\"number\">0</span>, <span class=\"string\">&#x27;a string&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"literal\">NaN</span>, <span class=\"literal\">true</span>, <span class=\"number\">5</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">&#x27;another string&#x27;</span>, <span class=\"literal\">false</span>])</span><br><span class=\"line\"><span class=\"regexp\">//</span> [<span class=\"string\">&#x27;a string&#x27;</span>, <span class=\"literal\">true</span>, <span class=\"number\">5</span>, <span class=\"string\">&#x27;another string&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、检查一个数字是偶数还是奇数\"><a href=\"#8、检查一个数字是偶数还是奇数\" class=\"headerlink\" title=\"8、检查一个数字是偶数还是奇数\"></a>8、检查一个数字是偶数还是奇数</h3><p>超级简单的任务，可以通过使用模运算符 (%) 来解决。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isEven = <span class=\"built_in\">num</span> =&gt; <span class=\"built_in\">num</span> % <span class=\"number\">2</span> === <span class=\"number\">0</span></span><br><span class=\"line\">isEven(<span class=\"number\">2</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">isEven(<span class=\"number\">1</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、获取两个数字之间的随机整数\"><a href=\"#9、获取两个数字之间的随机整数\" class=\"headerlink\" title=\"9、获取两个数字之间的随机整数\"></a>9、获取两个数字之间的随机整数</h3><p>此方法用于获取两个数字之间的随机整数。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">const <span class=\"built_in\">random</span> = <span class=\"function\">(<span class=\"params\"><span class=\"built_in\">min</span>, <span class=\"built_in\">max</span></span>) =&gt;</span> Math.<span class=\"built_in\">floor</span>(Math.<span class=\"built_in\">random</span>() * (<span class=\"built_in\">max</span> - <span class=\"built_in\">min</span> + <span class=\"number\">1</span>) + <span class=\"built_in\">min</span>)</span><br><span class=\"line\"><span class=\"built_in\">random</span>(<span class=\"number\">1</span>, <span class=\"number\">50</span>) <span class=\"comment\">// 25</span></span><br><span class=\"line\"><span class=\"built_in\">random</span>(<span class=\"number\">1</span>, <span class=\"number\">50</span>) <span class=\"comment\">// 34</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、获取参数的平均值\"><a href=\"#10、获取参数的平均值\" class=\"headerlink\" title=\"10、获取参数的平均值\"></a>10、获取参数的平均值</h3><p>我们可以使用 reduce 方法来获取我们在此函数中提供的参数的平均值。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">const <span class=\"built_in\">average</span> = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> args.<span class=\"built_in\">reduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b) / args.<span class=\"built_in\">length</span>;</span><br><span class=\"line\"><span class=\"built_in\">average</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);   <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、将数字截断为固定小数点\"><a href=\"#11、将数字截断为固定小数点\" class=\"headerlink\" title=\"11、将数字截断为固定小数点\"></a>11、将数字截断为固定小数点</h3><p>使用 Math.pow() 方法，我们可以将一个数字截断为我们在函数中提供的某个小数点。</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">const</span> round = (n, d) =&gt; Number(Math.round(n + <span class=\"string\">&quot;e&quot;</span> + d) + <span class=\"string\">&quot;e-&quot;</span> + d)</span><br><span class=\"line\"><span class=\"attribute\">round</span>(<span class=\"number\">1</span>.<span class=\"number\">005</span>, <span class=\"number\">2</span>) //<span class=\"number\">1</span>.<span class=\"number\">01</span></span><br><span class=\"line\"><span class=\"attribute\">round</span>(<span class=\"number\">1</span>.<span class=\"number\">555</span>, <span class=\"number\">2</span>) //<span class=\"number\">1</span>.<span class=\"number\">56</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12、计算两个日期相差天数\"><a href=\"#12、计算两个日期相差天数\" class=\"headerlink\" title=\"12、计算两个日期相差天数\"></a>12、计算两个日期相差天数</h3><p>有时候我们需要计算两个日期之间的天数，一行代码就可以搞定。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">const diffDays = <span class=\"function\">(<span class=\"params\"><span class=\"built_in\">date</span>, otherDate</span>) =&gt;</span> Math.<span class=\"built_in\">ceil</span>(Math.<span class=\"built_in\">abs</span>(<span class=\"built_in\">date</span> - otherDate) / (<span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>));</span><br><span class=\"line\">diffDays(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&quot;2021-11-3&quot;</span>), <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&quot;2022-2-1&quot;</span>))  <span class=\"comment\">// 90</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13、从日期中获取一年中的哪一天\"><a href=\"#13、从日期中获取一年中的哪一天\" class=\"headerlink\" title=\"13、从日期中获取一年中的哪一天\"></a>13、从日期中获取一年中的哪一天</h3><p>您想知道某个日期是一年中的哪一天吗？</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">const dayOfYear = <span class=\"function\">(<span class=\"params\"><span class=\"built_in\">date</span></span>) =&gt;</span> Math.<span class=\"built_in\">floor</span>((<span class=\"built_in\">date</span> - <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">date</span>.getFullYear(), <span class=\"number\">0</span>, <span class=\"number\">0</span>)) / (<span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>))</span><br><span class=\"line\">dayOfYear(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()) <span class=\"comment\">// 74</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14、生成一个随机的十六进制颜色\"><a href=\"#14、生成一个随机的十六进制颜色\" class=\"headerlink\" title=\"14、生成一个随机的十六进制颜色\"></a>14、生成一个随机的十六进制颜色</h3><p>如果你需要一个随机的颜色值，这个函数就可以了。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">const randomColor = () =&gt; `#$&#123;Math<span class=\"selector-class\">.random</span>()<span class=\"selector-class\">.toString</span>(<span class=\"number\">16</span>)<span class=\"selector-class\">.slice</span>(<span class=\"number\">2</span>, <span class=\"number\">8</span>)<span class=\"selector-class\">.padEnd</span>(<span class=\"number\">6</span>, <span class=\"string\">&#x27;0&#x27;</span>)&#125;`</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">randomColor</span><span class=\"params\">()</span></span> <span class=\"comment\">// #9dae4f</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">randomColor</span><span class=\"params\">()</span></span> <span class=\"comment\">// #6ef10e</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15、将RGB颜色转换为十六进制\"><a href=\"#15、将RGB颜色转换为十六进制\" class=\"headerlink\" title=\"15、将RGB颜色转换为十六进制\"></a>15、将RGB颜色转换为十六进制</h3><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">const</span> rgbToHex = (r, g, b) =&gt; <span class=\"string\">&quot;#&quot;</span> + ((<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">24</span>) + (r &lt;&lt; <span class=\"number\">16</span>) + (g &lt;&lt; <span class=\"number\">8</span>) + b).toString(<span class=\"number\">16</span>).slice(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"attribute\">rgbToHex</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>)  // &#x27;#ffffff&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16、清除所有cookies\"><a href=\"#16、清除所有cookies\" class=\"headerlink\" title=\"16、清除所有cookies\"></a>16、清除所有cookies</h3><figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">const clearCookies = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> document.cookie.<span class=\"built_in\">split</span>(<span class=\"string\">&#x27;;&#x27;</span>).forEach(<span class=\"function\">(<span class=\"params\">c</span>) =&gt;</span> (document.cookie = c.<span class=\"built_in\">replace</span>(<span class=\"regexp\">/^ +/</span>, <span class=\"string\">&#x27;&#x27;</span>).<span class=\"built_in\">replace</span>(<span class=\"regexp\">/=.*/</span>, <span class=\"string\">`=;expires=<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toUTCString()&#125;</span>;path=/`</span>)))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17、检测暗模式\"><a href=\"#17、检测暗模式\" class=\"headerlink\" title=\"17、检测暗模式\"></a>17、检测暗模式</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">const isDarkMode = window.matchMedia<span class=\"operator\"> &amp;&amp; </span>window.<span class=\"keyword\">match</span><span class=\"constructor\">Media(&#x27;(<span class=\"params\">prefers</span>-<span class=\"params\">color</span>-<span class=\"params\">scheme</span>: <span class=\"params\">dark</span>)</span>&#x27;).matches</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18、交换两个变量\"><a href=\"#18、交换两个变量\" class=\"headerlink\" title=\"18、交换两个变量\"></a>18、交换两个变量</h3><figure class=\"highlight gauss\"><table><tr><td class=\"code\"><pre><span class=\"line\">[foo, <span class=\"built_in\">bar</span>] = [<span class=\"built_in\">bar</span>, foo]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19、暂停一会\"><a href=\"#19、暂停一会\" class=\"headerlink\" title=\"19、暂停一会\"></a>19、暂停一会</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">pause</span> = (<span class=\"params\">millis</span>) =&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, millis))</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fn</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">pause</span>(<span class=\"number\">1000</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fatfish&#x27;</span>) <span class=\"comment\">// 1s later</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1、生成随机字符串\"><a href=\"#1、生成随机字符串\" class=\"headerlink\" title=\"1、生成随机字符串\"></a>1、生成随机字符串</h3><p>我们可以使用 Math.random 生成一个随机字符串，当我们需要一个唯一的 ID 时非常方便。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">const randomString = () =&gt; Math<span class=\"selector-class\">.random</span>()<span class=\"selector-class\">.toString</span>(<span class=\"number\">36</span>)<span class=\"selector-class\">.slice</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">randomString</span><span class=\"params\">()</span></span> <span class=\"comment\">// gi1qtdego0b</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">randomString</span><span class=\"params\">()</span></span> <span class=\"comment\">// f3qixv40mot</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">randomString</span><span class=\"params\">()</span></span> <span class=\"comment\">// eeelv1pm3ja</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、转义HTML特殊字符\"><a href=\"#2、转义HTML特殊字符\" class=\"headerlink\" title=\"2、转义HTML特殊字符\"></a>2、转义HTML特殊字符</h3><p>如果您了解 XSS，其中一种解决方案是转义 HTML 字符串。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">const <span class=\"built_in\">escape</span> = <span class=\"function\"><span class=\"params\">(str)</span> =&gt;</span> str.replace(<span class=\"regexp\">/[&amp;&lt;&gt;&quot;&#x27;]/g</span>, <span class=\"function\"><span class=\"params\">(m)</span> =&gt;</span> (&#123; <span class=\"string\">&#x27;&amp;&#x27;</span>: <span class=\"string\">&#x27;&amp;amp;&#x27;</span>, <span class=\"string\">&#x27;&lt;&#x27;</span>: <span class=\"string\">&#x27;&amp;lt;&#x27;</span>, <span class=\"string\">&#x27;&gt;&#x27;</span>: <span class=\"string\">&#x27;&amp;gt;&#x27;</span>, <span class=\"string\">&#x27;&quot;&#x27;</span>: <span class=\"string\">&#x27;&amp;quot;&#x27;</span>, <span class=\"string\">&quot;&#x27;&quot;</span>: <span class=\"string\">&#x27;&amp;#39;&#x27;</span> &#125;[m]))</span><br><span class=\"line\"><span class=\"built_in\">escape</span>(<span class=\"string\">&#x27;&lt;div class=&quot;medium&quot;&gt;Hi Medium.&lt;/div&gt;&#x27;</span>) </span><br><span class=\"line\"><span class=\"regexp\">//</span> &amp;lt;div <span class=\"keyword\">class</span>=&amp;quot;medium&amp;quot;&amp;gt;Hi Medium.&amp;lt;/div&amp;gt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、字符串中每个单词的第一个字符大写\"><a href=\"#3、字符串中每个单词的第一个字符大写\" class=\"headerlink\" title=\"3、字符串中每个单词的第一个字符大写\"></a>3、字符串中每个单词的第一个字符大写</h3><p>此方法用于将字符串中每个单词的第一个字符大写。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">const uppercaseWords = <span class=\"function\"><span class=\"params\">(str)</span> =&gt;</span> str.replace(<span class=\"regexp\">/^(.)|\\s+(.)/g</span>, <span class=\"function\"><span class=\"params\">(c)</span> =&gt;</span> c.toUpperCase())</span><br><span class=\"line\">uppercaseWords(<span class=\"string\">&#x27;hello world&#x27;</span>); <span class=\"regexp\">//</span> <span class=\"string\">&#x27;Hello World&#x27;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>更简单的方法</span><br><span class=\"line\">const uppercaseWords = <span class=\"function\"><span class=\"params\">(str)</span> =&gt;</span> str.replace(<span class=\"regexp\">/^(.)|\\s+(.)/g</span>, <span class=\"function\"><span class=\"params\">(c)</span> =&gt;</span> c.toUpperCase())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、将字符串转换为camelCase\"><a href=\"#4、将字符串转换为camelCase\" class=\"headerlink\" title=\"4、将字符串转换为camelCase\"></a>4、将字符串转换为camelCase</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">const toCamelCase =<span class=\"function\"> (<span class=\"params\">str</span>) =&gt;</span> str.trim<span class=\"literal\">()</span>.replace(/<span class=\"literal\">[-<span class=\"identifier\">_</span>\\<span class=\"identifier\">s</span>]</span>+(.)?/g,<span class=\"function\"> (<span class=\"params\">_</span>, <span class=\"params\">c</span>) =&gt;</span> (c ? c.<span class=\"keyword\">to</span><span class=\"constructor\">UpperCase()</span> : &#x27;&#x27;));</span><br><span class=\"line\"><span class=\"keyword\">to</span><span class=\"constructor\">CamelCase(&#x27;<span class=\"params\">background</span>-<span class=\"params\">color</span>&#x27;)</span>; <span class=\"comment\">// backgroundColor</span></span><br><span class=\"line\"><span class=\"keyword\">to</span><span class=\"constructor\">CamelCase(&#x27;-<span class=\"params\">webkit</span>-<span class=\"params\">scrollbar</span>-<span class=\"params\">thumb</span>&#x27;)</span>; <span class=\"comment\">// WebkitScrollbarThumb</span></span><br><span class=\"line\"><span class=\"keyword\">to</span><span class=\"constructor\">CamelCase(&#x27;<span class=\"params\">_hello_world</span>&#x27;)</span>; <span class=\"comment\">// HelloWorld</span></span><br><span class=\"line\"><span class=\"keyword\">to</span><span class=\"constructor\">CamelCase(&#x27;<span class=\"params\">hello_world</span>&#x27;)</span>; <span class=\"comment\">// helloWorld</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、删除数组中的重复值\"><a href=\"#5、删除数组中的重复值\" class=\"headerlink\" title=\"5、删除数组中的重复值\"></a>5、删除数组中的重复值</h3><p>删除数组的重复项是非常有必要的，使用“Set”会变得非常简单。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">const removeDuplicates = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> [...<span class=\"keyword\">new</span> Set(arr)]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(removeDuplicates([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>])) </span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、展平一个数组\"><a href=\"#6、展平一个数组\" class=\"headerlink\" title=\"6、展平一个数组\"></a>6、展平一个数组</h3><p>我们经常在面试中受到考验，这可以通过两种方式来实现。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">const flat = <span class=\"function\"><span class=\"params\">(arr)</span> =&gt;</span></span><br><span class=\"line\">    [].concat.apply(</span><br><span class=\"line\">        [],</span><br><span class=\"line\">        arr.map(<span class=\"function\"><span class=\"params\">(a)</span> =&gt;</span> (<span class=\"built_in\">Array</span>.isArray(a) ? flat(a) : a))</span><br><span class=\"line\">    )</span><br><span class=\"line\"><span class=\"regexp\">//</span> Or</span><br><span class=\"line\">const flat = <span class=\"function\"><span class=\"params\">(arr)</span> =&gt;</span> arr.reduce(<span class=\"function\"><span class=\"params\">(a, b)</span> =&gt;</span> (<span class=\"built_in\">Array</span>.isArray(b) ? [...a, ...flat(b)] : [...a, b]), [])</span><br><span class=\"line\">flat([<span class=\"string\">&#x27;cat&#x27;</span>, [<span class=\"string\">&#x27;lion&#x27;</span>, <span class=\"string\">&#x27;tiger&#x27;</span>]]) <span class=\"regexp\">//</span> [<span class=\"string\">&#x27;cat&#x27;</span>, <span class=\"string\">&#x27;lion&#x27;</span>, <span class=\"string\">&#x27;tiger&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、从数组中删除虚假值\"><a href=\"#7、从数组中删除虚假值\" class=\"headerlink\" title=\"7、从数组中删除虚假值\"></a>7、从数组中删除虚假值</h3><p>使用此方法，您将能够过滤掉数组中的所有虚假值。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">const removeFalsy = <span class=\"function\"><span class=\"params\">(arr)</span> =&gt;</span> arr.filter(<span class=\"built_in\">Boolean</span>)</span><br><span class=\"line\">removeFalsy([<span class=\"number\">0</span>, <span class=\"string\">&#x27;a string&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"literal\">NaN</span>, <span class=\"literal\">true</span>, <span class=\"number\">5</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">&#x27;another string&#x27;</span>, <span class=\"literal\">false</span>])</span><br><span class=\"line\"><span class=\"regexp\">//</span> [<span class=\"string\">&#x27;a string&#x27;</span>, <span class=\"literal\">true</span>, <span class=\"number\">5</span>, <span class=\"string\">&#x27;another string&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、检查一个数字是偶数还是奇数\"><a href=\"#8、检查一个数字是偶数还是奇数\" class=\"headerlink\" title=\"8、检查一个数字是偶数还是奇数\"></a>8、检查一个数字是偶数还是奇数</h3><p>超级简单的任务，可以通过使用模运算符 (%) 来解决。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isEven = <span class=\"built_in\">num</span> =&gt; <span class=\"built_in\">num</span> % <span class=\"number\">2</span> === <span class=\"number\">0</span></span><br><span class=\"line\">isEven(<span class=\"number\">2</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">isEven(<span class=\"number\">1</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、获取两个数字之间的随机整数\"><a href=\"#9、获取两个数字之间的随机整数\" class=\"headerlink\" title=\"9、获取两个数字之间的随机整数\"></a>9、获取两个数字之间的随机整数</h3><p>此方法用于获取两个数字之间的随机整数。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">const <span class=\"built_in\">random</span> = <span class=\"function\">(<span class=\"params\"><span class=\"built_in\">min</span>, <span class=\"built_in\">max</span></span>) =&gt;</span> Math.<span class=\"built_in\">floor</span>(Math.<span class=\"built_in\">random</span>() * (<span class=\"built_in\">max</span> - <span class=\"built_in\">min</span> + <span class=\"number\">1</span>) + <span class=\"built_in\">min</span>)</span><br><span class=\"line\"><span class=\"built_in\">random</span>(<span class=\"number\">1</span>, <span class=\"number\">50</span>) <span class=\"comment\">// 25</span></span><br><span class=\"line\"><span class=\"built_in\">random</span>(<span class=\"number\">1</span>, <span class=\"number\">50</span>) <span class=\"comment\">// 34</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、获取参数的平均值\"><a href=\"#10、获取参数的平均值\" class=\"headerlink\" title=\"10、获取参数的平均值\"></a>10、获取参数的平均值</h3><p>我们可以使用 reduce 方法来获取我们在此函数中提供的参数的平均值。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">const <span class=\"built_in\">average</span> = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> args.<span class=\"built_in\">reduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b) / args.<span class=\"built_in\">length</span>;</span><br><span class=\"line\"><span class=\"built_in\">average</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);   <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、将数字截断为固定小数点\"><a href=\"#11、将数字截断为固定小数点\" class=\"headerlink\" title=\"11、将数字截断为固定小数点\"></a>11、将数字截断为固定小数点</h3><p>使用 Math.pow() 方法，我们可以将一个数字截断为我们在函数中提供的某个小数点。</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">const</span> round = (n, d) =&gt; Number(Math.round(n + <span class=\"string\">&quot;e&quot;</span> + d) + <span class=\"string\">&quot;e-&quot;</span> + d)</span><br><span class=\"line\"><span class=\"attribute\">round</span>(<span class=\"number\">1</span>.<span class=\"number\">005</span>, <span class=\"number\">2</span>) //<span class=\"number\">1</span>.<span class=\"number\">01</span></span><br><span class=\"line\"><span class=\"attribute\">round</span>(<span class=\"number\">1</span>.<span class=\"number\">555</span>, <span class=\"number\">2</span>) //<span class=\"number\">1</span>.<span class=\"number\">56</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12、计算两个日期相差天数\"><a href=\"#12、计算两个日期相差天数\" class=\"headerlink\" title=\"12、计算两个日期相差天数\"></a>12、计算两个日期相差天数</h3><p>有时候我们需要计算两个日期之间的天数，一行代码就可以搞定。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">const diffDays = <span class=\"function\">(<span class=\"params\"><span class=\"built_in\">date</span>, otherDate</span>) =&gt;</span> Math.<span class=\"built_in\">ceil</span>(Math.<span class=\"built_in\">abs</span>(<span class=\"built_in\">date</span> - otherDate) / (<span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>));</span><br><span class=\"line\">diffDays(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&quot;2021-11-3&quot;</span>), <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">&quot;2022-2-1&quot;</span>))  <span class=\"comment\">// 90</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13、从日期中获取一年中的哪一天\"><a href=\"#13、从日期中获取一年中的哪一天\" class=\"headerlink\" title=\"13、从日期中获取一年中的哪一天\"></a>13、从日期中获取一年中的哪一天</h3><p>您想知道某个日期是一年中的哪一天吗？</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">const dayOfYear = <span class=\"function\">(<span class=\"params\"><span class=\"built_in\">date</span></span>) =&gt;</span> Math.<span class=\"built_in\">floor</span>((<span class=\"built_in\">date</span> - <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">date</span>.getFullYear(), <span class=\"number\">0</span>, <span class=\"number\">0</span>)) / (<span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>))</span><br><span class=\"line\">dayOfYear(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()) <span class=\"comment\">// 74</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14、生成一个随机的十六进制颜色\"><a href=\"#14、生成一个随机的十六进制颜色\" class=\"headerlink\" title=\"14、生成一个随机的十六进制颜色\"></a>14、生成一个随机的十六进制颜色</h3><p>如果你需要一个随机的颜色值，这个函数就可以了。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">const randomColor = () =&gt; `#$&#123;Math<span class=\"selector-class\">.random</span>()<span class=\"selector-class\">.toString</span>(<span class=\"number\">16</span>)<span class=\"selector-class\">.slice</span>(<span class=\"number\">2</span>, <span class=\"number\">8</span>)<span class=\"selector-class\">.padEnd</span>(<span class=\"number\">6</span>, <span class=\"string\">&#x27;0&#x27;</span>)&#125;`</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">randomColor</span><span class=\"params\">()</span></span> <span class=\"comment\">// #9dae4f</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">randomColor</span><span class=\"params\">()</span></span> <span class=\"comment\">// #6ef10e</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15、将RGB颜色转换为十六进制\"><a href=\"#15、将RGB颜色转换为十六进制\" class=\"headerlink\" title=\"15、将RGB颜色转换为十六进制\"></a>15、将RGB颜色转换为十六进制</h3><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">const</span> rgbToHex = (r, g, b) =&gt; <span class=\"string\">&quot;#&quot;</span> + ((<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">24</span>) + (r &lt;&lt; <span class=\"number\">16</span>) + (g &lt;&lt; <span class=\"number\">8</span>) + b).toString(<span class=\"number\">16</span>).slice(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"attribute\">rgbToHex</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>)  // &#x27;#ffffff&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16、清除所有cookies\"><a href=\"#16、清除所有cookies\" class=\"headerlink\" title=\"16、清除所有cookies\"></a>16、清除所有cookies</h3><figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">const clearCookies = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> document.cookie.<span class=\"built_in\">split</span>(<span class=\"string\">&#x27;;&#x27;</span>).forEach(<span class=\"function\">(<span class=\"params\">c</span>) =&gt;</span> (document.cookie = c.<span class=\"built_in\">replace</span>(<span class=\"regexp\">/^ +/</span>, <span class=\"string\">&#x27;&#x27;</span>).<span class=\"built_in\">replace</span>(<span class=\"regexp\">/=.*/</span>, <span class=\"string\">`=;expires=<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toUTCString()&#125;</span>;path=/`</span>)))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17、检测暗模式\"><a href=\"#17、检测暗模式\" class=\"headerlink\" title=\"17、检测暗模式\"></a>17、检测暗模式</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">const isDarkMode = window.matchMedia<span class=\"operator\"> &amp;&amp; </span>window.<span class=\"keyword\">match</span><span class=\"constructor\">Media(&#x27;(<span class=\"params\">prefers</span>-<span class=\"params\">color</span>-<span class=\"params\">scheme</span>: <span class=\"params\">dark</span>)</span>&#x27;).matches</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18、交换两个变量\"><a href=\"#18、交换两个变量\" class=\"headerlink\" title=\"18、交换两个变量\"></a>18、交换两个变量</h3><figure class=\"highlight gauss\"><table><tr><td class=\"code\"><pre><span class=\"line\">[foo, <span class=\"built_in\">bar</span>] = [<span class=\"built_in\">bar</span>, foo]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19、暂停一会\"><a href=\"#19、暂停一会\" class=\"headerlink\" title=\"19、暂停一会\"></a>19、暂停一会</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">pause</span> = (<span class=\"params\">millis</span>) =&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, millis))</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fn</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">pause</span>(<span class=\"number\">1000</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;fatfish&#x27;</span>) <span class=\"comment\">// 1s later</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>()</span><br></pre></td></tr></table></figure>"},{"title":"接受成长","date":"2022-04-03T13:57:16.000Z","_content":"    接受成长，也要接受所有的不欢而散  \n\n    你要做一个不动声色的大人了。不准情绪化，不准偷偷想念，不准回头看。去过自己另外的生活。你要听话，不是所有的鱼都会生活在同一片海里。      --村上春树   \n\n    成年人的崩溃往往以一句“没事”结尾，因为他们知道自己的残局，只能自己收拾。我们遇到有很多的人，对于我们的结局会遗憾会叹息，可是那些发生的事，早已经在我们心里尘埃落定。我想我没有说错吧。  \n\n    成长的道路_上总有更加新奇的事情，更加有趣的新朋友;又或者一起走到几程，突然发现其实志不同，道也不同。我们不再像小时候那样非要对方陪着，而是，不欢而散，各自上路，一路拋弃。  \n\n    可是无论这个世界对你怎样，别人对你怎样，我们也要接受，接受所有的不欢而散，但是我依旧希望你要一如既往的勇敢，努力，充满希望又热泪盈眶。    ","source":"_posts/2022/04/接受成长.md","raw":"---\ntitle: 接受成长\ncategories: 生活点滴\ndate: 2022-04-03 21:57:16\ntags:  \n      - 生活点滴\n---\n    接受成长，也要接受所有的不欢而散  \n\n    你要做一个不动声色的大人了。不准情绪化，不准偷偷想念，不准回头看。去过自己另外的生活。你要听话，不是所有的鱼都会生活在同一片海里。      --村上春树   \n\n    成年人的崩溃往往以一句“没事”结尾，因为他们知道自己的残局，只能自己收拾。我们遇到有很多的人，对于我们的结局会遗憾会叹息，可是那些发生的事，早已经在我们心里尘埃落定。我想我没有说错吧。  \n\n    成长的道路_上总有更加新奇的事情，更加有趣的新朋友;又或者一起走到几程，突然发现其实志不同，道也不同。我们不再像小时候那样非要对方陪着，而是，不欢而散，各自上路，一路拋弃。  \n\n    可是无论这个世界对你怎样，别人对你怎样，我们也要接受，接受所有的不欢而散，但是我依旧希望你要一如既往的勇敢，努力，充满希望又热泪盈眶。    ","slug":"接受成长","published":1,"updated":"2022-04-04T14:39:42.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb34v003cn4voawwu9kwu","content":"<pre><code>接受成长，也要接受所有的不欢而散  \n\n你要做一个不动声色的大人了。不准情绪化，不准偷偷想念，不准回头看。去过自己另外的生活。你要听话，不是所有的鱼都会生活在同一片海里。      --村上春树   \n\n成年人的崩溃往往以一句“没事”结尾，因为他们知道自己的残局，只能自己收拾。我们遇到有很多的人，对于我们的结局会遗憾会叹息，可是那些发生的事，早已经在我们心里尘埃落定。我想我没有说错吧。  \n\n成长的道路_上总有更加新奇的事情，更加有趣的新朋友;又或者一起走到几程，突然发现其实志不同，道也不同。我们不再像小时候那样非要对方陪着，而是，不欢而散，各自上路，一路拋弃。  \n\n可是无论这个世界对你怎样，别人对你怎样，我们也要接受，接受所有的不欢而散，但是我依旧希望你要一如既往的勇敢，努力，充满希望又热泪盈眶。    \n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>接受成长，也要接受所有的不欢而散  \n\n你要做一个不动声色的大人了。不准情绪化，不准偷偷想念，不准回头看。去过自己另外的生活。你要听话，不是所有的鱼都会生活在同一片海里。      --村上春树   \n\n成年人的崩溃往往以一句“没事”结尾，因为他们知道自己的残局，只能自己收拾。我们遇到有很多的人，对于我们的结局会遗憾会叹息，可是那些发生的事，早已经在我们心里尘埃落定。我想我没有说错吧。  \n\n成长的道路_上总有更加新奇的事情，更加有趣的新朋友;又或者一起走到几程，突然发现其实志不同，道也不同。我们不再像小时候那样非要对方陪着，而是，不欢而散，各自上路，一路拋弃。  \n\n可是无论这个世界对你怎样，别人对你怎样，我们也要接受，接受所有的不欢而散，但是我依旧希望你要一如既往的勇敢，努力，充满希望又热泪盈眶。    \n</code></pre>\n"},{"title":"微笑可以治愈一切","date":"2022-04-01T13:10:16.000Z","cover":"","_content":"![./%E5%BE%AE%E7%AC%91%E5%8F%AF%E4%BB%A5%E6%B2%BB%E6%84%88%E4%B8%80%E5%88%87](%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220404143433.jpg)\n    微笑着，幸福才不会遥远。  \n\n    把每一个平凡的日子，梳理成诗意，用微笑将生命点亮，远离生活的阴霾，明媚向暖，如此，才能接近幸福。  \n\n    毕淑敏说，你要学会提醒幸福，那么每天清晨,在触手可及的阳光中，感受生活点滴的美好，在每一个黄昏到来前，收集温暖，心存 感恩的过好每一天。  \n\n    幸福是一种感受，是来自平凡生活中的积累，幸福的人都懂得活在当下，总是喜欢活在昨天的人会懊悔，总是活在明天的人会焦虑，只有活在今天的人才会幸福。  \n\n    幸福，也许是饿了的时候一顿饭，也许是你渴的时候的一杯水，是寻常日子里一声问候，是一路走来不离不弃陪伴的。  \n\n    不管怎样，你要有一双发现美好的眼睛，和热爱生活的心，来感受幸福，珍惜幸福，才能得到幸福。  \n\n    人生，是悲喜交织的旅途，生活时常会有不如意，我们不求时时花开，只愿遇到寒凉时心中有暖，遇到不如意时能有一种内在的力量，来走过那些不开心的日子。  \n\n    带上你的微笑吧，尽管人生会有这样或那样的不如意，生活也会有风霜雪雨，但没有什么是过不去的，时间总会带来惊喜，你要知道，爱笑的人，命运一般都不会太差。  \n\n    生活，没有固定的模式，只需一盏心灯，烦恼的时候，别忘记了快乐，忙碌的时候，别忘了健康，人这一辈子，无论过得有多么富有，离开的时候也是两手空空，唯有健康快乐，才是真正的幸福。  \n\n    去习惯微笑吧，人生难免会经历一些酸甜苦辣,微笑着让往事不染风尘，记住该记住的，忘记该忘记的，幸福会在下一个转角处等你。  \n\n    人活着最重要的是心态，很多时候，幸福与金钱和地位无关，它不是别人给予的，只是心底的一份从容，只要心存阳光，总能于薄凉中看到最美的风景。  \n\n    人活着最难得的是拥有-颗感恩的心，一个人心中有多少感恩就有多少福祉，感恩是一种源源不断的力量，当你懂得感恩，会因此而感到快乐，从而走向一条通往幸福路。  \n\n    人是向内而活的，无论这一路上你经历过什么，都是在通往内心的路上，所以有人说“幸福，不是活成别人那样，而是能够听从自己内心的去生活，为自己想要的东西去努力奋斗，就是幸福。感谢生活 的每一种磨练，让我们懂得心存喜悦,才能被岁月温柔相待，心存感恩，才能走向幸福，不辜负岁月的美。  \n\n    以一颗平常心对待世间所有，相信所有的经历的都是最好的安排，岁月有枯荣，人生有悲喜，没有人能够真正掌控，你要知道，这一生最重要的事情，就是要自己幸福，只有微笑面对，幸福才不会遥远。   ","source":"_posts/2022/04/微笑可以治愈一切.md","raw":"---\ntitle: 微笑可以治愈一切\ncategories: 生活点滴\ndate: 2022-04-01 21:10:16\ntags:  \n      - 生活点滴\ncover: ''\n---\n![./%E5%BE%AE%E7%AC%91%E5%8F%AF%E4%BB%A5%E6%B2%BB%E6%84%88%E4%B8%80%E5%88%87](%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220404143433.jpg)\n    微笑着，幸福才不会遥远。  \n\n    把每一个平凡的日子，梳理成诗意，用微笑将生命点亮，远离生活的阴霾，明媚向暖，如此，才能接近幸福。  \n\n    毕淑敏说，你要学会提醒幸福，那么每天清晨,在触手可及的阳光中，感受生活点滴的美好，在每一个黄昏到来前，收集温暖，心存 感恩的过好每一天。  \n\n    幸福是一种感受，是来自平凡生活中的积累，幸福的人都懂得活在当下，总是喜欢活在昨天的人会懊悔，总是活在明天的人会焦虑，只有活在今天的人才会幸福。  \n\n    幸福，也许是饿了的时候一顿饭，也许是你渴的时候的一杯水，是寻常日子里一声问候，是一路走来不离不弃陪伴的。  \n\n    不管怎样，你要有一双发现美好的眼睛，和热爱生活的心，来感受幸福，珍惜幸福，才能得到幸福。  \n\n    人生，是悲喜交织的旅途，生活时常会有不如意，我们不求时时花开，只愿遇到寒凉时心中有暖，遇到不如意时能有一种内在的力量，来走过那些不开心的日子。  \n\n    带上你的微笑吧，尽管人生会有这样或那样的不如意，生活也会有风霜雪雨，但没有什么是过不去的，时间总会带来惊喜，你要知道，爱笑的人，命运一般都不会太差。  \n\n    生活，没有固定的模式，只需一盏心灯，烦恼的时候，别忘记了快乐，忙碌的时候，别忘了健康，人这一辈子，无论过得有多么富有，离开的时候也是两手空空，唯有健康快乐，才是真正的幸福。  \n\n    去习惯微笑吧，人生难免会经历一些酸甜苦辣,微笑着让往事不染风尘，记住该记住的，忘记该忘记的，幸福会在下一个转角处等你。  \n\n    人活着最重要的是心态，很多时候，幸福与金钱和地位无关，它不是别人给予的，只是心底的一份从容，只要心存阳光，总能于薄凉中看到最美的风景。  \n\n    人活着最难得的是拥有-颗感恩的心，一个人心中有多少感恩就有多少福祉，感恩是一种源源不断的力量，当你懂得感恩，会因此而感到快乐，从而走向一条通往幸福路。  \n\n    人是向内而活的，无论这一路上你经历过什么，都是在通往内心的路上，所以有人说“幸福，不是活成别人那样，而是能够听从自己内心的去生活，为自己想要的东西去努力奋斗，就是幸福。感谢生活 的每一种磨练，让我们懂得心存喜悦,才能被岁月温柔相待，心存感恩，才能走向幸福，不辜负岁月的美。  \n\n    以一颗平常心对待世间所有，相信所有的经历的都是最好的安排，岁月有枯荣，人生有悲喜，没有人能够真正掌控，你要知道，这一生最重要的事情，就是要自己幸福，只有微笑面对，幸福才不会遥远。   ","slug":"微笑可以治愈一切","published":1,"updated":"2022-04-04T14:49:33.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb34x003gn4vo6k2a6n2c","content":"<p><img src=\"%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220404143433.jpg\" alt=\"./%E5%BE%AE%E7%AC%91%E5%8F%AF%E4%BB%A5%E6%B2%BB%E6%84%88%E4%B8%80%E5%88%87\"><br>    微笑着，幸福才不会遥远。  </p>\n<pre><code>把每一个平凡的日子，梳理成诗意，用微笑将生命点亮，远离生活的阴霾，明媚向暖，如此，才能接近幸福。  \n\n毕淑敏说，你要学会提醒幸福，那么每天清晨,在触手可及的阳光中，感受生活点滴的美好，在每一个黄昏到来前，收集温暖，心存 感恩的过好每一天。  \n\n幸福是一种感受，是来自平凡生活中的积累，幸福的人都懂得活在当下，总是喜欢活在昨天的人会懊悔，总是活在明天的人会焦虑，只有活在今天的人才会幸福。  \n\n幸福，也许是饿了的时候一顿饭，也许是你渴的时候的一杯水，是寻常日子里一声问候，是一路走来不离不弃陪伴的。  \n\n不管怎样，你要有一双发现美好的眼睛，和热爱生活的心，来感受幸福，珍惜幸福，才能得到幸福。  \n\n人生，是悲喜交织的旅途，生活时常会有不如意，我们不求时时花开，只愿遇到寒凉时心中有暖，遇到不如意时能有一种内在的力量，来走过那些不开心的日子。  \n\n带上你的微笑吧，尽管人生会有这样或那样的不如意，生活也会有风霜雪雨，但没有什么是过不去的，时间总会带来惊喜，你要知道，爱笑的人，命运一般都不会太差。  \n\n生活，没有固定的模式，只需一盏心灯，烦恼的时候，别忘记了快乐，忙碌的时候，别忘了健康，人这一辈子，无论过得有多么富有，离开的时候也是两手空空，唯有健康快乐，才是真正的幸福。  \n\n去习惯微笑吧，人生难免会经历一些酸甜苦辣,微笑着让往事不染风尘，记住该记住的，忘记该忘记的，幸福会在下一个转角处等你。  \n\n人活着最重要的是心态，很多时候，幸福与金钱和地位无关，它不是别人给予的，只是心底的一份从容，只要心存阳光，总能于薄凉中看到最美的风景。  \n\n人活着最难得的是拥有-颗感恩的心，一个人心中有多少感恩就有多少福祉，感恩是一种源源不断的力量，当你懂得感恩，会因此而感到快乐，从而走向一条通往幸福路。  \n\n人是向内而活的，无论这一路上你经历过什么，都是在通往内心的路上，所以有人说“幸福，不是活成别人那样，而是能够听从自己内心的去生活，为自己想要的东西去努力奋斗，就是幸福。感谢生活 的每一种磨练，让我们懂得心存喜悦,才能被岁月温柔相待，心存感恩，才能走向幸福，不辜负岁月的美。  \n\n以一颗平常心对待世间所有，相信所有的经历的都是最好的安排，岁月有枯荣，人生有悲喜，没有人能够真正掌控，你要知道，这一生最重要的事情，就是要自己幸福，只有微笑面对，幸福才不会遥远。   \n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220404143433.jpg\" alt=\"./%E5%BE%AE%E7%AC%91%E5%8F%AF%E4%BB%A5%E6%B2%BB%E6%84%88%E4%B8%80%E5%88%87\"><br>    微笑着，幸福才不会遥远。  </p>\n<pre><code>把每一个平凡的日子，梳理成诗意，用微笑将生命点亮，远离生活的阴霾，明媚向暖，如此，才能接近幸福。  \n\n毕淑敏说，你要学会提醒幸福，那么每天清晨,在触手可及的阳光中，感受生活点滴的美好，在每一个黄昏到来前，收集温暖，心存 感恩的过好每一天。  \n\n幸福是一种感受，是来自平凡生活中的积累，幸福的人都懂得活在当下，总是喜欢活在昨天的人会懊悔，总是活在明天的人会焦虑，只有活在今天的人才会幸福。  \n\n幸福，也许是饿了的时候一顿饭，也许是你渴的时候的一杯水，是寻常日子里一声问候，是一路走来不离不弃陪伴的。  \n\n不管怎样，你要有一双发现美好的眼睛，和热爱生活的心，来感受幸福，珍惜幸福，才能得到幸福。  \n\n人生，是悲喜交织的旅途，生活时常会有不如意，我们不求时时花开，只愿遇到寒凉时心中有暖，遇到不如意时能有一种内在的力量，来走过那些不开心的日子。  \n\n带上你的微笑吧，尽管人生会有这样或那样的不如意，生活也会有风霜雪雨，但没有什么是过不去的，时间总会带来惊喜，你要知道，爱笑的人，命运一般都不会太差。  \n\n生活，没有固定的模式，只需一盏心灯，烦恼的时候，别忘记了快乐，忙碌的时候，别忘了健康，人这一辈子，无论过得有多么富有，离开的时候也是两手空空，唯有健康快乐，才是真正的幸福。  \n\n去习惯微笑吧，人生难免会经历一些酸甜苦辣,微笑着让往事不染风尘，记住该记住的，忘记该忘记的，幸福会在下一个转角处等你。  \n\n人活着最重要的是心态，很多时候，幸福与金钱和地位无关，它不是别人给予的，只是心底的一份从容，只要心存阳光，总能于薄凉中看到最美的风景。  \n\n人活着最难得的是拥有-颗感恩的心，一个人心中有多少感恩就有多少福祉，感恩是一种源源不断的力量，当你懂得感恩，会因此而感到快乐，从而走向一条通往幸福路。  \n\n人是向内而活的，无论这一路上你经历过什么，都是在通往内心的路上，所以有人说“幸福，不是活成别人那样，而是能够听从自己内心的去生活，为自己想要的东西去努力奋斗，就是幸福。感谢生活 的每一种磨练，让我们懂得心存喜悦,才能被岁月温柔相待，心存感恩，才能走向幸福，不辜负岁月的美。  \n\n以一颗平常心对待世间所有，相信所有的经历的都是最好的安排，岁月有枯荣，人生有悲喜，没有人能够真正掌控，你要知道，这一生最重要的事情，就是要自己幸福，只有微笑面对，幸福才不会遥远。   \n</code></pre>\n"},{"title":"手写new方法和promise方法","date":"2022-04-05T09:05:57.000Z","_content":"### 手写new方法\n```\nfunction parent() {\n    this.name = \"xiaohao\"\n}\nparent.prototype = {\n    walk: function () {\n        console.log(\"walk\")\n    }\n}\nfunction newfn(fn) {\n    if (typeof fn != 'function') {\n        return;\n    }\n    let son = {}\n    fn.call(son)\n    fn.prototype.constructor = fn;\n    son.__proto__ = fn.prototype;\n    return son;\n}\nlet son1 = newfn(parent);\nson1.walk();\n```\n\n### 手写promise方法\n```\nclass promise {\n    construtctor(executor) {\n        this.state = \"pedding\"\n        this.value = null;\n        this.reason = null;\n        this.onFulfilledCallBack = []\n        this.onRejectedCallBack = []\n\n        function resolve(value) {\n            if (this.state == \"pedding\") {\n                this.state = \"fulfilled\"\n                this.value = value\n                this.onFulfilledCallBack.foreach(item => item(this.value))\n            }\n        }\n        function reject(reason) {\n            if (this.state == \"pedding\") {\n                this.state = \"rejected\"\n                this.reason = reason;\n                this.onRejectedCallBack.foreach(item => item(this.reason))\n            }\n        }\n        try {\n            executor(resolve, reject)\n        } catch (error) {\n            reject(error)\n        }\n    }\n    then(onFulfilled, onRejected) {\n        if (this.state == \"fulfilled\") {\n            return new promise((resolve, reject) => {\n                onFulfilled(this.value)\n            })\n        }\n        if (this.state == \"rejected\") {\n            return new promise((resolve, reject) => {\n                onRejected(this.reason)\n            })\n        }\n        if (this.state == \"pedding\") {\n            return new promise((resolve, reject) => {\n                this.onFulfilledCallBack.push(onFulfilled)\n                this.onRejectedCallBack.push(onRejected)\n            })\n        }\n    }\n}\n```","source":"_posts/2022/04/手写new方法和promise方法.md","raw":"---\ntitle: 手写new方法和promise方法\ndate: 2022-04-05 17:05:57\ncategories: JavaScript\ntags:\n     - JavaScript \n---\n### 手写new方法\n```\nfunction parent() {\n    this.name = \"xiaohao\"\n}\nparent.prototype = {\n    walk: function () {\n        console.log(\"walk\")\n    }\n}\nfunction newfn(fn) {\n    if (typeof fn != 'function') {\n        return;\n    }\n    let son = {}\n    fn.call(son)\n    fn.prototype.constructor = fn;\n    son.__proto__ = fn.prototype;\n    return son;\n}\nlet son1 = newfn(parent);\nson1.walk();\n```\n\n### 手写promise方法\n```\nclass promise {\n    construtctor(executor) {\n        this.state = \"pedding\"\n        this.value = null;\n        this.reason = null;\n        this.onFulfilledCallBack = []\n        this.onRejectedCallBack = []\n\n        function resolve(value) {\n            if (this.state == \"pedding\") {\n                this.state = \"fulfilled\"\n                this.value = value\n                this.onFulfilledCallBack.foreach(item => item(this.value))\n            }\n        }\n        function reject(reason) {\n            if (this.state == \"pedding\") {\n                this.state = \"rejected\"\n                this.reason = reason;\n                this.onRejectedCallBack.foreach(item => item(this.reason))\n            }\n        }\n        try {\n            executor(resolve, reject)\n        } catch (error) {\n            reject(error)\n        }\n    }\n    then(onFulfilled, onRejected) {\n        if (this.state == \"fulfilled\") {\n            return new promise((resolve, reject) => {\n                onFulfilled(this.value)\n            })\n        }\n        if (this.state == \"rejected\") {\n            return new promise((resolve, reject) => {\n                onRejected(this.reason)\n            })\n        }\n        if (this.state == \"pedding\") {\n            return new promise((resolve, reject) => {\n                this.onFulfilledCallBack.push(onFulfilled)\n                this.onRejectedCallBack.push(onRejected)\n            })\n        }\n    }\n}\n```","slug":"手写new方法和promise方法","published":1,"updated":"2022-04-05T09:09:22.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb359004nn4voabgf29ls","content":"<h3 id=\"手写new方法\"><a href=\"#手写new方法\" class=\"headerlink\" title=\"手写new方法\"></a>手写new方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">parent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;xiaohao&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">parent.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">walk</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;walk&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">newfn</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn != <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> son = &#123;&#125;</span><br><span class=\"line\">    fn.<span class=\"title function_\">call</span>(son)</span><br><span class=\"line\">    fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = fn;</span><br><span class=\"line\">    son.<span class=\"property\">__proto__</span> = fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> son;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> son1 = <span class=\"title function_\">newfn</span>(parent);</span><br><span class=\"line\">son1.<span class=\"title function_\">walk</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写promise方法\"><a href=\"#手写promise方法\" class=\"headerlink\" title=\"手写promise方法\"></a>手写promise方法</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">promise</span> </span>&#123;</span><br><span class=\"line\">    construtctor(executor) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">&quot;pedding&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onFulfilledCallBack = []</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallBack = []</span><br><span class=\"line\"></span><br><span class=\"line\">        function resolve(value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state == <span class=\"string\">&quot;pedding&quot;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.state = <span class=\"string\">&quot;fulfilled&quot;</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.onFulfilledCallBack.foreach(item =&gt; item(<span class=\"keyword\">this</span>.value))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        function reject(reason) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state == <span class=\"string\">&quot;pedding&quot;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.state = <span class=\"string\">&quot;rejected&quot;</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.onRejectedCallBack.foreach(item =&gt; item(<span class=\"keyword\">this</span>.reason))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            executor(resolve, reject)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            reject(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    then(onFulfilled, onRejected) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state == <span class=\"string\">&quot;fulfilled&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> new promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">                onFulfilled(<span class=\"keyword\">this</span>.value)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state == <span class=\"string\">&quot;rejected&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> new promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">                onRejected(<span class=\"keyword\">this</span>.reason)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state == <span class=\"string\">&quot;pedding&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> new promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.onFulfilledCallBack.push(onFulfilled)</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.onRejectedCallBack.push(onRejected)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"手写new方法\"><a href=\"#手写new方法\" class=\"headerlink\" title=\"手写new方法\"></a>手写new方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">parent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;xiaohao&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">parent.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">walk</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;walk&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">newfn</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn != <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> son = &#123;&#125;</span><br><span class=\"line\">    fn.<span class=\"title function_\">call</span>(son)</span><br><span class=\"line\">    fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = fn;</span><br><span class=\"line\">    son.<span class=\"property\">__proto__</span> = fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> son;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> son1 = <span class=\"title function_\">newfn</span>(parent);</span><br><span class=\"line\">son1.<span class=\"title function_\">walk</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写promise方法\"><a href=\"#手写promise方法\" class=\"headerlink\" title=\"手写promise方法\"></a>手写promise方法</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">promise</span> </span>&#123;</span><br><span class=\"line\">    construtctor(executor) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">&quot;pedding&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onFulfilledCallBack = []</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallBack = []</span><br><span class=\"line\"></span><br><span class=\"line\">        function resolve(value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state == <span class=\"string\">&quot;pedding&quot;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.state = <span class=\"string\">&quot;fulfilled&quot;</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.onFulfilledCallBack.foreach(item =&gt; item(<span class=\"keyword\">this</span>.value))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        function reject(reason) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state == <span class=\"string\">&quot;pedding&quot;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.state = <span class=\"string\">&quot;rejected&quot;</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.onRejectedCallBack.foreach(item =&gt; item(<span class=\"keyword\">this</span>.reason))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            executor(resolve, reject)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            reject(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    then(onFulfilled, onRejected) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state == <span class=\"string\">&quot;fulfilled&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> new promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">                onFulfilled(<span class=\"keyword\">this</span>.value)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state == <span class=\"string\">&quot;rejected&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> new promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">                onRejected(<span class=\"keyword\">this</span>.reason)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state == <span class=\"string\">&quot;pedding&quot;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> new promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.onFulfilledCallBack.push(onFulfilled)</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.onRejectedCallBack.push(onRejected)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"正则表达式","date":"2022-04-02T09:02:06.000Z","_content":"\n## 数字相关的正则表达式\n```\n去空格： /^\\s+|\\s+$/g\n数字： ^[0-9]*$\nn位定长的数字： ^\\d{n}$\nm-n位之间的数字： ^\\d{m,n}$\n零和非零开头的数字： ^(0|[1-9][0-9]*)$\n非零开头的最多带两位小数的数字： ^([1-9][0-9]*)+(.[0-9]{1,2})?$\n带1-2位小数的正数或负数： ^(\\-)?\\d+(\\.\\d{1,2})?$\n正数、负数、和小数： ^(\\-|\\+)?\\d+(\\.\\d+)?$\n有两位小数的正实数： ^[0-9]+(.[0-9]{2})?$\n有1~3位小数的正实数： ^[0-9]+(.[0-9]{1,3})?$\n正整数： ^\\d+$ 或 ^[1-9]\\d*|0$\n负整数： ^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$\n正浮点数： \n^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ \n^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$\n负浮点数： \n^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$\n ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$\n浮点数： ^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$\n```\n## 字符相关的正则表达式\n```\n汉字： ^[\\u4e00-\\u9fa5]{0,}$\n长度为3-20的所有字符： ^.{3,20}$\n由数字和26个英文字母组成的字符串： ^[A-Za-z0-9]+$\n由数字、26个英文字母或者下划线组成的字符串： ^\\w+$ 或 ^\\w{3,20}$\n中文、英文、数字包括下划线： ^[\\u4E00-\\u9FA5A-Za-z0-9_]+$\n中文、英文、数字但不包括下划线等符号： \n^[\\u4E00-\\u9FA5A-Za-z0-9]+$ \n ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$\n帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)： \n^[a-zA-Z][a-zA-Z0-9_]{4,15}$\n密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)： \n^[a-zA-Z]\\w{5,17}$\n强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：\n ^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$\n```\n## 固定格式约定俗成的正则表达式\n```\nEmail地址： ^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$\n网站域名： [a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?\nURL网址： ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=]*)?$\n手机号码： \n^(13[0-9]|17[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$\n\n电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、\n”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)： \n^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$\n国内电话号码(0511-4405222、021-87888822)： \\d{3}-\\d{8}|\\d{4}-\\d{7}\n身份证号(15位、18位数字)： ^\\d{15}|\\d{18}$\n日期格式： ^\\d{4}-\\d{1,2}-\\d{1,2}\n一年的12个月(01～09和1～12)： ^(0?[1-9]|1[0-2])$\n一个月的31天(01～09和1～31)： ^((0?[1-9])|((1|2)[0-9])|30|31)$\n腾讯QQ号： [1-9][0-9]{4,8} (腾讯QQ号从10000开始，目前最长为10位)\n中国邮政编码： [1-9]\\d{5}(?!\\d) (中国邮政编码为6位数字)\nIP地址： \\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用)\nIP地址： ((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))\n```\n## 常用的方法\n### 1.test() \n#### 在字符串中查找符合正则的内容，若查找到返回true,反之返回false.\n```\nvar str = '374829348791';\nvar re = /\\D/; //  \\D代表非数字\nif (re.test(str)) { // 返回true,代表在字符串中找到了非数字。\n    alert('不全是数字');\n} else {\n    alert('全是数字');\n}\n```\n### 2.search() \n####  在字符串搜索符合正则的内容，搜索到就返回出现的位置\n#### （从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1\n```\nvar str = \"abc\"\nvar string = 'abbbbccbebababccbaabcbccbaabbccabcc'\n\nfunction regex(str1, str2) {\n    let regex = new RegExp(str1, \"g\");\n    console.log(str2.search(regex));\n}\nregex(str, string)\n```\n### 3.match() \n#### 在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\n```\nvar str = 'haj123sdk54hask33dkhalsd879';\nvar re = /\\d+/g; // 每次匹配至少一个数字  且全局匹配  如果不是全局匹配，当找到数字123，它就会停止了。就只会弹出123.加上全局匹配，就会从开始到结束一直去搜索符合规则的。如果没有加号，匹配的结果就是1，2，3，5，4，3，3，879并不是我们想要的，有了加号，每次匹配的数字就是至少一个了。\nalert(str.match(re)); // [123，54，33，879]\n```\n### replace() \n#### 查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。 \n```\nvar str = \"我爱北京天安门，天安门上太阳升。\";\nvar re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配\nvar str2 = str.replace(re,'*'); \nalert(str2)  //我爱**，*上太阳升 \n\n//这种只是把找到的变成了一个*，并不能几个字就对应几个*。\nvar str = \"我爱北京天安门，天安门上太阳升。\";\nvar re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配\nvar str2 = str.replace(re,function(str){\n              alert(str); //用来测试：函数的第一个参数代表每次搜索到的符合正则的字符，所以第一次str指的是北京 第二次str是天安门 第三次str是天安门\n            var result = '';\n            for(var i=0;i<str.length;i++){\n                result += '*';\n            }              \n            return result; //所以搜索到了几个字就返回几个* \n        });\nalert(str2)  //我爱*****，***上太阳升         \n\n//整个过程就是，找到北京，替换成了两个*，找到天安门替换成了3个*，找到天安门替换成3个*。\n```\n把2013-6-7替换成2013.6.7\n```\n//整个过程就是利用子项把2013- 6- 分别替换成了2013. 6.  最终弹出2013.6.7\nvar str = '2013-6-7';\nvar re = /(\\d+)(-)/g;\n\nstr = str.replace(re,function($0,$1,$2){\n\n      //replace()中如果有子项，\n      //第一个参数：$0（匹配成功后的整体结果  2013-  6-）,\n      // 第二个参数 : $1(匹配成功的第一个分组，这里指的是\\d   2013, 6)\n      //第三个参数 : $1(匹配成功的第二个分组，这里指的是-    - - )   \n    return $1 + '.';  //分别返回2013.   6.\n\n});\n\nalert( str );   //2013.6.7\n```\n\n找重复项最多的字符个数\n```\n// split():字符串中的方法，把字符串转成数组。\n// sort():数组中的排序方法，按照ACALL码进行排序。\n// join():数组中的方法，把数组转换为字符串\n\nvar str = 'assssjdssskssalsssdkjsssdss';\nvar arr = str.split(''); //把字符串转换为数组\nstr = arr.sort().join(''); //首先进行排序，这样结果会把相同的字符放在一起，然后再转换为字符串\n//alert(str);  // aaddjjkklsssssssssssssssss\n\nvar value = '';\nvar index = 0;\nvar re = /(\\w)\\1+/g;  //匹配字符，且重复这个字符，重复次数至少一次。\nstr.replace(re,function($0,$1){\n  //alert($0);   代表每次匹配成功的结果 : aa dd jj kk l sssssssssssssssss\n  //alert($1);  代表每次匹配成功的第一个子项，也就是\\w:  a d j k l S\n  if(index<$0.length){  //如果index保存的值小于$0的长度就进行下面的操作\n    index = $0.length;  // 这样index一直保存的就在最大的长度\n    value = $1;  //value保存的是出现最多的这个字符\n  }\n});\nconsole.log('最多的字符:'+value+',重复的次数:'+index);  // s   17\n```\n\n查找字符串'abc'在字符串'abbbbccbebababccbaabcbccbaabbccabcc'第一次出现的位置\n```\nvar str = \"abc\"\nvar string = 'abbbbccbebababccbaabcbccbaabbccabcc'\nfunction regex(str1,str2){\n    let regex = new RegExp(str1,\"g\");\n    console.log(str2.search(regex));\n}\nregex(str,string)\n```\n\n","source":"_posts/2022/04/正则表达式.md","raw":"---\ntitle: 正则表达式\ncategories: JavaScript\ndate: 2022-04-02 17:02:06\ntags:\n  - JavaScript\n---\n\n## 数字相关的正则表达式\n```\n去空格： /^\\s+|\\s+$/g\n数字： ^[0-9]*$\nn位定长的数字： ^\\d{n}$\nm-n位之间的数字： ^\\d{m,n}$\n零和非零开头的数字： ^(0|[1-9][0-9]*)$\n非零开头的最多带两位小数的数字： ^([1-9][0-9]*)+(.[0-9]{1,2})?$\n带1-2位小数的正数或负数： ^(\\-)?\\d+(\\.\\d{1,2})?$\n正数、负数、和小数： ^(\\-|\\+)?\\d+(\\.\\d+)?$\n有两位小数的正实数： ^[0-9]+(.[0-9]{2})?$\n有1~3位小数的正实数： ^[0-9]+(.[0-9]{1,3})?$\n正整数： ^\\d+$ 或 ^[1-9]\\d*|0$\n负整数： ^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$\n正浮点数： \n^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ \n^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$\n负浮点数： \n^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$\n ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$\n浮点数： ^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$\n```\n## 字符相关的正则表达式\n```\n汉字： ^[\\u4e00-\\u9fa5]{0,}$\n长度为3-20的所有字符： ^.{3,20}$\n由数字和26个英文字母组成的字符串： ^[A-Za-z0-9]+$\n由数字、26个英文字母或者下划线组成的字符串： ^\\w+$ 或 ^\\w{3,20}$\n中文、英文、数字包括下划线： ^[\\u4E00-\\u9FA5A-Za-z0-9_]+$\n中文、英文、数字但不包括下划线等符号： \n^[\\u4E00-\\u9FA5A-Za-z0-9]+$ \n ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$\n帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)： \n^[a-zA-Z][a-zA-Z0-9_]{4,15}$\n密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)： \n^[a-zA-Z]\\w{5,17}$\n强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：\n ^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$\n```\n## 固定格式约定俗成的正则表达式\n```\nEmail地址： ^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$\n网站域名： [a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?\nURL网址： ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=]*)?$\n手机号码： \n^(13[0-9]|17[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$\n\n电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、\n”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)： \n^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$\n国内电话号码(0511-4405222、021-87888822)： \\d{3}-\\d{8}|\\d{4}-\\d{7}\n身份证号(15位、18位数字)： ^\\d{15}|\\d{18}$\n日期格式： ^\\d{4}-\\d{1,2}-\\d{1,2}\n一年的12个月(01～09和1～12)： ^(0?[1-9]|1[0-2])$\n一个月的31天(01～09和1～31)： ^((0?[1-9])|((1|2)[0-9])|30|31)$\n腾讯QQ号： [1-9][0-9]{4,8} (腾讯QQ号从10000开始，目前最长为10位)\n中国邮政编码： [1-9]\\d{5}(?!\\d) (中国邮政编码为6位数字)\nIP地址： \\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用)\nIP地址： ((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))\n```\n## 常用的方法\n### 1.test() \n#### 在字符串中查找符合正则的内容，若查找到返回true,反之返回false.\n```\nvar str = '374829348791';\nvar re = /\\D/; //  \\D代表非数字\nif (re.test(str)) { // 返回true,代表在字符串中找到了非数字。\n    alert('不全是数字');\n} else {\n    alert('全是数字');\n}\n```\n### 2.search() \n####  在字符串搜索符合正则的内容，搜索到就返回出现的位置\n#### （从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1\n```\nvar str = \"abc\"\nvar string = 'abbbbccbebababccbaabcbccbaabbccabcc'\n\nfunction regex(str1, str2) {\n    let regex = new RegExp(str1, \"g\");\n    console.log(str2.search(regex));\n}\nregex(str, string)\n```\n### 3.match() \n#### 在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\n```\nvar str = 'haj123sdk54hask33dkhalsd879';\nvar re = /\\d+/g; // 每次匹配至少一个数字  且全局匹配  如果不是全局匹配，当找到数字123，它就会停止了。就只会弹出123.加上全局匹配，就会从开始到结束一直去搜索符合规则的。如果没有加号，匹配的结果就是1，2，3，5，4，3，3，879并不是我们想要的，有了加号，每次匹配的数字就是至少一个了。\nalert(str.match(re)); // [123，54，33，879]\n```\n### replace() \n#### 查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。 \n```\nvar str = \"我爱北京天安门，天安门上太阳升。\";\nvar re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配\nvar str2 = str.replace(re,'*'); \nalert(str2)  //我爱**，*上太阳升 \n\n//这种只是把找到的变成了一个*，并不能几个字就对应几个*。\nvar str = \"我爱北京天安门，天安门上太阳升。\";\nvar re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配\nvar str2 = str.replace(re,function(str){\n              alert(str); //用来测试：函数的第一个参数代表每次搜索到的符合正则的字符，所以第一次str指的是北京 第二次str是天安门 第三次str是天安门\n            var result = '';\n            for(var i=0;i<str.length;i++){\n                result += '*';\n            }              \n            return result; //所以搜索到了几个字就返回几个* \n        });\nalert(str2)  //我爱*****，***上太阳升         \n\n//整个过程就是，找到北京，替换成了两个*，找到天安门替换成了3个*，找到天安门替换成3个*。\n```\n把2013-6-7替换成2013.6.7\n```\n//整个过程就是利用子项把2013- 6- 分别替换成了2013. 6.  最终弹出2013.6.7\nvar str = '2013-6-7';\nvar re = /(\\d+)(-)/g;\n\nstr = str.replace(re,function($0,$1,$2){\n\n      //replace()中如果有子项，\n      //第一个参数：$0（匹配成功后的整体结果  2013-  6-）,\n      // 第二个参数 : $1(匹配成功的第一个分组，这里指的是\\d   2013, 6)\n      //第三个参数 : $1(匹配成功的第二个分组，这里指的是-    - - )   \n    return $1 + '.';  //分别返回2013.   6.\n\n});\n\nalert( str );   //2013.6.7\n```\n\n找重复项最多的字符个数\n```\n// split():字符串中的方法，把字符串转成数组。\n// sort():数组中的排序方法，按照ACALL码进行排序。\n// join():数组中的方法，把数组转换为字符串\n\nvar str = 'assssjdssskssalsssdkjsssdss';\nvar arr = str.split(''); //把字符串转换为数组\nstr = arr.sort().join(''); //首先进行排序，这样结果会把相同的字符放在一起，然后再转换为字符串\n//alert(str);  // aaddjjkklsssssssssssssssss\n\nvar value = '';\nvar index = 0;\nvar re = /(\\w)\\1+/g;  //匹配字符，且重复这个字符，重复次数至少一次。\nstr.replace(re,function($0,$1){\n  //alert($0);   代表每次匹配成功的结果 : aa dd jj kk l sssssssssssssssss\n  //alert($1);  代表每次匹配成功的第一个子项，也就是\\w:  a d j k l S\n  if(index<$0.length){  //如果index保存的值小于$0的长度就进行下面的操作\n    index = $0.length;  // 这样index一直保存的就在最大的长度\n    value = $1;  //value保存的是出现最多的这个字符\n  }\n});\nconsole.log('最多的字符:'+value+',重复的次数:'+index);  // s   17\n```\n\n查找字符串'abc'在字符串'abbbbccbebababccbaabcbccbaabbccabcc'第一次出现的位置\n```\nvar str = \"abc\"\nvar string = 'abbbbccbebababccbaabcbccbaabbccabcc'\nfunction regex(str1,str2){\n    let regex = new RegExp(str1,\"g\");\n    console.log(str2.search(regex));\n}\nregex(str,string)\n```\n\n","slug":"正则表达式","published":1,"updated":"2022-04-05T09:13:15.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb35b004on4vohsrsa0sx","content":"<h2 id=\"数字相关的正则表达式\"><a href=\"#数字相关的正则表达式\" class=\"headerlink\" title=\"数字相关的正则表达式\"></a>数字相关的正则表达式</h2><figure class=\"highlight subunit\"><table><tr><td class=\"code\"><pre><span class=\"line\">去空格： /^\\s+|\\s+$/g</span><br><span class=\"line\">数字： ^[0<span class=\"string\">-9</span>]*$</span><br><span class=\"line\">n位定长的数字： ^\\d&#123;n&#125;$</span><br><span class=\"line\">m-n位之间的数字： ^\\d&#123;m,n&#125;$</span><br><span class=\"line\">零和非零开头的数字： ^(0|[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)$</span><br><span class=\"line\">非零开头的最多带两位小数的数字： ^([1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)+(.[0<span class=\"string\">-9</span>]&#123;1,2&#125;)?$</span><br><span class=\"line\">带1<span class=\"string\">-2</span>位小数的正数或负数： ^(\\-)?\\d+(\\.\\d&#123;1,2&#125;)?$</span><br><span class=\"line\">正数、负数、和小数： ^(\\-|\\+)?\\d+(\\.\\d+)?$</span><br><span class=\"line\">有两位小数的正实数： ^[0<span class=\"string\">-9</span>]+(.[0<span class=\"string\">-9</span>]&#123;2&#125;)?$</span><br><span class=\"line\">有1~3位小数的正实数： ^[0<span class=\"string\">-9</span>]+(.[0<span class=\"string\">-9</span>]&#123;1,3&#125;)?$</span><br><span class=\"line\">正整数： ^\\d+$ 或 ^[1<span class=\"string\">-9</span>]\\d*|0$</span><br><span class=\"line\">负整数： ^-[1<span class=\"string\">-9</span>]\\d*|0$ 或 ^((-\\d+)|(0+))$</span><br><span class=\"line\">正浮点数： </span><br><span class=\"line\">^[1<span class=\"string\">-9</span>]\\d*\\.\\d*|0\\.\\d*[1<span class=\"string\">-9</span>]\\d*$ </span><br><span class=\"line\">^(([0<span class=\"string\">-9</span>]+\\.[0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*\\.[0<span class=\"string\">-9</span>]+)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*))$</span><br><span class=\"line\">负浮点数： </span><br><span class=\"line\">^-([1<span class=\"string\">-9</span>]\\d*\\.\\d*|0\\.\\d*[1<span class=\"string\">-9</span>]\\d*)$</span><br><span class=\"line\"> ^(-(([0<span class=\"string\">-9</span>]+\\.[0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*\\.[0<span class=\"string\">-9</span>]+)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)))$</span><br><span class=\"line\">浮点数： ^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1<span class=\"string\">-9</span>]\\d*\\.\\d*|0\\.\\d*[1<span class=\"string\">-9</span>]\\d*|0?\\.0+|0)$</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符相关的正则表达式\"><a href=\"#字符相关的正则表达式\" class=\"headerlink\" title=\"字符相关的正则表达式\"></a>字符相关的正则表达式</h2><figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">汉字： ^<span class=\"selector-attr\">[\\u4e00-\\u9fa5]</span>&#123;<span class=\"number\">0</span>,&#125;$</span><br><span class=\"line\">长度为<span class=\"number\">3</span>-<span class=\"number\">20</span>的所有字符： ^.&#123;<span class=\"number\">3</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\">由数字和<span class=\"number\">26</span>个英文字母组成的字符串： ^<span class=\"selector-attr\">[A-Za-z0-9]</span>+$</span><br><span class=\"line\">由数字、<span class=\"number\">26</span>个英文字母或者下划线组成的字符串： ^\\w+$ 或 ^\\w&#123;<span class=\"number\">3</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\">中文、英文、数字包括下划线： ^<span class=\"selector-attr\">[\\u4E00-\\u9FA5A-Za-z0-9_]</span>+$</span><br><span class=\"line\">中文、英文、数字但不包括下划线等符号： </span><br><span class=\"line\">^<span class=\"selector-attr\">[\\u4E00-\\u9FA5A-Za-z0-9]</span>+$ </span><br><span class=\"line\"> ^<span class=\"selector-attr\">[\\u4E00-\\u9FA5A-Za-z0-9]</span>&#123;<span class=\"number\">2</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\">帐号是否合法(字母开头，允许<span class=\"number\">5</span>-<span class=\"number\">16</span>字节，允许字母数字下划线)： </span><br><span class=\"line\">^<span class=\"selector-attr\">[a-zA-Z]</span><span class=\"selector-attr\">[a-zA-Z0-9_]</span>&#123;<span class=\"number\">4</span>,<span class=\"number\">15</span>&#125;$</span><br><span class=\"line\">密码(以字母开头，长度在<span class=\"number\">6</span>~<span class=\"number\">18</span>之间，只能包含字母、数字和下划线)： </span><br><span class=\"line\">^<span class=\"selector-attr\">[a-zA-Z]</span>\\w&#123;<span class=\"number\">5</span>,<span class=\"number\">17</span>&#125;$</span><br><span class=\"line\">强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在<span class=\"number\">8</span>-<span class=\"number\">10</span>之间)：</span><br><span class=\"line\"> ^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;<span class=\"number\">8</span>,<span class=\"number\">10</span>&#125;$</span><br></pre></td></tr></table></figure>\n<h2 id=\"固定格式约定俗成的正则表达式\"><a href=\"#固定格式约定俗成的正则表达式\" class=\"headerlink\" title=\"固定格式约定俗成的正则表达式\"></a>固定格式约定俗成的正则表达式</h2><figure class=\"highlight gherkin\"><table><tr><td class=\"code\"><pre><span class=\"line\">Email地址： ^\\w+([-+.]\\w+)<span class=\"symbol\">*</span><span class=\"meta\">@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$</span></span><br><span class=\"line\">网站域名： [a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span><br><span class=\"line\">URL网址： ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]<span class=\"symbol\">*</span>)?$</span><br><span class=\"line\">手机号码： </span><br><span class=\"line\">^(13[0-9]|<span class=\"string\">17[0-9]</span>|<span class=\"string\">14[5</span>|<span class=\"string\">7]</span>|<span class=\"string\">15[0</span>|<span class=\"string\">1</span>|<span class=\"string\">2</span>|<span class=\"string\">3</span>|<span class=\"string\">5</span>|<span class=\"string\">6</span>|<span class=\"string\">7</span>|<span class=\"string\">8</span>|<span class=\"string\">9]</span>|<span class=\"string\">18[0</span>|<span class=\"string\">1</span>|<span class=\"string\">2</span>|<span class=\"string\">3</span>|<span class=\"string\">5</span>|<span class=\"string\">6</span>|<span class=\"string\">7</span>|<span class=\"string\">8</span>|<span class=\"string\">9])\\d&#123;8&#125;$</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、</span></span><br><span class=\"line\"><span class=\"string\">”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)： </span></span><br><span class=\"line\"><span class=\"string\">^(\\(\\d&#123;3,4&#125;-)</span>|<span class=\"string\">\\d&#123;3.4&#125;-)?\\d&#123;7,8&#125;$</span></span><br><span class=\"line\"><span class=\"string\">国内电话号码(0511-4405222、021-87888822)： \\d&#123;3&#125;-\\d&#123;8&#125;</span>|<span class=\"string\">\\d&#123;4&#125;-\\d&#123;7&#125;</span></span><br><span class=\"line\"><span class=\"string\">身份证号(15位、18位数字)： ^\\d&#123;15&#125;</span>|<span class=\"string\">\\d&#123;18&#125;$</span></span><br><span class=\"line\"><span class=\"string\">日期格式： ^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;</span></span><br><span class=\"line\"><span class=\"string\">一年的12个月(01～09和1～12)： ^(0?[1-9]</span>|<span class=\"string\">1[0-2])$</span></span><br><span class=\"line\"><span class=\"string\">一个月的31天(01～09和1～31)： ^((0?[1-9])</span>|<span class=\"string\">((1</span>|<span class=\"string\">2)[0-9])</span>|<span class=\"string\">30</span>|<span class=\"string\">31)$</span></span><br><span class=\"line\"><span class=\"string\">腾讯QQ号： [1-9][0-9]&#123;4,8&#125; (腾讯QQ号从10000开始，目前最长为10位)</span></span><br><span class=\"line\"><span class=\"string\">中国邮政编码： [1-9]\\d&#123;5&#125;(?!\\d) (中国邮政编码为6位数字)</span></span><br><span class=\"line\"><span class=\"string\">IP地址： \\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用)</span></span><br><span class=\"line\"><span class=\"string\">IP地址： ((?:(?:25[0-5]</span>|<span class=\"string\">2[0-4]\\\\d</span>|<span class=\"string\">[01]?\\\\d?\\\\d)\\\\.)&#123;3&#125;(?:25[0-5]</span>|<span class=\"string\">2[0-4]\\\\d</span>|<span class=\"string\">[01]?\\\\d?\\\\d))</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"常用的方法\"><a href=\"#常用的方法\" class=\"headerlink\" title=\"常用的方法\"></a>常用的方法</h2><h3 id=\"1-test\"><a href=\"#1-test\" class=\"headerlink\" title=\"1.test()\"></a>1.test()</h3><h4 id=\"在字符串中查找符合正则的内容，若查找到返回true-反之返回false\"><a href=\"#在字符串中查找符合正则的内容，若查找到返回true-反之返回false\" class=\"headerlink\" title=\"在字符串中查找符合正则的内容，若查找到返回true,反之返回false.\"></a>在字符串中查找符合正则的内容，若查找到返回true,反之返回false.</h4><figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;374829348791&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/\\D/</span>; <span class=\"comment\">//  \\D代表非数字</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (re.test(str)) &#123; <span class=\"comment\">// 返回true,代表在字符串中找到了非数字。</span></span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;不全是数字&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;全是数字&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-search\"><a href=\"#2-search\" class=\"headerlink\" title=\"2.search()\"></a>2.search()</h3><h4 id=\"在字符串搜索符合正则的内容，搜索到就返回出现的位置\"><a href=\"#在字符串搜索符合正则的内容，搜索到就返回出现的位置\" class=\"headerlink\" title=\"在字符串搜索符合正则的内容，搜索到就返回出现的位置\"></a>在字符串搜索符合正则的内容，搜索到就返回出现的位置</h4><h4 id=\"（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置），-如果搜索失败就返回-1\"><a href=\"#（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置），-如果搜索失败就返回-1\" class=\"headerlink\" title=\"（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1\"></a>（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1</h4><figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;abbbbccbebababccbaabcbccbaabbccabcc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">regex</span>(<span class=\"params\">str1, str2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(str1, <span class=\"string\">&quot;g&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str2.search(regex));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">regex(str, <span class=\"built_in\">string</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-match\"><a href=\"#3-match\" class=\"headerlink\" title=\"3.match()\"></a>3.match()</h3><h4 id=\"在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\"><a href=\"#在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\" class=\"headerlink\" title=\"在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\"></a>在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。</h4><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">var</span> str = &#x27;haj123sdk54hask33dkhalsd879&#x27;;</span><br><span class=\"line\"><span class=\"attribute\">var</span> re = /\\d+/g; // 每次匹配至少一个数字  且全局匹配  如果不是全局匹配，当找到数字<span class=\"number\">123</span>，它就会停止了。就只会弹出<span class=\"number\">123</span>.加上全局匹配，就会从开始到结束一直去搜索符合规则的。如果没有加号，匹配的结果就是<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>，<span class=\"number\">5</span>，<span class=\"number\">4</span>，<span class=\"number\">3</span>，<span class=\"number\">3</span>，<span class=\"number\">879</span>并不是我们想要的，有了加号，每次匹配的数字就是至少一个了。</span><br><span class=\"line\"><span class=\"attribute\">alert</span>(str.match(re)); //<span class=\"meta\"> [123，54，33，879]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace()\"></a>replace()</h3><h4 id=\"查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。\"><a href=\"#查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。\" class=\"headerlink\" title=\"查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。\"></a>查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。</h4><figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;我爱北京天安门，天安门上太阳升。&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/北京|天安门/g</span>;  <span class=\"comment\">//  找到北京 或者天安门 全局匹配</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = str.<span class=\"built_in\">replace</span>(re,<span class=\"string\">&#x27;*&#x27;</span>); </span><br><span class=\"line\">alert(str2)  <span class=\"comment\">//我爱**，*上太阳升 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这种只是把找到的变成了一个*，并不能几个字就对应几个*。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;我爱北京天安门，天安门上太阳升。&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/北京|天安门/g</span>;  <span class=\"comment\">//  找到北京 或者天安门 全局匹配</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = str.<span class=\"built_in\">replace</span>(re,<span class=\"keyword\">function</span>(<span class=\"params\">str</span>)&#123;</span><br><span class=\"line\">              alert(str); <span class=\"comment\">//用来测试：函数的第一个参数代表每次搜索到的符合正则的字符，所以第一次str指的是北京 第二次str是天安门 第三次str是天安门</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;str.<span class=\"built_in\">length</span>;i++)&#123;</span><br><span class=\"line\">                result += <span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\">            &#125;              </span><br><span class=\"line\">            <span class=\"keyword\">return</span> result; <span class=\"comment\">//所以搜索到了几个字就返回几个* </span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">alert(str2)  <span class=\"comment\">//我爱*****，***上太阳升         </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//整个过程就是，找到北京，替换成了两个*，找到天安门替换成了3个*，找到天安门替换成3个*。</span></span><br></pre></td></tr></table></figure>\n<p>把2013-6-7替换成2013.6.7</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>整个过程就是利用子项把<span class=\"number\">2013</span>- <span class=\"number\">6</span>- 分别替换成了<span class=\"number\">2013</span>. <span class=\"number\">6</span>.  最终弹出<span class=\"number\">2013.6</span>.<span class=\"number\">7</span></span><br><span class=\"line\">var str = <span class=\"string\">&#x27;2013-6-7&#x27;</span>;</span><br><span class=\"line\">var re = <span class=\"regexp\">/(\\d+)(-)/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">str = str.replace(re,<span class=\"keyword\">function</span>(<span class=\"variable\">$0</span>,<span class=\"variable\">$1</span>,<span class=\"variable\">$2</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"regexp\">//</span>replace()中如果有子项，</span><br><span class=\"line\">      <span class=\"regexp\">//</span>第一个参数：<span class=\"variable\">$0</span>（匹配成功后的整体结果  <span class=\"number\">2013</span>-  <span class=\"number\">6</span>-）,</span><br><span class=\"line\">      <span class=\"regexp\">//</span> 第二个参数 : <span class=\"variable\">$1</span>(匹配成功的第一个分组，这里指的是\\d   <span class=\"number\">2013</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">      <span class=\"regexp\">//</span>第三个参数 : <span class=\"variable\">$1</span>(匹配成功的第二个分组，这里指的是-    - - )   </span><br><span class=\"line\">    return <span class=\"variable\">$1</span> + <span class=\"string\">&#x27;.&#x27;</span>;  <span class=\"regexp\">//</span>分别返回<span class=\"number\">2013</span>.   <span class=\"number\">6</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">alert( str );   <span class=\"regexp\">//</span><span class=\"number\">2013.6</span>.<span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<p>找重复项最多的字符个数</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> split():字符串中的方法，把字符串转成数组。</span><br><span class=\"line\"><span class=\"regexp\">//</span> sort():数组中的排序方法，按照ACALL码进行排序。</span><br><span class=\"line\"><span class=\"regexp\">//</span> join():数组中的方法，把数组转换为字符串</span><br><span class=\"line\"></span><br><span class=\"line\">var str = <span class=\"string\">&#x27;assssjdssskssalsssdkjsssdss&#x27;</span>;</span><br><span class=\"line\">var arr = str.split(<span class=\"string\">&#x27;&#x27;</span>); <span class=\"regexp\">//</span>把字符串转换为数组</span><br><span class=\"line\">str = arr.sort().join(<span class=\"string\">&#x27;&#x27;</span>); <span class=\"regexp\">//</span>首先进行排序，这样结果会把相同的字符放在一起，然后再转换为字符串</span><br><span class=\"line\"><span class=\"regexp\">//</span>alert(str);  <span class=\"regexp\">//</span> aaddjjkklsssssssssssssssss</span><br><span class=\"line\"></span><br><span class=\"line\">var value = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">var index = <span class=\"number\">0</span>;</span><br><span class=\"line\">var re = <span class=\"regexp\">/(\\w)\\1+/g</span>;  <span class=\"regexp\">//</span>匹配字符，且重复这个字符，重复次数至少一次。</span><br><span class=\"line\">str.replace(re,<span class=\"keyword\">function</span>(<span class=\"variable\">$0</span>,<span class=\"variable\">$1</span>)&#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span>alert(<span class=\"variable\">$0</span>);   代表每次匹配成功的结果 : aa dd jj kk l sssssssssssssssss</span><br><span class=\"line\">  <span class=\"regexp\">//</span>alert(<span class=\"variable\">$1</span>);  代表每次匹配成功的第一个子项，也就是\\w:  a d j k l S</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(index&lt;<span class=\"variable\">$0</span>.length)&#123;  <span class=\"regexp\">//</span>如果index保存的值小于<span class=\"variable\">$0</span>的长度就进行下面的操作</span><br><span class=\"line\">    index = <span class=\"variable\">$0</span>.length;  <span class=\"regexp\">//</span> 这样index一直保存的就在最大的长度</span><br><span class=\"line\">    value = <span class=\"variable\">$1</span>;  <span class=\"regexp\">//</span>value保存的是出现最多的这个字符</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(<span class=\"string\">&#x27;最多的字符:&#x27;</span>+value+<span class=\"string\">&#x27;,重复的次数:&#x27;</span>+index);  <span class=\"regexp\">//</span> s   <span class=\"number\">17</span></span><br></pre></td></tr></table></figure>\n\n<p>查找字符串’abc’在字符串’abbbbccbebababccbaabcbccbaabbccabcc’第一次出现的位置</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;abbbbccbebababccbaabcbccbaabbccabcc&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">regex</span>(<span class=\"params\">str1,str2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(str1,<span class=\"string\">&quot;g&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str2.search(regex));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">regex(str,<span class=\"built_in\">string</span>)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数字相关的正则表达式\"><a href=\"#数字相关的正则表达式\" class=\"headerlink\" title=\"数字相关的正则表达式\"></a>数字相关的正则表达式</h2><figure class=\"highlight subunit\"><table><tr><td class=\"code\"><pre><span class=\"line\">去空格： /^\\s+|\\s+$/g</span><br><span class=\"line\">数字： ^[0<span class=\"string\">-9</span>]*$</span><br><span class=\"line\">n位定长的数字： ^\\d&#123;n&#125;$</span><br><span class=\"line\">m-n位之间的数字： ^\\d&#123;m,n&#125;$</span><br><span class=\"line\">零和非零开头的数字： ^(0|[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)$</span><br><span class=\"line\">非零开头的最多带两位小数的数字： ^([1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)+(.[0<span class=\"string\">-9</span>]&#123;1,2&#125;)?$</span><br><span class=\"line\">带1<span class=\"string\">-2</span>位小数的正数或负数： ^(\\-)?\\d+(\\.\\d&#123;1,2&#125;)?$</span><br><span class=\"line\">正数、负数、和小数： ^(\\-|\\+)?\\d+(\\.\\d+)?$</span><br><span class=\"line\">有两位小数的正实数： ^[0<span class=\"string\">-9</span>]+(.[0<span class=\"string\">-9</span>]&#123;2&#125;)?$</span><br><span class=\"line\">有1~3位小数的正实数： ^[0<span class=\"string\">-9</span>]+(.[0<span class=\"string\">-9</span>]&#123;1,3&#125;)?$</span><br><span class=\"line\">正整数： ^\\d+$ 或 ^[1<span class=\"string\">-9</span>]\\d*|0$</span><br><span class=\"line\">负整数： ^-[1<span class=\"string\">-9</span>]\\d*|0$ 或 ^((-\\d+)|(0+))$</span><br><span class=\"line\">正浮点数： </span><br><span class=\"line\">^[1<span class=\"string\">-9</span>]\\d*\\.\\d*|0\\.\\d*[1<span class=\"string\">-9</span>]\\d*$ </span><br><span class=\"line\">^(([0<span class=\"string\">-9</span>]+\\.[0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*\\.[0<span class=\"string\">-9</span>]+)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*))$</span><br><span class=\"line\">负浮点数： </span><br><span class=\"line\">^-([1<span class=\"string\">-9</span>]\\d*\\.\\d*|0\\.\\d*[1<span class=\"string\">-9</span>]\\d*)$</span><br><span class=\"line\"> ^(-(([0<span class=\"string\">-9</span>]+\\.[0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*\\.[0<span class=\"string\">-9</span>]+)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)))$</span><br><span class=\"line\">浮点数： ^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1<span class=\"string\">-9</span>]\\d*\\.\\d*|0\\.\\d*[1<span class=\"string\">-9</span>]\\d*|0?\\.0+|0)$</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符相关的正则表达式\"><a href=\"#字符相关的正则表达式\" class=\"headerlink\" title=\"字符相关的正则表达式\"></a>字符相关的正则表达式</h2><figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">汉字： ^<span class=\"selector-attr\">[\\u4e00-\\u9fa5]</span>&#123;<span class=\"number\">0</span>,&#125;$</span><br><span class=\"line\">长度为<span class=\"number\">3</span>-<span class=\"number\">20</span>的所有字符： ^.&#123;<span class=\"number\">3</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\">由数字和<span class=\"number\">26</span>个英文字母组成的字符串： ^<span class=\"selector-attr\">[A-Za-z0-9]</span>+$</span><br><span class=\"line\">由数字、<span class=\"number\">26</span>个英文字母或者下划线组成的字符串： ^\\w+$ 或 ^\\w&#123;<span class=\"number\">3</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\">中文、英文、数字包括下划线： ^<span class=\"selector-attr\">[\\u4E00-\\u9FA5A-Za-z0-9_]</span>+$</span><br><span class=\"line\">中文、英文、数字但不包括下划线等符号： </span><br><span class=\"line\">^<span class=\"selector-attr\">[\\u4E00-\\u9FA5A-Za-z0-9]</span>+$ </span><br><span class=\"line\"> ^<span class=\"selector-attr\">[\\u4E00-\\u9FA5A-Za-z0-9]</span>&#123;<span class=\"number\">2</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\">帐号是否合法(字母开头，允许<span class=\"number\">5</span>-<span class=\"number\">16</span>字节，允许字母数字下划线)： </span><br><span class=\"line\">^<span class=\"selector-attr\">[a-zA-Z]</span><span class=\"selector-attr\">[a-zA-Z0-9_]</span>&#123;<span class=\"number\">4</span>,<span class=\"number\">15</span>&#125;$</span><br><span class=\"line\">密码(以字母开头，长度在<span class=\"number\">6</span>~<span class=\"number\">18</span>之间，只能包含字母、数字和下划线)： </span><br><span class=\"line\">^<span class=\"selector-attr\">[a-zA-Z]</span>\\w&#123;<span class=\"number\">5</span>,<span class=\"number\">17</span>&#125;$</span><br><span class=\"line\">强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在<span class=\"number\">8</span>-<span class=\"number\">10</span>之间)：</span><br><span class=\"line\"> ^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;<span class=\"number\">8</span>,<span class=\"number\">10</span>&#125;$</span><br></pre></td></tr></table></figure>\n<h2 id=\"固定格式约定俗成的正则表达式\"><a href=\"#固定格式约定俗成的正则表达式\" class=\"headerlink\" title=\"固定格式约定俗成的正则表达式\"></a>固定格式约定俗成的正则表达式</h2><figure class=\"highlight gherkin\"><table><tr><td class=\"code\"><pre><span class=\"line\">Email地址： ^\\w+([-+.]\\w+)<span class=\"symbol\">*</span><span class=\"meta\">@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$</span></span><br><span class=\"line\">网站域名： [a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span><br><span class=\"line\">URL网址： ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]<span class=\"symbol\">*</span>)?$</span><br><span class=\"line\">手机号码： </span><br><span class=\"line\">^(13[0-9]|<span class=\"string\">17[0-9]</span>|<span class=\"string\">14[5</span>|<span class=\"string\">7]</span>|<span class=\"string\">15[0</span>|<span class=\"string\">1</span>|<span class=\"string\">2</span>|<span class=\"string\">3</span>|<span class=\"string\">5</span>|<span class=\"string\">6</span>|<span class=\"string\">7</span>|<span class=\"string\">8</span>|<span class=\"string\">9]</span>|<span class=\"string\">18[0</span>|<span class=\"string\">1</span>|<span class=\"string\">2</span>|<span class=\"string\">3</span>|<span class=\"string\">5</span>|<span class=\"string\">6</span>|<span class=\"string\">7</span>|<span class=\"string\">8</span>|<span class=\"string\">9])\\d&#123;8&#125;$</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、</span></span><br><span class=\"line\"><span class=\"string\">”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)： </span></span><br><span class=\"line\"><span class=\"string\">^(\\(\\d&#123;3,4&#125;-)</span>|<span class=\"string\">\\d&#123;3.4&#125;-)?\\d&#123;7,8&#125;$</span></span><br><span class=\"line\"><span class=\"string\">国内电话号码(0511-4405222、021-87888822)： \\d&#123;3&#125;-\\d&#123;8&#125;</span>|<span class=\"string\">\\d&#123;4&#125;-\\d&#123;7&#125;</span></span><br><span class=\"line\"><span class=\"string\">身份证号(15位、18位数字)： ^\\d&#123;15&#125;</span>|<span class=\"string\">\\d&#123;18&#125;$</span></span><br><span class=\"line\"><span class=\"string\">日期格式： ^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;</span></span><br><span class=\"line\"><span class=\"string\">一年的12个月(01～09和1～12)： ^(0?[1-9]</span>|<span class=\"string\">1[0-2])$</span></span><br><span class=\"line\"><span class=\"string\">一个月的31天(01～09和1～31)： ^((0?[1-9])</span>|<span class=\"string\">((1</span>|<span class=\"string\">2)[0-9])</span>|<span class=\"string\">30</span>|<span class=\"string\">31)$</span></span><br><span class=\"line\"><span class=\"string\">腾讯QQ号： [1-9][0-9]&#123;4,8&#125; (腾讯QQ号从10000开始，目前最长为10位)</span></span><br><span class=\"line\"><span class=\"string\">中国邮政编码： [1-9]\\d&#123;5&#125;(?!\\d) (中国邮政编码为6位数字)</span></span><br><span class=\"line\"><span class=\"string\">IP地址： \\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用)</span></span><br><span class=\"line\"><span class=\"string\">IP地址： ((?:(?:25[0-5]</span>|<span class=\"string\">2[0-4]\\\\d</span>|<span class=\"string\">[01]?\\\\d?\\\\d)\\\\.)&#123;3&#125;(?:25[0-5]</span>|<span class=\"string\">2[0-4]\\\\d</span>|<span class=\"string\">[01]?\\\\d?\\\\d))</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"常用的方法\"><a href=\"#常用的方法\" class=\"headerlink\" title=\"常用的方法\"></a>常用的方法</h2><h3 id=\"1-test\"><a href=\"#1-test\" class=\"headerlink\" title=\"1.test()\"></a>1.test()</h3><h4 id=\"在字符串中查找符合正则的内容，若查找到返回true-反之返回false\"><a href=\"#在字符串中查找符合正则的内容，若查找到返回true-反之返回false\" class=\"headerlink\" title=\"在字符串中查找符合正则的内容，若查找到返回true,反之返回false.\"></a>在字符串中查找符合正则的内容，若查找到返回true,反之返回false.</h4><figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;374829348791&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/\\D/</span>; <span class=\"comment\">//  \\D代表非数字</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (re.test(str)) &#123; <span class=\"comment\">// 返回true,代表在字符串中找到了非数字。</span></span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;不全是数字&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;全是数字&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-search\"><a href=\"#2-search\" class=\"headerlink\" title=\"2.search()\"></a>2.search()</h3><h4 id=\"在字符串搜索符合正则的内容，搜索到就返回出现的位置\"><a href=\"#在字符串搜索符合正则的内容，搜索到就返回出现的位置\" class=\"headerlink\" title=\"在字符串搜索符合正则的内容，搜索到就返回出现的位置\"></a>在字符串搜索符合正则的内容，搜索到就返回出现的位置</h4><h4 id=\"（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置），-如果搜索失败就返回-1\"><a href=\"#（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置），-如果搜索失败就返回-1\" class=\"headerlink\" title=\"（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1\"></a>（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1</h4><figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;abbbbccbebababccbaabcbccbaabbccabcc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">regex</span>(<span class=\"params\">str1, str2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(str1, <span class=\"string\">&quot;g&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str2.search(regex));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">regex(str, <span class=\"built_in\">string</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-match\"><a href=\"#3-match\" class=\"headerlink\" title=\"3.match()\"></a>3.match()</h3><h4 id=\"在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\"><a href=\"#在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\" class=\"headerlink\" title=\"在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\"></a>在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。</h4><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">var</span> str = &#x27;haj123sdk54hask33dkhalsd879&#x27;;</span><br><span class=\"line\"><span class=\"attribute\">var</span> re = /\\d+/g; // 每次匹配至少一个数字  且全局匹配  如果不是全局匹配，当找到数字<span class=\"number\">123</span>，它就会停止了。就只会弹出<span class=\"number\">123</span>.加上全局匹配，就会从开始到结束一直去搜索符合规则的。如果没有加号，匹配的结果就是<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>，<span class=\"number\">5</span>，<span class=\"number\">4</span>，<span class=\"number\">3</span>，<span class=\"number\">3</span>，<span class=\"number\">879</span>并不是我们想要的，有了加号，每次匹配的数字就是至少一个了。</span><br><span class=\"line\"><span class=\"attribute\">alert</span>(str.match(re)); //<span class=\"meta\"> [123，54，33，879]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace()\"></a>replace()</h3><h4 id=\"查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。\"><a href=\"#查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。\" class=\"headerlink\" title=\"查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。\"></a>查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。</h4><figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;我爱北京天安门，天安门上太阳升。&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/北京|天安门/g</span>;  <span class=\"comment\">//  找到北京 或者天安门 全局匹配</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = str.<span class=\"built_in\">replace</span>(re,<span class=\"string\">&#x27;*&#x27;</span>); </span><br><span class=\"line\">alert(str2)  <span class=\"comment\">//我爱**，*上太阳升 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这种只是把找到的变成了一个*，并不能几个字就对应几个*。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;我爱北京天安门，天安门上太阳升。&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/北京|天安门/g</span>;  <span class=\"comment\">//  找到北京 或者天安门 全局匹配</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = str.<span class=\"built_in\">replace</span>(re,<span class=\"keyword\">function</span>(<span class=\"params\">str</span>)&#123;</span><br><span class=\"line\">              alert(str); <span class=\"comment\">//用来测试：函数的第一个参数代表每次搜索到的符合正则的字符，所以第一次str指的是北京 第二次str是天安门 第三次str是天安门</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;str.<span class=\"built_in\">length</span>;i++)&#123;</span><br><span class=\"line\">                result += <span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\">            &#125;              </span><br><span class=\"line\">            <span class=\"keyword\">return</span> result; <span class=\"comment\">//所以搜索到了几个字就返回几个* </span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">alert(str2)  <span class=\"comment\">//我爱*****，***上太阳升         </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//整个过程就是，找到北京，替换成了两个*，找到天安门替换成了3个*，找到天安门替换成3个*。</span></span><br></pre></td></tr></table></figure>\n<p>把2013-6-7替换成2013.6.7</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>整个过程就是利用子项把<span class=\"number\">2013</span>- <span class=\"number\">6</span>- 分别替换成了<span class=\"number\">2013</span>. <span class=\"number\">6</span>.  最终弹出<span class=\"number\">2013.6</span>.<span class=\"number\">7</span></span><br><span class=\"line\">var str = <span class=\"string\">&#x27;2013-6-7&#x27;</span>;</span><br><span class=\"line\">var re = <span class=\"regexp\">/(\\d+)(-)/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">str = str.replace(re,<span class=\"keyword\">function</span>(<span class=\"variable\">$0</span>,<span class=\"variable\">$1</span>,<span class=\"variable\">$2</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"regexp\">//</span>replace()中如果有子项，</span><br><span class=\"line\">      <span class=\"regexp\">//</span>第一个参数：<span class=\"variable\">$0</span>（匹配成功后的整体结果  <span class=\"number\">2013</span>-  <span class=\"number\">6</span>-）,</span><br><span class=\"line\">      <span class=\"regexp\">//</span> 第二个参数 : <span class=\"variable\">$1</span>(匹配成功的第一个分组，这里指的是\\d   <span class=\"number\">2013</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">      <span class=\"regexp\">//</span>第三个参数 : <span class=\"variable\">$1</span>(匹配成功的第二个分组，这里指的是-    - - )   </span><br><span class=\"line\">    return <span class=\"variable\">$1</span> + <span class=\"string\">&#x27;.&#x27;</span>;  <span class=\"regexp\">//</span>分别返回<span class=\"number\">2013</span>.   <span class=\"number\">6</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">alert( str );   <span class=\"regexp\">//</span><span class=\"number\">2013.6</span>.<span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<p>找重复项最多的字符个数</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> split():字符串中的方法，把字符串转成数组。</span><br><span class=\"line\"><span class=\"regexp\">//</span> sort():数组中的排序方法，按照ACALL码进行排序。</span><br><span class=\"line\"><span class=\"regexp\">//</span> join():数组中的方法，把数组转换为字符串</span><br><span class=\"line\"></span><br><span class=\"line\">var str = <span class=\"string\">&#x27;assssjdssskssalsssdkjsssdss&#x27;</span>;</span><br><span class=\"line\">var arr = str.split(<span class=\"string\">&#x27;&#x27;</span>); <span class=\"regexp\">//</span>把字符串转换为数组</span><br><span class=\"line\">str = arr.sort().join(<span class=\"string\">&#x27;&#x27;</span>); <span class=\"regexp\">//</span>首先进行排序，这样结果会把相同的字符放在一起，然后再转换为字符串</span><br><span class=\"line\"><span class=\"regexp\">//</span>alert(str);  <span class=\"regexp\">//</span> aaddjjkklsssssssssssssssss</span><br><span class=\"line\"></span><br><span class=\"line\">var value = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">var index = <span class=\"number\">0</span>;</span><br><span class=\"line\">var re = <span class=\"regexp\">/(\\w)\\1+/g</span>;  <span class=\"regexp\">//</span>匹配字符，且重复这个字符，重复次数至少一次。</span><br><span class=\"line\">str.replace(re,<span class=\"keyword\">function</span>(<span class=\"variable\">$0</span>,<span class=\"variable\">$1</span>)&#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span>alert(<span class=\"variable\">$0</span>);   代表每次匹配成功的结果 : aa dd jj kk l sssssssssssssssss</span><br><span class=\"line\">  <span class=\"regexp\">//</span>alert(<span class=\"variable\">$1</span>);  代表每次匹配成功的第一个子项，也就是\\w:  a d j k l S</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(index&lt;<span class=\"variable\">$0</span>.length)&#123;  <span class=\"regexp\">//</span>如果index保存的值小于<span class=\"variable\">$0</span>的长度就进行下面的操作</span><br><span class=\"line\">    index = <span class=\"variable\">$0</span>.length;  <span class=\"regexp\">//</span> 这样index一直保存的就在最大的长度</span><br><span class=\"line\">    value = <span class=\"variable\">$1</span>;  <span class=\"regexp\">//</span>value保存的是出现最多的这个字符</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(<span class=\"string\">&#x27;最多的字符:&#x27;</span>+value+<span class=\"string\">&#x27;,重复的次数:&#x27;</span>+index);  <span class=\"regexp\">//</span> s   <span class=\"number\">17</span></span><br></pre></td></tr></table></figure>\n\n<p>查找字符串’abc’在字符串’abbbbccbebababccbaabcbccbaabbccabcc’第一次出现的位置</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;abbbbccbebababccbaabcbccbaabbccabcc&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">regex</span>(<span class=\"params\">str1,str2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(str1,<span class=\"string\">&quot;g&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str2.search(regex));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">regex(str,<span class=\"built_in\">string</span>)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"《追风筝的人》| 直面不完美的自己","date":"2022-04-04T13:18:16.000Z","_content":"![./%E8%BF%BD%E9%A3%8E%E7%AD%9D%E7%9A%84%E4%BA%BA](%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220404144512.jpg)\n    因为最近的深圳疫情，无聊的我再次阅读这本书。\n\n    第一次读《追风筝的人》还是在高二的时候:那时读觉得原来天底下还有如此纯粹的友谊  \n    内容简介 :  \n    主要讲述了一个富家少爷「阿米尔」和玩伴「哈桑」的故事。哈桑是阿米尔父亲的仆人「阿里」的儿子。阿米尔从小喜欢写作，身体单薄,胆怯怕事，而哈桑勇敢无畏。阿米尔的父亲更加偏爱哈桑，一直让阿米尔心生嫉妒。  \n\n    一次风筝大赛中，阿米尔被几个流氓欺负，哈桑救了他，而阿米尔得了冠军。但是哈桑被那几个流氓给欺凌了，阿米尔因为懦弱没有勇气去救他②阿富汗内战后，阿米尔一家去了美国，多年后父亲去世，父亲的挚友告诉了阿米尔一个秘密,因为种种原因一直不能和阿米尔说，原来哈桑也是父亲的儿子。  \n\n    再后来，阿富汗的tlb组织把哈桑和他的妻子杀害，最后就剩下了唯一的儿子「索拉博」。阿米尔想赎罪，就想着回国收养他，但是被对方头目抓走了，阿米尔历经千辛万苦终于和索拉博逃出来了。  \n\n    由于带着索拉博去美国有限制，中途遇到很多困难，导致索拉博还自杀过一-次，幸好最终得救，还是回到了美国，但是阿米尔始终没有打开索拉博的心扉。  \n\n    最终有一次放风筝中，阿米尔带着索拉博把其.他风筝都割断，只剩一筝在天，阿米尔对索拉博 说:要我追回那只风筝吗?索拉博微笑，阿米尔被救赎了。  \n\n    果然人在不同阶段，悟出来的东西是不一样的十年后再读却有不一样的感悟:  \n\n    “为你，千千万万遍！”我相信很多书友都或多或少听过这句话，可是你知道吗？这句话涵盖了一个少年多少的温柔，包容与勇敢。如果哈桑没有被侵犯，阿米尔没有背叛哈桑。那阿米尔还会去救哈桑儿子吗？大概不会吧，阿米尔救哈桑儿子是为了救赎自己吧。但是反过来哈桑一定会去救阿米尔孩子。  \n\n    直面自己的不足和人性中的懦弱，没有任何人能救得了你，唯有自己强大起来才行。  ","source":"_posts/2022/04/追风筝的人.md","raw":"---\ntitle: 《追风筝的人》| 直面不完美的自己\ncategories: 书籍\ndate: 2022-04-04 21:18:16\ntags:  \n      - 书籍读后感\n---\n![./%E8%BF%BD%E9%A3%8E%E7%AD%9D%E7%9A%84%E4%BA%BA](%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220404144512.jpg)\n    因为最近的深圳疫情，无聊的我再次阅读这本书。\n\n    第一次读《追风筝的人》还是在高二的时候:那时读觉得原来天底下还有如此纯粹的友谊  \n    内容简介 :  \n    主要讲述了一个富家少爷「阿米尔」和玩伴「哈桑」的故事。哈桑是阿米尔父亲的仆人「阿里」的儿子。阿米尔从小喜欢写作，身体单薄,胆怯怕事，而哈桑勇敢无畏。阿米尔的父亲更加偏爱哈桑，一直让阿米尔心生嫉妒。  \n\n    一次风筝大赛中，阿米尔被几个流氓欺负，哈桑救了他，而阿米尔得了冠军。但是哈桑被那几个流氓给欺凌了，阿米尔因为懦弱没有勇气去救他②阿富汗内战后，阿米尔一家去了美国，多年后父亲去世，父亲的挚友告诉了阿米尔一个秘密,因为种种原因一直不能和阿米尔说，原来哈桑也是父亲的儿子。  \n\n    再后来，阿富汗的tlb组织把哈桑和他的妻子杀害，最后就剩下了唯一的儿子「索拉博」。阿米尔想赎罪，就想着回国收养他，但是被对方头目抓走了，阿米尔历经千辛万苦终于和索拉博逃出来了。  \n\n    由于带着索拉博去美国有限制，中途遇到很多困难，导致索拉博还自杀过一-次，幸好最终得救，还是回到了美国，但是阿米尔始终没有打开索拉博的心扉。  \n\n    最终有一次放风筝中，阿米尔带着索拉博把其.他风筝都割断，只剩一筝在天，阿米尔对索拉博 说:要我追回那只风筝吗?索拉博微笑，阿米尔被救赎了。  \n\n    果然人在不同阶段，悟出来的东西是不一样的十年后再读却有不一样的感悟:  \n\n    “为你，千千万万遍！”我相信很多书友都或多或少听过这句话，可是你知道吗？这句话涵盖了一个少年多少的温柔，包容与勇敢。如果哈桑没有被侵犯，阿米尔没有背叛哈桑。那阿米尔还会去救哈桑儿子吗？大概不会吧，阿米尔救哈桑儿子是为了救赎自己吧。但是反过来哈桑一定会去救阿米尔孩子。  \n\n    直面自己的不足和人性中的懦弱，没有任何人能救得了你，唯有自己强大起来才行。  ","slug":"追风筝的人","published":1,"updated":"2022-04-04T12:42:47.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb35d004qn4vohzzkfuvj","content":"<p><img src=\"%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220404144512.jpg\" alt=\"./%E8%BF%BD%E9%A3%8E%E7%AD%9D%E7%9A%84%E4%BA%BA\"><br>    因为最近的深圳疫情，无聊的我再次阅读这本书。</p>\n<pre><code>第一次读《追风筝的人》还是在高二的时候:那时读觉得原来天底下还有如此纯粹的友谊  \n内容简介 :  \n主要讲述了一个富家少爷「阿米尔」和玩伴「哈桑」的故事。哈桑是阿米尔父亲的仆人「阿里」的儿子。阿米尔从小喜欢写作，身体单薄,胆怯怕事，而哈桑勇敢无畏。阿米尔的父亲更加偏爱哈桑，一直让阿米尔心生嫉妒。  \n\n一次风筝大赛中，阿米尔被几个流氓欺负，哈桑救了他，而阿米尔得了冠军。但是哈桑被那几个流氓给欺凌了，阿米尔因为懦弱没有勇气去救他②阿富汗内战后，阿米尔一家去了美国，多年后父亲去世，父亲的挚友告诉了阿米尔一个秘密,因为种种原因一直不能和阿米尔说，原来哈桑也是父亲的儿子。  \n\n再后来，阿富汗的tlb组织把哈桑和他的妻子杀害，最后就剩下了唯一的儿子「索拉博」。阿米尔想赎罪，就想着回国收养他，但是被对方头目抓走了，阿米尔历经千辛万苦终于和索拉博逃出来了。  \n\n由于带着索拉博去美国有限制，中途遇到很多困难，导致索拉博还自杀过一-次，幸好最终得救，还是回到了美国，但是阿米尔始终没有打开索拉博的心扉。  \n\n最终有一次放风筝中，阿米尔带着索拉博把其.他风筝都割断，只剩一筝在天，阿米尔对索拉博 说:要我追回那只风筝吗?索拉博微笑，阿米尔被救赎了。  \n\n果然人在不同阶段，悟出来的东西是不一样的十年后再读却有不一样的感悟:  \n\n“为你，千千万万遍！”我相信很多书友都或多或少听过这句话，可是你知道吗？这句话涵盖了一个少年多少的温柔，包容与勇敢。如果哈桑没有被侵犯，阿米尔没有背叛哈桑。那阿米尔还会去救哈桑儿子吗？大概不会吧，阿米尔救哈桑儿子是为了救赎自己吧。但是反过来哈桑一定会去救阿米尔孩子。  \n\n直面自己的不足和人性中的懦弱，没有任何人能救得了你，唯有自己强大起来才行。  \n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220404144512.jpg\" alt=\"./%E8%BF%BD%E9%A3%8E%E7%AD%9D%E7%9A%84%E4%BA%BA\"><br>    因为最近的深圳疫情，无聊的我再次阅读这本书。</p>\n<pre><code>第一次读《追风筝的人》还是在高二的时候:那时读觉得原来天底下还有如此纯粹的友谊  \n内容简介 :  \n主要讲述了一个富家少爷「阿米尔」和玩伴「哈桑」的故事。哈桑是阿米尔父亲的仆人「阿里」的儿子。阿米尔从小喜欢写作，身体单薄,胆怯怕事，而哈桑勇敢无畏。阿米尔的父亲更加偏爱哈桑，一直让阿米尔心生嫉妒。  \n\n一次风筝大赛中，阿米尔被几个流氓欺负，哈桑救了他，而阿米尔得了冠军。但是哈桑被那几个流氓给欺凌了，阿米尔因为懦弱没有勇气去救他②阿富汗内战后，阿米尔一家去了美国，多年后父亲去世，父亲的挚友告诉了阿米尔一个秘密,因为种种原因一直不能和阿米尔说，原来哈桑也是父亲的儿子。  \n\n再后来，阿富汗的tlb组织把哈桑和他的妻子杀害，最后就剩下了唯一的儿子「索拉博」。阿米尔想赎罪，就想着回国收养他，但是被对方头目抓走了，阿米尔历经千辛万苦终于和索拉博逃出来了。  \n\n由于带着索拉博去美国有限制，中途遇到很多困难，导致索拉博还自杀过一-次，幸好最终得救，还是回到了美国，但是阿米尔始终没有打开索拉博的心扉。  \n\n最终有一次放风筝中，阿米尔带着索拉博把其.他风筝都割断，只剩一筝在天，阿米尔对索拉博 说:要我追回那只风筝吗?索拉博微笑，阿米尔被救赎了。  \n\n果然人在不同阶段，悟出来的东西是不一样的十年后再读却有不一样的感悟:  \n\n“为你，千千万万遍！”我相信很多书友都或多或少听过这句话，可是你知道吗？这句话涵盖了一个少年多少的温柔，包容与勇敢。如果哈桑没有被侵犯，阿米尔没有背叛哈桑。那阿米尔还会去救哈桑儿子吗？大概不会吧，阿米尔救哈桑儿子是为了救赎自己吧。但是反过来哈桑一定会去救阿米尔孩子。  \n\n直面自己的不足和人性中的懦弱，没有任何人能救得了你，唯有自己强大起来才行。  \n</code></pre>\n"},{"title":"防抖和节流","date":"2022-04-05T08:47:18.000Z","_content":"### 什么是防抖\n高频率触发的事件,在指定的单位时间内，只响应最后一次，如果在指定的时间在触发，则重新计算时间(后面触发的事件执行，替代了前面的事件)\n\n```\n//简单写法\nfunction debounce(func, wait) {\n    let timeout;\n    return function () {\n        {\n            clearTimeout(timeout);\n            timeout = setTimeout(func, wait)\n        }\n    }\n}\n\n//复杂写法\nfunction debounce(fn,time) {\n      let timeout = null; // 创建一个标记用来存放定时器的返回值\n      return function () {\n        clearTimeout(timeout); // 每当用户输入的时候把前一个 setTimeout clear 掉\n        timeout = setTimeout(() => { // 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数\n          fn.apply(this, arguments);//arguments是传入的参数\n        }, time);\n      };\n    }\n    function sayHi() {\n      console.log('防抖成功');\n    }\n\n    var inp = document.getElementById('inp');\n    inp.addEventListener('input', debounce(sayHi,5000)); // 防抖\n\n```\n\n### 什么是节流\n高频率触发的事件,在指定的单位时间内，只响应第一次(前面触发的执行前，忽略后面的事件)\n```\n//简单写法\nfunction throttle(func, wait) {\n    let timeout;\n    let startTime = Date.now();\n    return function () {\n        clearTimeout(timeout)\n        let curTime = Date.now();\n        if (curTime - startTime <= wait) {\n            timeout = setTimeout(func, wait)\n        } else {\n            startTime = curTime;\n            func()\n        }\n    }\n}\n\n//复杂写法\nfunction throttle(fn，time) {\n      let canRun = true; // 通过闭包保存一个标记\n      return function () {\n        if (!canRun) return; // 在函数开头判断标记是否为true，不为true则return\n        canRun = false; // 立即设置为false\n        setTimeout(() => { // 将外部传入的函数的执行放在setTimeout中\n          fn.apply(this, arguments);\n          // 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了。当定时器没有执行的时候标记永远是false，在开头被return掉\n          canRun = true;\n        }, time);\n      };\n    }\n    function sayHi(e) {\n      console.log(e.target.innerWidth, e.target.innerHeight);\n    }\n    window.addEventListener('resize', throttle(sayHi,500));\n\n```\n\n### 防抖和节流的使用场景\n\n防抖（debounce）  \n1.search搜索联想，用户在不断输入值时，用防抖来节约请求资源。  \n2.window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次\n\n节流（throttle）  \n1.鼠标不断点击触发，mousedown(单位时间内只触发一次)  \n2.监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断\n","source":"_posts/2022/04/防抖和节流.md","raw":"---\ntitle: 防抖和节流\ndate: 2022-04-05 16:47:18\ncategories: JavaScript\ntags:\n     - JavaScript\n---\n### 什么是防抖\n高频率触发的事件,在指定的单位时间内，只响应最后一次，如果在指定的时间在触发，则重新计算时间(后面触发的事件执行，替代了前面的事件)\n\n```\n//简单写法\nfunction debounce(func, wait) {\n    let timeout;\n    return function () {\n        {\n            clearTimeout(timeout);\n            timeout = setTimeout(func, wait)\n        }\n    }\n}\n\n//复杂写法\nfunction debounce(fn,time) {\n      let timeout = null; // 创建一个标记用来存放定时器的返回值\n      return function () {\n        clearTimeout(timeout); // 每当用户输入的时候把前一个 setTimeout clear 掉\n        timeout = setTimeout(() => { // 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数\n          fn.apply(this, arguments);//arguments是传入的参数\n        }, time);\n      };\n    }\n    function sayHi() {\n      console.log('防抖成功');\n    }\n\n    var inp = document.getElementById('inp');\n    inp.addEventListener('input', debounce(sayHi,5000)); // 防抖\n\n```\n\n### 什么是节流\n高频率触发的事件,在指定的单位时间内，只响应第一次(前面触发的执行前，忽略后面的事件)\n```\n//简单写法\nfunction throttle(func, wait) {\n    let timeout;\n    let startTime = Date.now();\n    return function () {\n        clearTimeout(timeout)\n        let curTime = Date.now();\n        if (curTime - startTime <= wait) {\n            timeout = setTimeout(func, wait)\n        } else {\n            startTime = curTime;\n            func()\n        }\n    }\n}\n\n//复杂写法\nfunction throttle(fn，time) {\n      let canRun = true; // 通过闭包保存一个标记\n      return function () {\n        if (!canRun) return; // 在函数开头判断标记是否为true，不为true则return\n        canRun = false; // 立即设置为false\n        setTimeout(() => { // 将外部传入的函数的执行放在setTimeout中\n          fn.apply(this, arguments);\n          // 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了。当定时器没有执行的时候标记永远是false，在开头被return掉\n          canRun = true;\n        }, time);\n      };\n    }\n    function sayHi(e) {\n      console.log(e.target.innerWidth, e.target.innerHeight);\n    }\n    window.addEventListener('resize', throttle(sayHi,500));\n\n```\n\n### 防抖和节流的使用场景\n\n防抖（debounce）  \n1.search搜索联想，用户在不断输入值时，用防抖来节约请求资源。  \n2.window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次\n\n节流（throttle）  \n1.鼠标不断点击触发，mousedown(单位时间内只触发一次)  \n2.监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断\n","slug":"防抖和节流","published":1,"updated":"2022-04-05T09:04:59.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1lyb35e004sn4voe4j62dt7","content":"<h3 id=\"什么是防抖\"><a href=\"#什么是防抖\" class=\"headerlink\" title=\"什么是防抖\"></a>什么是防抖</h3><p>高频率触发的事件,在指定的单位时间内，只响应最后一次，如果在指定的时间在触发，则重新计算时间(后面触发的事件执行，替代了前面的事件)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//简单写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">func, wait</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">            timeout = <span class=\"built_in\">setTimeout</span>(func, wait)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//复杂写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn,time</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>; <span class=\"comment\">// 创建一个标记用来存放定时器的返回值</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timeout); <span class=\"comment\">// 每当用户输入的时候把前一个 setTimeout clear 掉</span></span><br><span class=\"line\">        timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">// 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数</span></span><br><span class=\"line\">          fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);<span class=\"comment\">//arguments是传入的参数</span></span><br><span class=\"line\">        &#125;, time);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;防抖成功&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> inp = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;inp&#x27;</span>);</span><br><span class=\"line\">    inp.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;input&#x27;</span>, <span class=\"title function_\">debounce</span>(sayHi,<span class=\"number\">5000</span>)); <span class=\"comment\">// 防抖</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"什么是节流\"><a href=\"#什么是节流\" class=\"headerlink\" title=\"什么是节流\"></a>什么是节流</h3><p>高频率触发的事件,在指定的单位时间内，只响应第一次(前面触发的执行前，忽略后面的事件)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//简单写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">func, wait</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> startTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timeout)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curTime - startTime &lt;= wait) &#123;</span><br><span class=\"line\">            timeout = <span class=\"built_in\">setTimeout</span>(func, wait)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            startTime = curTime;</span><br><span class=\"line\">            <span class=\"title function_\">func</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//复杂写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fn，time</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> canRun = <span class=\"literal\">true</span>; <span class=\"comment\">// 通过闭包保存一个标记</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!canRun) <span class=\"keyword\">return</span>; <span class=\"comment\">// 在函数开头判断标记是否为true，不为true则return</span></span><br><span class=\"line\">        canRun = <span class=\"literal\">false</span>; <span class=\"comment\">// 立即设置为false</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">// 将外部传入的函数的执行放在setTimeout中</span></span><br><span class=\"line\">          fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">          <span class=\"comment\">// 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了。当定时器没有执行的时候标记永远是false，在开头被return掉</span></span><br><span class=\"line\">          canRun = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;, time);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">target</span>.<span class=\"property\">innerWidth</span>, e.<span class=\"property\">target</span>.<span class=\"property\">innerHeight</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"title function_\">throttle</span>(sayHi,<span class=\"number\">500</span>));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"防抖和节流的使用场景\"><a href=\"#防抖和节流的使用场景\" class=\"headerlink\" title=\"防抖和节流的使用场景\"></a>防抖和节流的使用场景</h3><p>防抖（debounce）<br>1.search搜索联想，用户在不断输入值时，用防抖来节约请求资源。<br>2.window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次</p>\n<p>节流（throttle）<br>1.鼠标不断点击触发，mousedown(单位时间内只触发一次)<br>2.监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是防抖\"><a href=\"#什么是防抖\" class=\"headerlink\" title=\"什么是防抖\"></a>什么是防抖</h3><p>高频率触发的事件,在指定的单位时间内，只响应最后一次，如果在指定的时间在触发，则重新计算时间(后面触发的事件执行，替代了前面的事件)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//简单写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">func, wait</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">            timeout = <span class=\"built_in\">setTimeout</span>(func, wait)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//复杂写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn,time</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>; <span class=\"comment\">// 创建一个标记用来存放定时器的返回值</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timeout); <span class=\"comment\">// 每当用户输入的时候把前一个 setTimeout clear 掉</span></span><br><span class=\"line\">        timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">// 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数</span></span><br><span class=\"line\">          fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);<span class=\"comment\">//arguments是传入的参数</span></span><br><span class=\"line\">        &#125;, time);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;防抖成功&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> inp = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;inp&#x27;</span>);</span><br><span class=\"line\">    inp.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;input&#x27;</span>, <span class=\"title function_\">debounce</span>(sayHi,<span class=\"number\">5000</span>)); <span class=\"comment\">// 防抖</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"什么是节流\"><a href=\"#什么是节流\" class=\"headerlink\" title=\"什么是节流\"></a>什么是节流</h3><p>高频率触发的事件,在指定的单位时间内，只响应第一次(前面触发的执行前，忽略后面的事件)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//简单写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">func, wait</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> startTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timeout)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curTime - startTime &lt;= wait) &#123;</span><br><span class=\"line\">            timeout = <span class=\"built_in\">setTimeout</span>(func, wait)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            startTime = curTime;</span><br><span class=\"line\">            <span class=\"title function_\">func</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//复杂写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fn，time</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> canRun = <span class=\"literal\">true</span>; <span class=\"comment\">// 通过闭包保存一个标记</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!canRun) <span class=\"keyword\">return</span>; <span class=\"comment\">// 在函数开头判断标记是否为true，不为true则return</span></span><br><span class=\"line\">        canRun = <span class=\"literal\">false</span>; <span class=\"comment\">// 立即设置为false</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">// 将外部传入的函数的执行放在setTimeout中</span></span><br><span class=\"line\">          fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">          <span class=\"comment\">// 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了。当定时器没有执行的时候标记永远是false，在开头被return掉</span></span><br><span class=\"line\">          canRun = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;, time);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">target</span>.<span class=\"property\">innerWidth</span>, e.<span class=\"property\">target</span>.<span class=\"property\">innerHeight</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"title function_\">throttle</span>(sayHi,<span class=\"number\">500</span>));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"防抖和节流的使用场景\"><a href=\"#防抖和节流的使用场景\" class=\"headerlink\" title=\"防抖和节流的使用场景\"></a>防抖和节流的使用场景</h3><p>防抖（debounce）<br>1.search搜索联想，用户在不断输入值时，用防抖来节约请求资源。<br>2.window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次</p>\n<p>节流（throttle）<br>1.鼠标不断点击触发，mousedown(单位时间内只触发一次)<br>2.监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断</p>\n"}],"PostAsset":[{"_id":"source/_posts/2021/06/ES6-Symbol的应用/微信图片_20210605110724.png","post":"cl1lyb33z001rn4vo61s4cjx9","slug":"微信图片_20210605110724.png","modified":1,"renderable":1},{"_id":"source/_posts/2021/06/ES6-Symbol的应用/微信图片_20210605110750.png","post":"cl1lyb33z001rn4vo61s4cjx9","slug":"微信图片_20210605110750.png","modified":1,"renderable":1},{"_id":"source/_posts/2022/03/人生何必太复杂/微信图片_20220404142320.jpg","post":"cl1lyb34p002yn4vog4ps2g2r","slug":"微信图片_20220404142320.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2022/04/微笑可以治愈一切/微信图片_20220404143433.jpg","post":"cl1lyb34x003gn4vo6k2a6n2c","slug":"微信图片_20220404143433.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2022/04/追风筝的人/微信图片_20220404144512.jpg","post":"cl1lyb35d004qn4vohzzkfuvj","slug":"微信图片_20220404144512.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cl1lyb3390009n4vodsm7bygm","category_id":"cl1lyb3350004n4voavbh45cj","_id":"cl1lyb33e000hn4vocs3h0q7c"},{"post_id":"cl1lyb32z0001n4vo729qb68l","category_id":"cl1lyb3350004n4voavbh45cj","_id":"cl1lyb33h000mn4vo48cp9la9"},{"post_id":"cl1lyb33a000an4voanxz2uec","category_id":"cl1lyb3350004n4voavbh45cj","_id":"cl1lyb33j000pn4voh1kx9jjj"},{"post_id":"cl1lyb33c000en4vo5ygcc2q1","category_id":"cl1lyb3350004n4voavbh45cj","_id":"cl1lyb33k000sn4voghi9d2mi"},{"post_id":"cl1lyb3330003n4voe9ey077g","category_id":"cl1lyb3350004n4voavbh45cj","_id":"cl1lyb33m000xn4vocfdtesy4"},{"post_id":"cl1lyb33d000gn4vohtum5754","category_id":"cl1lyb3350004n4voavbh45cj","_id":"cl1lyb33o0010n4vof2ygfi7v"},{"post_id":"cl1lyb33f000ln4vofelu8uxi","category_id":"cl1lyb3350004n4voavbh45cj","_id":"cl1lyb33p0014n4voeb55eqsy"},{"post_id":"cl1lyb3370007n4vo345b5oar","category_id":"cl1lyb3350004n4voavbh45cj","_id":"cl1lyb33q0017n4vo4fr05fij"},{"post_id":"cl1lyb33k000rn4voczrq6q2v","category_id":"cl1lyb3350004n4voavbh45cj","_id":"cl1lyb33r001an4vod32t467z"},{"post_id":"cl1lyb33l000wn4vo4awb3arj","category_id":"cl1lyb3350004n4voavbh45cj","_id":"cl1lyb33t001en4vocgpm32af"},{"post_id":"cl1lyb33n000zn4vohi7eht13","category_id":"cl1lyb33l000tn4vo2aoqg9eg","_id":"cl1lyb33u001hn4vo5bp7hngo"},{"post_id":"cl1lyb33h000on4voa9b52frc","category_id":"cl1lyb33l000tn4vo2aoqg9eg","_id":"cl1lyb33v001kn4vo7w620cij"},{"post_id":"cl1lyb33o0012n4vofoyyc5pv","category_id":"cl1lyb33l000tn4vo2aoqg9eg","_id":"cl1lyb33w001nn4vo1jdog6ix"},{"post_id":"cl1lyb33q0016n4vo8pufbx6a","category_id":"cl1lyb33l000tn4vo2aoqg9eg","_id":"cl1lyb340001sn4vobb5ghgc3"},{"post_id":"cl1lyb33r0019n4vo98juc2l8","category_id":"cl1lyb33l000tn4vo2aoqg9eg","_id":"cl1lyb341001vn4vo5jpy7v9y"},{"post_id":"cl1lyb33t001fn4vo62yq7da6","category_id":"cl1lyb33l000tn4vo2aoqg9eg","_id":"cl1lyb343001zn4vo9ynn9pmo"},{"post_id":"cl1lyb33v001mn4vo8tlmab07","category_id":"cl1lyb33l000tn4vo2aoqg9eg","_id":"cl1lyb3440022n4voa69z8acc"},{"post_id":"cl1lyb33z001rn4vo61s4cjx9","category_id":"cl1lyb33l000tn4vo2aoqg9eg","_id":"cl1lyb3450025n4vo1s64b2e6"},{"post_id":"cl1lyb340001un4vo7m0081ky","category_id":"cl1lyb33l000tn4vo2aoqg9eg","_id":"cl1lyb3480029n4vo7efyd49w"},{"post_id":"cl1lyb33v001jn4vofozid4li","category_id":"cl1lyb33y001pn4vogvbybwlk","_id":"cl1lyb349002cn4vodis2c87y"},{"post_id":"cl1lyb342001xn4vo2q4ggg0q","category_id":"cl1lyb33l000tn4vo2aoqg9eg","_id":"cl1lyb34g002fn4voaicr749s"},{"post_id":"cl1lyb3430021n4vo6v672t2n","category_id":"cl1lyb33l000tn4vo2aoqg9eg","_id":"cl1lyb34h002in4vo3ojde8tu"},{"post_id":"cl1lyb3440024n4vo5yy9gemx","category_id":"cl1lyb33l000tn4vo2aoqg9eg","_id":"cl1lyb34j002mn4vo3xorfjt7"},{"post_id":"cl1lyb3480027n4voc4x1406i","category_id":"cl1lyb33l000tn4vo2aoqg9eg","_id":"cl1lyb34l002pn4vod8pg8azs"},{"post_id":"cl1lyb349002an4vofcsqhgdt","category_id":"cl1lyb33l000tn4vo2aoqg9eg","_id":"cl1lyb34n002sn4vo26fka6du"},{"post_id":"cl1lyb34f002en4vo0drg7fh2","category_id":"cl1lyb33l000tn4vo2aoqg9eg","_id":"cl1lyb34o002vn4vohzmoflmt"},{"post_id":"cl1lyb34h002hn4vo3uj619o8","category_id":"cl1lyb33l000tn4vo2aoqg9eg","_id":"cl1lyb34q002zn4vo10svai34"},{"post_id":"cl1lyb34i002ln4vo5j159zli","category_id":"cl1lyb33l000tn4vo2aoqg9eg","_id":"cl1lyb34r0033n4vo8t0v7v7d"},{"post_id":"cl1lyb34k002on4vocovvgak9","category_id":"cl1lyb33l000tn4vo2aoqg9eg","_id":"cl1lyb34s0037n4vohqog01x2"},{"post_id":"cl1lyb34p002yn4vog4ps2g2r","category_id":"cl1lyb33y001pn4vogvbybwlk","_id":"cl1lyb34u003bn4vofz3v6w4u"},{"post_id":"cl1lyb34r0031n4vo4fx9hqfi","category_id":"cl1lyb33y001pn4vogvbybwlk","_id":"cl1lyb34v003en4vohec2697v"},{"post_id":"cl1lyb34l002qn4vo00x33mop","category_id":"cl1lyb34p002wn4vo8nic8fxp","_id":"cl1lyb34y003in4voasabbk5q"},{"post_id":"cl1lyb34s0034n4vogwjy11zs","category_id":"cl1lyb33y001pn4vogvbybwlk","_id":"cl1lyb34z003kn4vo4j3ufa0h"},{"post_id":"cl1lyb34t0039n4vo2wa6dxn9","category_id":"cl1lyb34p002wn4vo8nic8fxp","_id":"cl1lyb350003nn4voheild6qo"},{"post_id":"cl1lyb34n002un4vo01lg0rzs","category_id":"cl1lyb34s0035n4vohlao6flb","_id":"cl1lyb351003pn4vocmw9b1sz"},{"post_id":"cl1lyb34v003cn4voawwu9kwu","category_id":"cl1lyb33y001pn4vogvbybwlk","_id":"cl1lyb351003sn4vo1en9gcdp"},{"post_id":"cl1lyb34x003gn4vo6k2a6n2c","category_id":"cl1lyb33y001pn4vogvbybwlk","_id":"cl1lyb351003un4vo23zq2z1c"},{"post_id":"cl1lyb359004nn4voabgf29ls","category_id":"cl1lyb34p002wn4vo8nic8fxp","_id":"cl1lyb35f004tn4vo6tnuch48"},{"post_id":"cl1lyb35b004on4vohsrsa0sx","category_id":"cl1lyb34p002wn4vo8nic8fxp","_id":"cl1lyb35h004wn4voask74ay0"},{"post_id":"cl1lyb35e004sn4voe4j62dt7","category_id":"cl1lyb34p002wn4vo8nic8fxp","_id":"cl1lyb35i004yn4vo32pe6oai"},{"post_id":"cl1lyb35d004qn4vohzzkfuvj","category_id":"cl1lyb35g004un4vo8xwo08l6","_id":"cl1lyb35i0050n4voetkbe6n3"}],"PostTag":[{"post_id":"cl1lyb3390009n4vodsm7bygm","tag_id":"cl1lyb3360005n4vohyxs6esq","_id":"cl1lyb33c000dn4vo2at717gi"},{"post_id":"cl1lyb32z0001n4vo729qb68l","tag_id":"cl1lyb3360005n4vohyxs6esq","_id":"cl1lyb33d000fn4vo3weh7u3c"},{"post_id":"cl1lyb33a000an4voanxz2uec","tag_id":"cl1lyb3360005n4vohyxs6esq","_id":"cl1lyb33f000kn4vo7xexe8dn"},{"post_id":"cl1lyb33c000en4vo5ygcc2q1","tag_id":"cl1lyb3360005n4vohyxs6esq","_id":"cl1lyb33h000nn4vo4gya62ri"},{"post_id":"cl1lyb3330003n4voe9ey077g","tag_id":"cl1lyb3360005n4vohyxs6esq","_id":"cl1lyb33j000qn4vobrcw3hyk"},{"post_id":"cl1lyb33d000gn4vohtum5754","tag_id":"cl1lyb3360005n4vohyxs6esq","_id":"cl1lyb33l000vn4vo0lz0hvhr"},{"post_id":"cl1lyb33f000ln4vofelu8uxi","tag_id":"cl1lyb3360005n4vohyxs6esq","_id":"cl1lyb33m000yn4vo5gf87z3g"},{"post_id":"cl1lyb3370007n4vo345b5oar","tag_id":"cl1lyb3360005n4vohyxs6esq","_id":"cl1lyb33o0011n4vo7uwlhtso"},{"post_id":"cl1lyb33k000rn4voczrq6q2v","tag_id":"cl1lyb3360005n4vohyxs6esq","_id":"cl1lyb33p0015n4vo6njt6x6l"},{"post_id":"cl1lyb33l000wn4vo4awb3arj","tag_id":"cl1lyb3360005n4vohyxs6esq","_id":"cl1lyb33r0018n4vo19jt8eyb"},{"post_id":"cl1lyb33h000on4voa9b52frc","tag_id":"cl1lyb33l000un4voahskbtsa","_id":"cl1lyb33t001dn4vo04lldot2"},{"post_id":"cl1lyb33h000on4voa9b52frc","tag_id":"cl1lyb33p0013n4vo8anxfnea","_id":"cl1lyb33u001gn4vo6sss6iw6"},{"post_id":"cl1lyb33n000zn4vohi7eht13","tag_id":"cl1lyb33l000un4voahskbtsa","_id":"cl1lyb33v001ln4vo8y845hju"},{"post_id":"cl1lyb33n000zn4vohi7eht13","tag_id":"cl1lyb33s001bn4vo9kgv95mn","_id":"cl1lyb33w001on4voav5k3ch1"},{"post_id":"cl1lyb33o0012n4vofoyyc5pv","tag_id":"cl1lyb33l000un4voahskbtsa","_id":"cl1lyb340001tn4vo9s4x0d73"},{"post_id":"cl1lyb33o0012n4vofoyyc5pv","tag_id":"cl1lyb33u001in4vocherb9wu","_id":"cl1lyb342001wn4voe0jb8kir"},{"post_id":"cl1lyb33q0016n4vo8pufbx6a","tag_id":"cl1lyb33l000un4voahskbtsa","_id":"cl1lyb3430020n4vo3b760w9m"},{"post_id":"cl1lyb33q0016n4vo8pufbx6a","tag_id":"cl1lyb33y001qn4vo8rmtdt89","_id":"cl1lyb3440023n4vobt4r9t9x"},{"post_id":"cl1lyb33r0019n4vo98juc2l8","tag_id":"cl1lyb33l000un4voahskbtsa","_id":"cl1lyb3480028n4voegfl4vws"},{"post_id":"cl1lyb33r0019n4vo98juc2l8","tag_id":"cl1lyb343001yn4vo68u8avps","_id":"cl1lyb349002bn4voe5hnfurh"},{"post_id":"cl1lyb33t001fn4vo62yq7da6","tag_id":"cl1lyb33l000un4voahskbtsa","_id":"cl1lyb34g002gn4vo2d9kgcx8"},{"post_id":"cl1lyb33t001fn4vo62yq7da6","tag_id":"cl1lyb3450026n4voad6dgj4z","_id":"cl1lyb34i002jn4vo380o266m"},{"post_id":"cl1lyb33v001jn4vofozid4li","tag_id":"cl1lyb34e002dn4vobco2ghi8","_id":"cl1lyb34k002nn4vob57yegh4"},{"post_id":"cl1lyb33v001mn4vo8tlmab07","tag_id":"cl1lyb33l000un4voahskbtsa","_id":"cl1lyb34n002tn4voeo75gipj"},{"post_id":"cl1lyb33v001mn4vo8tlmab07","tag_id":"cl1lyb34i002kn4vo623o9l4t","_id":"cl1lyb34p002xn4vo1e19fi20"},{"post_id":"cl1lyb33z001rn4vo61s4cjx9","tag_id":"cl1lyb33l000un4voahskbtsa","_id":"cl1lyb34r0032n4vo2aef2qj9"},{"post_id":"cl1lyb33z001rn4vo61s4cjx9","tag_id":"cl1lyb34m002rn4vohiqn1d0w","_id":"cl1lyb34s0036n4vo2p3afpjz"},{"post_id":"cl1lyb34p002yn4vog4ps2g2r","tag_id":"cl1lyb34e002dn4vobco2ghi8","_id":"cl1lyb34u003an4vo601q2mvn"},{"post_id":"cl1lyb34r0031n4vo4fx9hqfi","tag_id":"cl1lyb34e002dn4vobco2ghi8","_id":"cl1lyb34v003dn4vo8sq83tuj"},{"post_id":"cl1lyb340001un4vo7m0081ky","tag_id":"cl1lyb33l000un4voahskbtsa","_id":"cl1lyb34y003hn4vo6il9cqov"},{"post_id":"cl1lyb340001un4vo7m0081ky","tag_id":"cl1lyb34q0030n4vo4fob3ejr","_id":"cl1lyb34z003jn4vo5albc7v8"},{"post_id":"cl1lyb34s0034n4vogwjy11zs","tag_id":"cl1lyb34e002dn4vobco2ghi8","_id":"cl1lyb350003mn4vo2fsq3oz3"},{"post_id":"cl1lyb342001xn4vo2q4ggg0q","tag_id":"cl1lyb33l000un4voahskbtsa","_id":"cl1lyb350003on4vocbg4476v"},{"post_id":"cl1lyb342001xn4vo2q4ggg0q","tag_id":"cl1lyb34m002rn4vohiqn1d0w","_id":"cl1lyb351003rn4vo00ik213q"},{"post_id":"cl1lyb34v003cn4voawwu9kwu","tag_id":"cl1lyb34e002dn4vobco2ghi8","_id":"cl1lyb351003tn4vo89j62a0s"},{"post_id":"cl1lyb34x003gn4vo6k2a6n2c","tag_id":"cl1lyb34e002dn4vobco2ghi8","_id":"cl1lyb352003vn4vo7opm5rvd"},{"post_id":"cl1lyb3430021n4vo6v672t2n","tag_id":"cl1lyb33l000un4voahskbtsa","_id":"cl1lyb352003xn4vo9tz8be5d"},{"post_id":"cl1lyb3430021n4vo6v672t2n","tag_id":"cl1lyb34x003fn4vo7q0wbpvk","_id":"cl1lyb352003yn4vo8hloelnq"},{"post_id":"cl1lyb3440024n4vo5yy9gemx","tag_id":"cl1lyb33l000un4voahskbtsa","_id":"cl1lyb3520040n4vo15av45x9"},{"post_id":"cl1lyb3440024n4vo5yy9gemx","tag_id":"cl1lyb34z003ln4vobh786z5l","_id":"cl1lyb3520041n4vo2kunhmoc"},{"post_id":"cl1lyb3480027n4voc4x1406i","tag_id":"cl1lyb33l000un4voahskbtsa","_id":"cl1lyb3530043n4vo9o2j80ss"},{"post_id":"cl1lyb3480027n4voc4x1406i","tag_id":"cl1lyb351003qn4vo02k4fqqt","_id":"cl1lyb3530044n4vo6ki2bopc"},{"post_id":"cl1lyb349002an4vofcsqhgdt","tag_id":"cl1lyb33l000un4voahskbtsa","_id":"cl1lyb3530046n4vo6vic8a7m"},{"post_id":"cl1lyb349002an4vofcsqhgdt","tag_id":"cl1lyb352003wn4voav5shv2e","_id":"cl1lyb3530047n4vo1mrc2if8"},{"post_id":"cl1lyb34f002en4vo0drg7fh2","tag_id":"cl1lyb33l000un4voahskbtsa","_id":"cl1lyb3530048n4vofruvcyvt"},{"post_id":"cl1lyb34f002en4vo0drg7fh2","tag_id":"cl1lyb352003zn4vo3lhscixn","_id":"cl1lyb354004an4voaq6895o0"},{"post_id":"cl1lyb34h002hn4vo3uj619o8","tag_id":"cl1lyb33l000un4voahskbtsa","_id":"cl1lyb354004bn4vo4xit08xo"},{"post_id":"cl1lyb34h002hn4vo3uj619o8","tag_id":"cl1lyb3520042n4vodj4x4zuh","_id":"cl1lyb354004dn4vo5za11yib"},{"post_id":"cl1lyb34i002ln4vo5j159zli","tag_id":"cl1lyb33l000un4voahskbtsa","_id":"cl1lyb354004en4vocczg3ngs"},{"post_id":"cl1lyb34i002ln4vo5j159zli","tag_id":"cl1lyb3530045n4voguf44kth","_id":"cl1lyb354004gn4voa9vw0lje"},{"post_id":"cl1lyb34k002on4vocovvgak9","tag_id":"cl1lyb33l000un4voahskbtsa","_id":"cl1lyb354004hn4vo71ge45p7"},{"post_id":"cl1lyb34k002on4vocovvgak9","tag_id":"cl1lyb3530049n4vo7evadaeh","_id":"cl1lyb355004jn4vo3i51gkqf"},{"post_id":"cl1lyb34l002qn4vo00x33mop","tag_id":"cl1lyb354004cn4voany2h1fg","_id":"cl1lyb355004kn4vo66fsb8cc"},{"post_id":"cl1lyb34n002un4vo01lg0rzs","tag_id":"cl1lyb354004fn4vo09ogc3bz","_id":"cl1lyb355004ln4voeigia8sb"},{"post_id":"cl1lyb34t0039n4vo2wa6dxn9","tag_id":"cl1lyb354004cn4voany2h1fg","_id":"cl1lyb356004mn4vo5elj5umq"},{"post_id":"cl1lyb359004nn4voabgf29ls","tag_id":"cl1lyb354004cn4voany2h1fg","_id":"cl1lyb35c004pn4vo7345e9g6"},{"post_id":"cl1lyb35b004on4vohsrsa0sx","tag_id":"cl1lyb354004cn4voany2h1fg","_id":"cl1lyb35e004rn4vo5nl534hs"},{"post_id":"cl1lyb35e004sn4voe4j62dt7","tag_id":"cl1lyb354004cn4voany2h1fg","_id":"cl1lyb35h004xn4vo3auqdl5e"},{"post_id":"cl1lyb35d004qn4vohzzkfuvj","tag_id":"cl1lyb35g004vn4voh3a02xto","_id":"cl1lyb35i004zn4vo6b9y0my3"}],"Tag":[{"name":"每日摘抄","_id":"cl1lyb3360005n4vohyxs6esq"},{"name":"ES6","_id":"cl1lyb33l000un4voahskbtsa"},{"name":"let和const命令","_id":"cl1lyb33p0013n4vo8anxfnea"},{"name":"变量的解构赋值","_id":"cl1lyb33s001bn4vo9kgv95mn"},{"name":"对象的简化写法","_id":"cl1lyb33u001in4vocherb9wu"},{"name":"模板字符串","_id":"cl1lyb33y001qn4vo8rmtdt89"},{"name":"箭头函数","_id":"cl1lyb343001yn4vo68u8avps"},{"name":"Promise","_id":"cl1lyb3450026n4voad6dgj4z"},{"name":"生活点滴","_id":"cl1lyb34e002dn4vobco2ghi8"},{"name":"Map","_id":"cl1lyb34i002kn4vo623o9l4t"},{"name":"Symbol","_id":"cl1lyb34m002rn4vohiqn1d0w"},{"name":"get/set","_id":"cl1lyb34q0030n4vo4fob3ejr"},{"name":"rest参数","_id":"cl1lyb34x003fn4vo7q0wbpvk"},{"name":"class","_id":"cl1lyb34z003ln4vobh786z5l"},{"name":"函数参数的默认值设置","_id":"cl1lyb351003qn4vo02k4fqqt"},{"name":"对象方法扩展","_id":"cl1lyb352003wn4voav5shv2e"},{"name":"扩展运算符","_id":"cl1lyb352003zn4vo3lhscixn"},{"name":"数值扩展","_id":"cl1lyb3520042n4vodj4x4zuh"},{"name":"迭代器","_id":"cl1lyb3530045n4voguf44kth"},{"name":"集合","_id":"cl1lyb3530049n4vo7evadaeh"},{"name":"JavaScript","_id":"cl1lyb354004cn4voany2h1fg"},{"name":"vue","_id":"cl1lyb354004fn4vo09ogc3bz"},{"name":"书籍读后感","_id":"cl1lyb35g004vn4voh3a02xto"}]}}