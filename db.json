{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/quiet/source/css/about.css","path":"css/about.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/archive.css","path":"css/archive.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/atom-one-dark.css","path":"css/atom-one-dark.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/categories.css","path":"css/categories.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/food.css","path":"css/food.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/header.css","path":"css/header.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/home.css","path":"css/home.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/links.css","path":"css/links.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/page.css","path":"css/page.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/page_cente.css","path":"css/page_cente.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/tag.css","path":"css/tag.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/css/tags.css","path":"css/tags.css","modified":0,"renderable":1},{"_id":"themes/quiet/source/image/favicon.ico","path":"image/favicon.ico","modified":0,"renderable":1},{"_id":"themes/quiet/source/image/img.ico","path":"image/img.ico","modified":0,"renderable":1},{"_id":"themes/quiet/source/image/img.jpg","path":"image/img.jpg","modified":0,"renderable":1},{"_id":"themes/quiet/source/image/logo.png","path":"image/logo.png","modified":0,"renderable":1},{"_id":"themes/quiet/source/image/pattern.png","path":"image/pattern.png","modified":0,"renderable":1},{"_id":"themes/quiet/source/js/gotop.js","path":"js/gotop.js","modified":0,"renderable":1},{"_id":"themes/quiet/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"bf2c54dc8e82194ef11d02b8021d14eb904751ff","modified":1648890142541},{"_id":"source/about/index.md","hash":"57f3d607586779a4c90bbfb815c82eb4f2441da0","modified":1648888642117},{"_id":"source/categories/index.md","hash":"e0f8317ea0453171a1e884ca166abf03b747b755","modified":1648887295870},{"_id":"source/_posts/My-New-Post.md","hash":"eef2f89d8edce58a553b7566c341905a7f84edc3","modified":1648892103424},{"_id":"source/links/index.md","hash":"6c6935c231c9f42713ed18f15dade7049d9a1985","modified":1648887275490},{"_id":"source/tags/index.md","hash":"43564b357f48c6fa79cfa856fa3493997d14231f","modified":1648887130147},{"_id":"themes/quiet/.DS_Store","hash":"d6b0bd348c278071914e2dee0dfe4123fecf375f","modified":1648886892867},{"_id":"themes/quiet/LICENSE","hash":"a0da6b64f5ac3c2be67e22af05669c299eaa8c84","modified":1648886892867},{"_id":"themes/quiet/README-EN.md","hash":"8a14c4a1b8880c1b389c18e832ba7e0437c6a480","modified":1648886892868},{"_id":"themes/quiet/layout/404.ejs","hash":"d24c2375e0e927085e6dbeb788fde5e119bcc9b8","modified":1648886892869},{"_id":"themes/quiet/README.md","hash":"029fba4d4abe72177ae38e103d49581428ec6575","modified":1648886892868},{"_id":"themes/quiet/layout/.DS_Store","hash":"46cf1797a08a1ea0f0cdb2af9ebf7d59bd6d976a","modified":1648886892868},{"_id":"themes/quiet/_config.yml","hash":"5775c65020453b0fb4f39c17821bb90944c9e8ed","modified":1648890184723},{"_id":"themes/quiet/layout/about.ejs","hash":"4e1ec51bfd4823d8f0a2ab4c06c06f79bae8541a","modified":1648886892871},{"_id":"themes/quiet/layout/archive.ejs","hash":"f52c5efa03a863204ddf5921144d2608858e0482","modified":1648886892871},{"_id":"themes/quiet/layout/categories.ejs","hash":"bc3bb7a3276d6aa25b805e73addbea778c198605","modified":1648886892871},{"_id":"themes/quiet/layout/index.ejs","hash":"b36963002a0fafb093db68c77eb0f2d0b5e7ded6","modified":1648886892872},{"_id":"themes/quiet/layout/layout.ejs","hash":"1de4d59c593645e3dd2f7953e3c4dda73606b8c3","modified":1648886892872},{"_id":"themes/quiet/layout/links.ejs","hash":"c1db6ee6b94ac0693926ba64c46d6ddd0cf18c69","modified":1648886892872},{"_id":"themes/quiet/layout/post.ejs","hash":"10c5eab4b9964b3565ab3ee3e793364032ec04da","modified":1648886892872},{"_id":"themes/quiet/layout/tag.ejs","hash":"1fa7d8d5a5db1bd817090f8998d985316f33e2b0","modified":1648886892872},{"_id":"themes/quiet/layout/tags.ejs","hash":"587bd14d96946c117b1ef6d2e612cd20e23b59ab","modified":1648886892872},{"_id":"themes/quiet/layout/_partial/foot.ejs","hash":"46a4066ca2ded09bc14b2b5e722f6916439170a1","modified":1648886892869},{"_id":"themes/quiet/source/.DS_Store","hash":"2fe0ee40294946d656b103cef8719c97924075f1","modified":1648886892873},{"_id":"themes/quiet/layout/_partial/.DS_Store","hash":"db62fbf1993ecd5d9e70a49a58be69ac7e7a4485","modified":1648886892869},{"_id":"themes/quiet/layout/_partial/head.ejs","hash":"d7536b46c02d8acba84d21b8ad62edefb7ce86da","modified":1648886892869},{"_id":"themes/quiet/layout/_partial/header.ejs","hash":"60f6d69505c64f628c9ace9325aa28950730852b","modified":1648886892869},{"_id":"themes/quiet/layout/_partial/home.ejs","hash":"094e3dc189406526d3934894cf0352b26ce28f13","modified":1648886892869},{"_id":"themes/quiet/layout/_partial/post_centent.ejs","hash":"b6bb8b8e04433b37854e8c8df79c72de182f4496","modified":1648886892870},{"_id":"themes/quiet/layout/_partial/post_head.ejs","hash":"be2f5a2d0d91ddb529c0508183d57ad105fedefa","modified":1648886892870},{"_id":"themes/quiet/layout/_partial/post_pn.ejs","hash":"7fab46ce1199e5e792d6f7c597690ad768f9730c","modified":1648886892870},{"_id":"themes/quiet/layout/_widget/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1648886892870},{"_id":"themes/quiet/layout/_widget/analytics.ejs","hash":"c48c85b36c50cd18b018d0d3a08981dfb1a37bf5","modified":1648886892870},{"_id":"themes/quiet/layout/_widget/gotop.ejs","hash":"fdc070e8dbd81198bbd36cdf46e8b7c33ecdeaf0","modified":1648886892871},{"_id":"themes/quiet/source/css/about.css","hash":"d3d7ae17f0571f1cec4514135d644c6590118bd0","modified":1648886892873},{"_id":"themes/quiet/layout/_widget/sidebar.ejs","hash":"1e60a534616fdcf97a4d61ef25648af263ffa6e1","modified":1648886892871},{"_id":"themes/quiet/source/css/archive.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1648886892873},{"_id":"themes/quiet/source/css/.DS_Store","hash":"75b22b6a020bdf7a452db2f4d29044b8a88a6661","modified":1648886892873},{"_id":"themes/quiet/source/css/atom-one-dark.css","hash":"c3e2c329a09062a1702f0f51639e2068a0799fe4","modified":1648886892873},{"_id":"themes/quiet/source/css/categories.css","hash":"06b727d6e2e21b1e5ab12de073406517c32dfe93","modified":1648886892874},{"_id":"themes/quiet/source/css/food.css","hash":"10a0e21ef9b2e4a6af9328be51e1c0368ca91f4e","modified":1648886892874},{"_id":"themes/quiet/source/css/header.css","hash":"e3ce1dbac2e258f0943c5aebdd89b29702246baa","modified":1648886892874},{"_id":"themes/quiet/source/css/home.css","hash":"e474078a73fa75f23f37092f01505dd8063ffc38","modified":1648886892874},{"_id":"themes/quiet/source/css/links.css","hash":"c7afe457cea5d996ee86cfc47174aa114e458fb0","modified":1648886892874},{"_id":"themes/quiet/source/css/page.css","hash":"0514b75a35c93c10826cd861f0dd380d90ba8e41","modified":1648886892874},{"_id":"themes/quiet/source/css/tag.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1648886892875},{"_id":"themes/quiet/source/css/page_cente.css","hash":"b85a224b56e93c6b56058ed49cde58e0bfc1d2e4","modified":1648886892875},{"_id":"themes/quiet/source/css/tags.css","hash":"b2de1e197efba0a058f1a5d37aa014fcfc0016ff","modified":1648886892875},{"_id":"themes/quiet/source/image/.DS_Store","hash":"3128ff56de5645c269da786b475fd357f1db7a5f","modified":1648886892875},{"_id":"themes/quiet/source/image/img.ico","hash":"f2c09c9bab4f94e8b24a131ee8527e22fba2c6eb","modified":1648888283136},{"_id":"themes/quiet/source/image/favicon.ico","hash":"fad2c16f133094e29f9c4aa8a946b7aa200ec98b","modified":1648886892875},{"_id":"themes/quiet/source/image/img.jpg","hash":"32a6010e5d1e590081eeb9292ac989181bf5421e","modified":1647825928021},{"_id":"themes/quiet/source/image/logo.png","hash":"3487c0299f2f69abc8bbbd5d7c61ad77b311c801","modified":1648886892875},{"_id":"themes/quiet/source/image/pattern.png","hash":"e9a79b9b5716c781e8f5acf3462e42fae7f39741","modified":1648886892876},{"_id":"themes/quiet/source/js/.DS_Store","hash":"0f43f1407d3b3df9e865a28f4c9ef13640ad739b","modified":1648886892876},{"_id":"themes/quiet/source/js/gotop.js","hash":"2bd969b8dd7b81626dcd2a3d8a1b1bbb4e0fc33c","modified":1648886892876},{"_id":"themes/quiet/source/js/jquery.min.js","hash":"a9d8678047219b378ddf3addf4b44650b677eec7","modified":1648886892877},{"_id":"public/about/index.html","hash":"81f05edafb9b52bec686ac0619b8a69dbcc80be2","modified":1649000242422},{"_id":"public/categories/index.html","hash":"b9ea42aa5abf067872d7ebc9997ed86f0c10e4da","modified":1649000242422},{"_id":"public/links/index.html","hash":"9bca2b593e0bedc2e0154a03a23db8e684c17e74","modified":1649000242422},{"_id":"public/tags/index.html","hash":"b1db22e91fa2efc617b8ed9828cc2813beba92fe","modified":1649000255912},{"_id":"public/2022/04/03/hello-world/index.html","hash":"f2f765be2455aaced4bed73f3c07282bae822cb5","modified":1649000242422},{"_id":"public/archives/index.html","hash":"2705edcbdaf041491efcc2d47e7d3c4beb6b4b11","modified":1649000242422},{"_id":"public/archives/2022/index.html","hash":"2705edcbdaf041491efcc2d47e7d3c4beb6b4b11","modified":1649000242422},{"_id":"public/archives/2022/04/index.html","hash":"2705edcbdaf041491efcc2d47e7d3c4beb6b4b11","modified":1649000242422},{"_id":"public/categories/项目案例/index.html","hash":"618eb7124cbcaf1fdc1311d08981ff25dc3f2dda","modified":1649000242422},{"_id":"public/categories/正则表达式/index.html","hash":"618eb7124cbcaf1fdc1311d08981ff25dc3f2dda","modified":1649000242422},{"_id":"public/index.html","hash":"35f8645f1d71bc4bef1409ebdc5bfcd5e04933df","modified":1649000242422},{"_id":"public/tags/Hexo/index.html","hash":"09fa64c7e2907729f0c3444085d22bfe5f9a4044","modified":1649000242422},{"_id":"public/tags/Quiet/index.html","hash":"339d0d27c6b019d95271799b051ad6614edecefc","modified":1649000242422},{"_id":"public/tags/主题/index.html","hash":"c71897ffb6c9984fdf5e8038e92b2b43f288a263","modified":1649000242422},{"_id":"public/tags/静态主题/index.html","hash":"8faec4943b04caded51cf82b26b5bcd2037a8227","modified":1649000242422},{"_id":"public/tags/正则表达式/index.html","hash":"3984161c6a0280a100c7de0d3f28de26c6a64cf5","modified":1649000242422},{"_id":"public/2022/04/02/My-New-Post/index.html","hash":"d4d79aa9a5226db6fab72372a5d0d042dcab86d4","modified":1649000242422},{"_id":"public/image/img.jpg","hash":"32a6010e5d1e590081eeb9292ac989181bf5421e","modified":1649000242422},{"_id":"public/image/favicon.ico","hash":"fad2c16f133094e29f9c4aa8a946b7aa200ec98b","modified":1649000242422},{"_id":"public/image/img.ico","hash":"f2c09c9bab4f94e8b24a131ee8527e22fba2c6eb","modified":1649000242422},{"_id":"public/image/logo.png","hash":"3487c0299f2f69abc8bbbd5d7c61ad77b311c801","modified":1649000242422},{"_id":"public/image/pattern.png","hash":"e9a79b9b5716c781e8f5acf3462e42fae7f39741","modified":1649000242422},{"_id":"public/css/archive.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1649000242422},{"_id":"public/css/atom-one-dark.css","hash":"da8603ef348b38d6ef090fa9172a6521e53b6c89","modified":1649000242422},{"_id":"public/css/about.css","hash":"d3d7ae17f0571f1cec4514135d644c6590118bd0","modified":1649000242422},{"_id":"public/css/categories.css","hash":"06b727d6e2e21b1e5ab12de073406517c32dfe93","modified":1649000242422},{"_id":"public/css/food.css","hash":"10a0e21ef9b2e4a6af9328be51e1c0368ca91f4e","modified":1649000242422},{"_id":"public/css/header.css","hash":"e3ce1dbac2e258f0943c5aebdd89b29702246baa","modified":1649000242422},{"_id":"public/css/home.css","hash":"e474078a73fa75f23f37092f01505dd8063ffc38","modified":1649000242422},{"_id":"public/css/links.css","hash":"c7afe457cea5d996ee86cfc47174aa114e458fb0","modified":1649000242422},{"_id":"public/css/page.css","hash":"0514b75a35c93c10826cd861f0dd380d90ba8e41","modified":1649000242422},{"_id":"public/css/page_cente.css","hash":"b85a224b56e93c6b56058ed49cde58e0bfc1d2e4","modified":1649000242422},{"_id":"public/css/tag.css","hash":"e87c945020b9141c8dd43e0349bd1ebaa1d13f30","modified":1649000242422},{"_id":"public/css/tags.css","hash":"b2de1e197efba0a058f1a5d37aa014fcfc0016ff","modified":1649000242422},{"_id":"public/js/gotop.js","hash":"2bd969b8dd7b81626dcd2a3d8a1b1bbb4e0fc33c","modified":1649000242422},{"_id":"public/js/jquery.min.js","hash":"948b382d052e9af0de5353f29f986d3080e7221c","modified":1649000242422}],"Category":[{"name":"项目案例","_id":"cl1jg62o700066kvofvppfjbp"},{"name":"正则表达式","_id":"cl1jg62o900086kvohq1807rz"}],"Data":[],"Page":[{"title":"个人简介","date":"2020-11-02T16:00:00.000Z","aubot":"Cange-Q","portrait":"https://cdn.jsdelivr.net/gh/duogongneng/MyBlogImg/imgIMG_7327.jpeg","describe":"一个阳光快乐的BOY,在正合适的年龄里希望遇见正好的你。","type":"about","layout":"about","author":"79bk.cn","_content":"","source":"about/index.md","raw":"---\ntitle: 个人简介\ndate: 2020-11-03\naubot: Cange-Q\nportrait: 'https://cdn.jsdelivr.net/gh/duogongneng/MyBlogImg/imgIMG_7327.jpeg'\ndescribe: '一个阳光快乐的BOY,在正合适的年龄里希望遇见正好的你。'\ntype: \"about\"\nlayout: \"about\"\nauthor: 79bk.cn\n---","updated":"2022-04-02T08:37:22.117Z","path":"about/index.html","comments":1,"_id":"cl1jg62nu00006kvofr99gpum","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"文章分类","date":"2020-11-01T16:00:00.000Z","type":"categories","layout":"categories","author":"79bk.cn","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2020-11-02\ntype: categories\nlayout: categories\nauthor: 79bk.cn\n---","updated":"2022-04-02T08:14:55.870Z","path":"categories/index.html","comments":1,"_id":"cl1jg62nx00016kvoe6hs054t","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"友情链接","date":"2020-09-18T16:00:00.000Z","type":"links","layout":"links","author":"79bk.cn","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\ndate: 2020-09-19\ntype: \"links\"\nlayout: \"links\"\nauthor: 79bk.cn\n---","updated":"2022-04-02T08:14:35.490Z","path":"links/index.html","comments":1,"_id":"cl1jg62nx00026kvo6fdf0byg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-09-19T08:19:22.000Z","layout":"tags","author":"79bk.cn","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-09-19 16:19:22\nlayout: \"tags\"\nauthor: 79bk.cn\n---","updated":"2022-04-02T08:12:10.147Z","path":"tags/index.html","comments":1,"_id":"cl1jg62o400046kvocu1b8lwo","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncategories: 项目案例\ntags:\n  - Hexo\n  - Quiet\n  - 主题\n  - 静态主题\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-04-03T15:33:56.747Z","updated":"2022-04-02T09:02:22.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1jg62o200036kvo79qs7dt5","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"My New Post","date":"2022-04-02T09:02:06.000Z","_content":"## 数字相关的正则表达式\n```\n去空格： /^\\s+|\\s+$/g\n数字： ^[0-9]*$\nn位定长的数字： ^\\d{n}$\nm-n位之间的数字： ^\\d{m,n}$\n零和非零开头的数字： ^(0|[1-9][0-9]*)$\n非零开头的最多带两位小数的数字： ^([1-9][0-9]*)+(.[0-9]{1,2})?$\n带1-2位小数的正数或负数： ^(\\-)?\\d+(\\.\\d{1,2})?$\n正数、负数、和小数： ^(\\-|\\+)?\\d+(\\.\\d+)?$\n有两位小数的正实数： ^[0-9]+(.[0-9]{2})?$\n有1~3位小数的正实数： ^[0-9]+(.[0-9]{1,3})?$\n正整数： ^\\d+$ 或 ^[1-9]\\d*|0$\n负整数： ^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$\n正浮点数： \n^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ \n^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$\n负浮点数： \n^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$\n ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$\n浮点数： ^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$\n```\n## 字符相关的正则表达式\n```\n汉字： ^[\\u4e00-\\u9fa5]{0,}$\n长度为3-20的所有字符： ^.{3,20}$\n由数字和26个英文字母组成的字符串： ^[A-Za-z0-9]+$\n由数字、26个英文字母或者下划线组成的字符串： ^\\w+$ 或 ^\\w{3,20}$\n中文、英文、数字包括下划线： ^[\\u4E00-\\u9FA5A-Za-z0-9_]+$\n中文、英文、数字但不包括下划线等符号： \n^[\\u4E00-\\u9FA5A-Za-z0-9]+$ \n ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$\n帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)： \n^[a-zA-Z][a-zA-Z0-9_]{4,15}$\n密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)： \n^[a-zA-Z]\\w{5,17}$\n强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：\n ^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$\n```\n## 固定格式约定俗成的正则表达式\n```\nEmail地址： ^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$\n网站域名： [a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?\nURL网址： ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=]*)?$\n手机号码： \n^(13[0-9]|17[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$\n\n电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、\n”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)： \n^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$\n国内电话号码(0511-4405222、021-87888822)： \\d{3}-\\d{8}|\\d{4}-\\d{7}\n身份证号(15位、18位数字)： ^\\d{15}|\\d{18}$\n日期格式： ^\\d{4}-\\d{1,2}-\\d{1,2}\n一年的12个月(01～09和1～12)： ^(0?[1-9]|1[0-2])$\n一个月的31天(01～09和1～31)： ^((0?[1-9])|((1|2)[0-9])|30|31)$\n腾讯QQ号： [1-9][0-9]{4,8} (腾讯QQ号从10000开始，目前最长为10位)\n中国邮政编码： [1-9]\\d{5}(?!\\d) (中国邮政编码为6位数字)\nIP地址： \\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用)\nIP地址： ((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))\n```\n## 常用的方法\n### 1.test() \n#### 在字符串中查找符合正则的内容，若查找到返回true,反之返回false.\n```\nvar str = '374829348791';\nvar re = /\\D/; //  \\D代表非数字\nif (re.test(str)) { // 返回true,代表在字符串中找到了非数字。\n    alert('不全是数字');\n} else {\n    alert('全是数字');\n}\n```\n### 2.search() \n####  在字符串搜索符合正则的内容，搜索到就返回出现的位置\n#### （从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1\n```\nvar str = \"abc\"\nvar string = 'abbbbccbebababccbaabcbccbaabbccabcc'\n\nfunction regex(str1, str2) {\n    let regex = new RegExp(str1, \"g\");\n    console.log(str2.search(regex));\n}\nregex(str, string)\n```\n### 3.match() \n#### 在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\n```\nvar str = 'haj123sdk54hask33dkhalsd879';\nvar re = /\\d+/g; // 每次匹配至少一个数字  且全局匹配  如果不是全局匹配，当找到数字123，它就会停止了。就只会弹出123.加上全局匹配，就会从开始到结束一直去搜索符合规则的。如果没有加号，匹配的结果就是1，2，3，5，4，3，3，879并不是我们想要的，有了加号，每次匹配的数字就是至少一个了。\nalert(str.match(re)); // [123，54，33，879]\n```\n### replace() \n#### 查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。 \n```\nvar str = \"我爱北京天安门，天安门上太阳升。\";\nvar re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配\nvar str2 = str.replace(re,'*'); \nalert(str2)  //我爱**，*上太阳升 \n\n//这种只是把找到的变成了一个*，并不能几个字就对应几个*。\nvar str = \"我爱北京天安门，天安门上太阳升。\";\nvar re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配\nvar str2 = str.replace(re,function(str){\n              alert(str); //用来测试：函数的第一个参数代表每次搜索到的符合正则的字符，所以第一次str指的是北京 第二次str是天安门 第三次str是天安门\n            var result = '';\n            for(var i=0;i<str.length;i++){\n                result += '*';\n            }              \n            return result; //所以搜索到了几个字就返回几个* \n        });\nalert(str2)  //我爱*****，***上太阳升         \n\n//整个过程就是，找到北京，替换成了两个*，找到天安门替换成了3个*，找到天安门替换成3个*。\n```\n把2013-6-7替换成2013.6.7\n```\n//整个过程就是利用子项把2013- 6- 分别替换成了2013. 6.  最终弹出2013.6.7\nvar str = '2013-6-7';\nvar re = /(\\d+)(-)/g;\n\nstr = str.replace(re,function($0,$1,$2){\n\n      //replace()中如果有子项，\n      //第一个参数：$0（匹配成功后的整体结果  2013-  6-）,\n      // 第二个参数 : $1(匹配成功的第一个分组，这里指的是\\d   2013, 6)\n      //第三个参数 : $1(匹配成功的第二个分组，这里指的是-    - - )   \n    return $1 + '.';  //分别返回2013.   6.\n\n});\n\nalert( str );   //2013.6.7\n```\n\n找重复项最多的字符个数\n```\n// split():字符串中的方法，把字符串转成数组。\n// sort():数组中的排序方法，按照ACALL码进行排序。\n// join():数组中的方法，把数组转换为字符串\n\nvar str = 'assssjdssskssalsssdkjsssdss';\nvar arr = str.split(''); //把字符串转换为数组\nstr = arr.sort().join(''); //首先进行排序，这样结果会把相同的字符放在一起，然后再转换为字符串\n//alert(str);  // aaddjjkklsssssssssssssssss\n\nvar value = '';\nvar index = 0;\nvar re = /(\\w)\\1+/g;  //匹配字符，且重复这个字符，重复次数至少一次。\nstr.replace(re,function($0,$1){\n  //alert($0);   代表每次匹配成功的结果 : aa dd jj kk l sssssssssssssssss\n  //alert($1);  代表每次匹配成功的第一个子项，也就是\\w:  a d j k l S\n  if(index<$0.length){  //如果index保存的值小于$0的长度就进行下面的操作\n    index = $0.length;  // 这样index一直保存的就在最大的长度\n    value = $1;  //value保存的是出现最多的这个字符\n  }\n});\nconsole.log('最多的字符:'+value+',重复的次数:'+index);  // s   17\n```\n\n查找字符串'abc'在字符串'abbbbccbebababccbaabcbccbaabbccabcc'第一次出现的位置\n```\nvar str = \"abc\"\nvar string = 'abbbbccbebababccbaabcbccbaabbccabcc'\nfunction regex(str1,str2){\n    let regex = new RegExp(str1,\"g\");\n    console.log(str2.search(regex));\n}\nregex(str,string)\n```\n\n","source":"_posts/My-New-Post.md","raw":"---\ntitle: My New Post\ncategories: 正则表达式\ndate: 2022-04-02 17:02:06\ntags:\n  - 正则表达式\n---\n## 数字相关的正则表达式\n```\n去空格： /^\\s+|\\s+$/g\n数字： ^[0-9]*$\nn位定长的数字： ^\\d{n}$\nm-n位之间的数字： ^\\d{m,n}$\n零和非零开头的数字： ^(0|[1-9][0-9]*)$\n非零开头的最多带两位小数的数字： ^([1-9][0-9]*)+(.[0-9]{1,2})?$\n带1-2位小数的正数或负数： ^(\\-)?\\d+(\\.\\d{1,2})?$\n正数、负数、和小数： ^(\\-|\\+)?\\d+(\\.\\d+)?$\n有两位小数的正实数： ^[0-9]+(.[0-9]{2})?$\n有1~3位小数的正实数： ^[0-9]+(.[0-9]{1,3})?$\n正整数： ^\\d+$ 或 ^[1-9]\\d*|0$\n负整数： ^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$\n正浮点数： \n^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ \n^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$\n负浮点数： \n^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$\n ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$\n浮点数： ^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$\n```\n## 字符相关的正则表达式\n```\n汉字： ^[\\u4e00-\\u9fa5]{0,}$\n长度为3-20的所有字符： ^.{3,20}$\n由数字和26个英文字母组成的字符串： ^[A-Za-z0-9]+$\n由数字、26个英文字母或者下划线组成的字符串： ^\\w+$ 或 ^\\w{3,20}$\n中文、英文、数字包括下划线： ^[\\u4E00-\\u9FA5A-Za-z0-9_]+$\n中文、英文、数字但不包括下划线等符号： \n^[\\u4E00-\\u9FA5A-Za-z0-9]+$ \n ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$\n帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)： \n^[a-zA-Z][a-zA-Z0-9_]{4,15}$\n密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)： \n^[a-zA-Z]\\w{5,17}$\n强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：\n ^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$\n```\n## 固定格式约定俗成的正则表达式\n```\nEmail地址： ^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$\n网站域名： [a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?\nURL网址： ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=]*)?$\n手机号码： \n^(13[0-9]|17[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$\n\n电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、\n”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)： \n^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$\n国内电话号码(0511-4405222、021-87888822)： \\d{3}-\\d{8}|\\d{4}-\\d{7}\n身份证号(15位、18位数字)： ^\\d{15}|\\d{18}$\n日期格式： ^\\d{4}-\\d{1,2}-\\d{1,2}\n一年的12个月(01～09和1～12)： ^(0?[1-9]|1[0-2])$\n一个月的31天(01～09和1～31)： ^((0?[1-9])|((1|2)[0-9])|30|31)$\n腾讯QQ号： [1-9][0-9]{4,8} (腾讯QQ号从10000开始，目前最长为10位)\n中国邮政编码： [1-9]\\d{5}(?!\\d) (中国邮政编码为6位数字)\nIP地址： \\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用)\nIP地址： ((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))\n```\n## 常用的方法\n### 1.test() \n#### 在字符串中查找符合正则的内容，若查找到返回true,反之返回false.\n```\nvar str = '374829348791';\nvar re = /\\D/; //  \\D代表非数字\nif (re.test(str)) { // 返回true,代表在字符串中找到了非数字。\n    alert('不全是数字');\n} else {\n    alert('全是数字');\n}\n```\n### 2.search() \n####  在字符串搜索符合正则的内容，搜索到就返回出现的位置\n#### （从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1\n```\nvar str = \"abc\"\nvar string = 'abbbbccbebababccbaabcbccbaabbccabcc'\n\nfunction regex(str1, str2) {\n    let regex = new RegExp(str1, \"g\");\n    console.log(str2.search(regex));\n}\nregex(str, string)\n```\n### 3.match() \n#### 在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\n```\nvar str = 'haj123sdk54hask33dkhalsd879';\nvar re = /\\d+/g; // 每次匹配至少一个数字  且全局匹配  如果不是全局匹配，当找到数字123，它就会停止了。就只会弹出123.加上全局匹配，就会从开始到结束一直去搜索符合规则的。如果没有加号，匹配的结果就是1，2，3，5，4，3，3，879并不是我们想要的，有了加号，每次匹配的数字就是至少一个了。\nalert(str.match(re)); // [123，54，33，879]\n```\n### replace() \n#### 查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。 \n```\nvar str = \"我爱北京天安门，天安门上太阳升。\";\nvar re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配\nvar str2 = str.replace(re,'*'); \nalert(str2)  //我爱**，*上太阳升 \n\n//这种只是把找到的变成了一个*，并不能几个字就对应几个*。\nvar str = \"我爱北京天安门，天安门上太阳升。\";\nvar re = /北京|天安门/g;  //  找到北京 或者天安门 全局匹配\nvar str2 = str.replace(re,function(str){\n              alert(str); //用来测试：函数的第一个参数代表每次搜索到的符合正则的字符，所以第一次str指的是北京 第二次str是天安门 第三次str是天安门\n            var result = '';\n            for(var i=0;i<str.length;i++){\n                result += '*';\n            }              \n            return result; //所以搜索到了几个字就返回几个* \n        });\nalert(str2)  //我爱*****，***上太阳升         \n\n//整个过程就是，找到北京，替换成了两个*，找到天安门替换成了3个*，找到天安门替换成3个*。\n```\n把2013-6-7替换成2013.6.7\n```\n//整个过程就是利用子项把2013- 6- 分别替换成了2013. 6.  最终弹出2013.6.7\nvar str = '2013-6-7';\nvar re = /(\\d+)(-)/g;\n\nstr = str.replace(re,function($0,$1,$2){\n\n      //replace()中如果有子项，\n      //第一个参数：$0（匹配成功后的整体结果  2013-  6-）,\n      // 第二个参数 : $1(匹配成功的第一个分组，这里指的是\\d   2013, 6)\n      //第三个参数 : $1(匹配成功的第二个分组，这里指的是-    - - )   \n    return $1 + '.';  //分别返回2013.   6.\n\n});\n\nalert( str );   //2013.6.7\n```\n\n找重复项最多的字符个数\n```\n// split():字符串中的方法，把字符串转成数组。\n// sort():数组中的排序方法，按照ACALL码进行排序。\n// join():数组中的方法，把数组转换为字符串\n\nvar str = 'assssjdssskssalsssdkjsssdss';\nvar arr = str.split(''); //把字符串转换为数组\nstr = arr.sort().join(''); //首先进行排序，这样结果会把相同的字符放在一起，然后再转换为字符串\n//alert(str);  // aaddjjkklsssssssssssssssss\n\nvar value = '';\nvar index = 0;\nvar re = /(\\w)\\1+/g;  //匹配字符，且重复这个字符，重复次数至少一次。\nstr.replace(re,function($0,$1){\n  //alert($0);   代表每次匹配成功的结果 : aa dd jj kk l sssssssssssssssss\n  //alert($1);  代表每次匹配成功的第一个子项，也就是\\w:  a d j k l S\n  if(index<$0.length){  //如果index保存的值小于$0的长度就进行下面的操作\n    index = $0.length;  // 这样index一直保存的就在最大的长度\n    value = $1;  //value保存的是出现最多的这个字符\n  }\n});\nconsole.log('最多的字符:'+value+',重复的次数:'+index);  // s   17\n```\n\n查找字符串'abc'在字符串'abbbbccbebababccbaabcbccbaabbccabcc'第一次出现的位置\n```\nvar str = \"abc\"\nvar string = 'abbbbccbebababccbaabcbccbaabbccabcc'\nfunction regex(str1,str2){\n    let regex = new RegExp(str1,\"g\");\n    console.log(str2.search(regex));\n}\nregex(str,string)\n```\n\n","slug":"My-New-Post","published":1,"updated":"2022-04-02T09:35:03.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1jg62o500056kvoe925eckm","content":"<h2 id=\"数字相关的正则表达式\"><a href=\"#数字相关的正则表达式\" class=\"headerlink\" title=\"数字相关的正则表达式\"></a>数字相关的正则表达式</h2><figure class=\"highlight subunit\"><table><tr><td class=\"code\"><pre><span class=\"line\">去空格： /^\\s+|\\s+$/g</span><br><span class=\"line\">数字： ^[0<span class=\"string\">-9</span>]*$</span><br><span class=\"line\">n位定长的数字： ^\\d&#123;n&#125;$</span><br><span class=\"line\">m-n位之间的数字： ^\\d&#123;m,n&#125;$</span><br><span class=\"line\">零和非零开头的数字： ^(0|[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)$</span><br><span class=\"line\">非零开头的最多带两位小数的数字： ^([1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)+(.[0<span class=\"string\">-9</span>]&#123;1,2&#125;)?$</span><br><span class=\"line\">带1<span class=\"string\">-2</span>位小数的正数或负数： ^(\\-)?\\d+(\\.\\d&#123;1,2&#125;)?$</span><br><span class=\"line\">正数、负数、和小数： ^(\\-|\\+)?\\d+(\\.\\d+)?$</span><br><span class=\"line\">有两位小数的正实数： ^[0<span class=\"string\">-9</span>]+(.[0<span class=\"string\">-9</span>]&#123;2&#125;)?$</span><br><span class=\"line\">有1~3位小数的正实数： ^[0<span class=\"string\">-9</span>]+(.[0<span class=\"string\">-9</span>]&#123;1,3&#125;)?$</span><br><span class=\"line\">正整数： ^\\d+$ 或 ^[1<span class=\"string\">-9</span>]\\d*|0$</span><br><span class=\"line\">负整数： ^-[1<span class=\"string\">-9</span>]\\d*|0$ 或 ^((-\\d+)|(0+))$</span><br><span class=\"line\">正浮点数： </span><br><span class=\"line\">^[1<span class=\"string\">-9</span>]\\d*\\.\\d*|0\\.\\d*[1<span class=\"string\">-9</span>]\\d*$ </span><br><span class=\"line\">^(([0<span class=\"string\">-9</span>]+\\.[0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*\\.[0<span class=\"string\">-9</span>]+)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*))$</span><br><span class=\"line\">负浮点数： </span><br><span class=\"line\">^-([1<span class=\"string\">-9</span>]\\d*\\.\\d*|0\\.\\d*[1<span class=\"string\">-9</span>]\\d*)$</span><br><span class=\"line\"> ^(-(([0<span class=\"string\">-9</span>]+\\.[0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*\\.[0<span class=\"string\">-9</span>]+)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)))$</span><br><span class=\"line\">浮点数： ^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1<span class=\"string\">-9</span>]\\d*\\.\\d*|0\\.\\d*[1<span class=\"string\">-9</span>]\\d*|0?\\.0+|0)$</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符相关的正则表达式\"><a href=\"#字符相关的正则表达式\" class=\"headerlink\" title=\"字符相关的正则表达式\"></a>字符相关的正则表达式</h2><figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">汉字： ^<span class=\"selector-attr\">[\\u4e00-\\u9fa5]</span>&#123;<span class=\"number\">0</span>,&#125;$</span><br><span class=\"line\">长度为<span class=\"number\">3</span>-<span class=\"number\">20</span>的所有字符： ^.&#123;<span class=\"number\">3</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\">由数字和<span class=\"number\">26</span>个英文字母组成的字符串： ^<span class=\"selector-attr\">[A-Za-z0-9]</span>+$</span><br><span class=\"line\">由数字、<span class=\"number\">26</span>个英文字母或者下划线组成的字符串： ^\\w+$ 或 ^\\w&#123;<span class=\"number\">3</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\">中文、英文、数字包括下划线： ^<span class=\"selector-attr\">[\\u4E00-\\u9FA5A-Za-z0-9_]</span>+$</span><br><span class=\"line\">中文、英文、数字但不包括下划线等符号： </span><br><span class=\"line\">^<span class=\"selector-attr\">[\\u4E00-\\u9FA5A-Za-z0-9]</span>+$ </span><br><span class=\"line\"> ^<span class=\"selector-attr\">[\\u4E00-\\u9FA5A-Za-z0-9]</span>&#123;<span class=\"number\">2</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\">帐号是否合法(字母开头，允许<span class=\"number\">5</span>-<span class=\"number\">16</span>字节，允许字母数字下划线)： </span><br><span class=\"line\">^<span class=\"selector-attr\">[a-zA-Z]</span><span class=\"selector-attr\">[a-zA-Z0-9_]</span>&#123;<span class=\"number\">4</span>,<span class=\"number\">15</span>&#125;$</span><br><span class=\"line\">密码(以字母开头，长度在<span class=\"number\">6</span>~<span class=\"number\">18</span>之间，只能包含字母、数字和下划线)： </span><br><span class=\"line\">^<span class=\"selector-attr\">[a-zA-Z]</span>\\w&#123;<span class=\"number\">5</span>,<span class=\"number\">17</span>&#125;$</span><br><span class=\"line\">强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在<span class=\"number\">8</span>-<span class=\"number\">10</span>之间)：</span><br><span class=\"line\"> ^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;<span class=\"number\">8</span>,<span class=\"number\">10</span>&#125;$</span><br></pre></td></tr></table></figure>\n<h2 id=\"固定格式约定俗成的正则表达式\"><a href=\"#固定格式约定俗成的正则表达式\" class=\"headerlink\" title=\"固定格式约定俗成的正则表达式\"></a>固定格式约定俗成的正则表达式</h2><figure class=\"highlight gherkin\"><table><tr><td class=\"code\"><pre><span class=\"line\">Email地址： ^\\w+([-+.]\\w+)<span class=\"symbol\">*</span><span class=\"meta\">@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$</span></span><br><span class=\"line\">网站域名： [a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span><br><span class=\"line\">URL网址： ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]<span class=\"symbol\">*</span>)?$</span><br><span class=\"line\">手机号码： </span><br><span class=\"line\">^(13[0-9]|<span class=\"string\">17[0-9]</span>|<span class=\"string\">14[5</span>|<span class=\"string\">7]</span>|<span class=\"string\">15[0</span>|<span class=\"string\">1</span>|<span class=\"string\">2</span>|<span class=\"string\">3</span>|<span class=\"string\">5</span>|<span class=\"string\">6</span>|<span class=\"string\">7</span>|<span class=\"string\">8</span>|<span class=\"string\">9]</span>|<span class=\"string\">18[0</span>|<span class=\"string\">1</span>|<span class=\"string\">2</span>|<span class=\"string\">3</span>|<span class=\"string\">5</span>|<span class=\"string\">6</span>|<span class=\"string\">7</span>|<span class=\"string\">8</span>|<span class=\"string\">9])\\d&#123;8&#125;$</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、</span></span><br><span class=\"line\"><span class=\"string\">”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)： </span></span><br><span class=\"line\"><span class=\"string\">^(\\(\\d&#123;3,4&#125;-)</span>|<span class=\"string\">\\d&#123;3.4&#125;-)?\\d&#123;7,8&#125;$</span></span><br><span class=\"line\"><span class=\"string\">国内电话号码(0511-4405222、021-87888822)： \\d&#123;3&#125;-\\d&#123;8&#125;</span>|<span class=\"string\">\\d&#123;4&#125;-\\d&#123;7&#125;</span></span><br><span class=\"line\"><span class=\"string\">身份证号(15位、18位数字)： ^\\d&#123;15&#125;</span>|<span class=\"string\">\\d&#123;18&#125;$</span></span><br><span class=\"line\"><span class=\"string\">日期格式： ^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;</span></span><br><span class=\"line\"><span class=\"string\">一年的12个月(01～09和1～12)： ^(0?[1-9]</span>|<span class=\"string\">1[0-2])$</span></span><br><span class=\"line\"><span class=\"string\">一个月的31天(01～09和1～31)： ^((0?[1-9])</span>|<span class=\"string\">((1</span>|<span class=\"string\">2)[0-9])</span>|<span class=\"string\">30</span>|<span class=\"string\">31)$</span></span><br><span class=\"line\"><span class=\"string\">腾讯QQ号： [1-9][0-9]&#123;4,8&#125; (腾讯QQ号从10000开始，目前最长为10位)</span></span><br><span class=\"line\"><span class=\"string\">中国邮政编码： [1-9]\\d&#123;5&#125;(?!\\d) (中国邮政编码为6位数字)</span></span><br><span class=\"line\"><span class=\"string\">IP地址： \\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用)</span></span><br><span class=\"line\"><span class=\"string\">IP地址： ((?:(?:25[0-5]</span>|<span class=\"string\">2[0-4]\\\\d</span>|<span class=\"string\">[01]?\\\\d?\\\\d)\\\\.)&#123;3&#125;(?:25[0-5]</span>|<span class=\"string\">2[0-4]\\\\d</span>|<span class=\"string\">[01]?\\\\d?\\\\d))</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"常用的方法\"><a href=\"#常用的方法\" class=\"headerlink\" title=\"常用的方法\"></a>常用的方法</h2><h3 id=\"1-test\"><a href=\"#1-test\" class=\"headerlink\" title=\"1.test()\"></a>1.test()</h3><h4 id=\"在字符串中查找符合正则的内容，若查找到返回true-反之返回false\"><a href=\"#在字符串中查找符合正则的内容，若查找到返回true-反之返回false\" class=\"headerlink\" title=\"在字符串中查找符合正则的内容，若查找到返回true,反之返回false.\"></a>在字符串中查找符合正则的内容，若查找到返回true,反之返回false.</h4><figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;374829348791&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/\\D/</span>; <span class=\"comment\">//  \\D代表非数字</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (re.test(str)) &#123; <span class=\"comment\">// 返回true,代表在字符串中找到了非数字。</span></span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;不全是数字&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;全是数字&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-search\"><a href=\"#2-search\" class=\"headerlink\" title=\"2.search()\"></a>2.search()</h3><h4 id=\"在字符串搜索符合正则的内容，搜索到就返回出现的位置\"><a href=\"#在字符串搜索符合正则的内容，搜索到就返回出现的位置\" class=\"headerlink\" title=\"在字符串搜索符合正则的内容，搜索到就返回出现的位置\"></a>在字符串搜索符合正则的内容，搜索到就返回出现的位置</h4><h4 id=\"（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置），-如果搜索失败就返回-1\"><a href=\"#（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置），-如果搜索失败就返回-1\" class=\"headerlink\" title=\"（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1\"></a>（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1</h4><figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;abbbbccbebababccbaabcbccbaabbccabcc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">regex</span>(<span class=\"params\">str1, str2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(str1, <span class=\"string\">&quot;g&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str2.search(regex));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">regex(str, <span class=\"built_in\">string</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-match\"><a href=\"#3-match\" class=\"headerlink\" title=\"3.match()\"></a>3.match()</h3><h4 id=\"在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\"><a href=\"#在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\" class=\"headerlink\" title=\"在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\"></a>在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。</h4><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">var</span> str = &#x27;haj123sdk54hask33dkhalsd879&#x27;;</span><br><span class=\"line\"><span class=\"attribute\">var</span> re = /\\d+/g; // 每次匹配至少一个数字  且全局匹配  如果不是全局匹配，当找到数字<span class=\"number\">123</span>，它就会停止了。就只会弹出<span class=\"number\">123</span>.加上全局匹配，就会从开始到结束一直去搜索符合规则的。如果没有加号，匹配的结果就是<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>，<span class=\"number\">5</span>，<span class=\"number\">4</span>，<span class=\"number\">3</span>，<span class=\"number\">3</span>，<span class=\"number\">879</span>并不是我们想要的，有了加号，每次匹配的数字就是至少一个了。</span><br><span class=\"line\"><span class=\"attribute\">alert</span>(str.match(re)); //<span class=\"meta\"> [123，54，33，879]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace()\"></a>replace()</h3><h4 id=\"查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。\"><a href=\"#查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。\" class=\"headerlink\" title=\"查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。\"></a>查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。</h4><figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;我爱北京天安门，天安门上太阳升。&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/北京|天安门/g</span>;  <span class=\"comment\">//  找到北京 或者天安门 全局匹配</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = str.<span class=\"built_in\">replace</span>(re,<span class=\"string\">&#x27;*&#x27;</span>); </span><br><span class=\"line\">alert(str2)  <span class=\"comment\">//我爱**，*上太阳升 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这种只是把找到的变成了一个*，并不能几个字就对应几个*。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;我爱北京天安门，天安门上太阳升。&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/北京|天安门/g</span>;  <span class=\"comment\">//  找到北京 或者天安门 全局匹配</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = str.<span class=\"built_in\">replace</span>(re,<span class=\"keyword\">function</span>(<span class=\"params\">str</span>)&#123;</span><br><span class=\"line\">              alert(str); <span class=\"comment\">//用来测试：函数的第一个参数代表每次搜索到的符合正则的字符，所以第一次str指的是北京 第二次str是天安门 第三次str是天安门</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;str.<span class=\"built_in\">length</span>;i++)&#123;</span><br><span class=\"line\">                result += <span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\">            &#125;              </span><br><span class=\"line\">            <span class=\"keyword\">return</span> result; <span class=\"comment\">//所以搜索到了几个字就返回几个* </span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">alert(str2)  <span class=\"comment\">//我爱*****，***上太阳升         </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//整个过程就是，找到北京，替换成了两个*，找到天安门替换成了3个*，找到天安门替换成3个*。</span></span><br></pre></td></tr></table></figure>\n<p>把2013-6-7替换成2013.6.7</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>整个过程就是利用子项把<span class=\"number\">2013</span>- <span class=\"number\">6</span>- 分别替换成了<span class=\"number\">2013</span>. <span class=\"number\">6</span>.  最终弹出<span class=\"number\">2013.6</span>.<span class=\"number\">7</span></span><br><span class=\"line\">var str = <span class=\"string\">&#x27;2013-6-7&#x27;</span>;</span><br><span class=\"line\">var re = <span class=\"regexp\">/(\\d+)(-)/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">str = str.replace(re,<span class=\"keyword\">function</span>(<span class=\"variable\">$0</span>,<span class=\"variable\">$1</span>,<span class=\"variable\">$2</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"regexp\">//</span>replace()中如果有子项，</span><br><span class=\"line\">      <span class=\"regexp\">//</span>第一个参数：<span class=\"variable\">$0</span>（匹配成功后的整体结果  <span class=\"number\">2013</span>-  <span class=\"number\">6</span>-）,</span><br><span class=\"line\">      <span class=\"regexp\">//</span> 第二个参数 : <span class=\"variable\">$1</span>(匹配成功的第一个分组，这里指的是\\d   <span class=\"number\">2013</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">      <span class=\"regexp\">//</span>第三个参数 : <span class=\"variable\">$1</span>(匹配成功的第二个分组，这里指的是-    - - )   </span><br><span class=\"line\">    return <span class=\"variable\">$1</span> + <span class=\"string\">&#x27;.&#x27;</span>;  <span class=\"regexp\">//</span>分别返回<span class=\"number\">2013</span>.   <span class=\"number\">6</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">alert( str );   <span class=\"regexp\">//</span><span class=\"number\">2013.6</span>.<span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<p>找重复项最多的字符个数</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> split():字符串中的方法，把字符串转成数组。</span><br><span class=\"line\"><span class=\"regexp\">//</span> sort():数组中的排序方法，按照ACALL码进行排序。</span><br><span class=\"line\"><span class=\"regexp\">//</span> join():数组中的方法，把数组转换为字符串</span><br><span class=\"line\"></span><br><span class=\"line\">var str = <span class=\"string\">&#x27;assssjdssskssalsssdkjsssdss&#x27;</span>;</span><br><span class=\"line\">var arr = str.split(<span class=\"string\">&#x27;&#x27;</span>); <span class=\"regexp\">//</span>把字符串转换为数组</span><br><span class=\"line\">str = arr.sort().join(<span class=\"string\">&#x27;&#x27;</span>); <span class=\"regexp\">//</span>首先进行排序，这样结果会把相同的字符放在一起，然后再转换为字符串</span><br><span class=\"line\"><span class=\"regexp\">//</span>alert(str);  <span class=\"regexp\">//</span> aaddjjkklsssssssssssssssss</span><br><span class=\"line\"></span><br><span class=\"line\">var value = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">var index = <span class=\"number\">0</span>;</span><br><span class=\"line\">var re = <span class=\"regexp\">/(\\w)\\1+/g</span>;  <span class=\"regexp\">//</span>匹配字符，且重复这个字符，重复次数至少一次。</span><br><span class=\"line\">str.replace(re,<span class=\"keyword\">function</span>(<span class=\"variable\">$0</span>,<span class=\"variable\">$1</span>)&#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span>alert(<span class=\"variable\">$0</span>);   代表每次匹配成功的结果 : aa dd jj kk l sssssssssssssssss</span><br><span class=\"line\">  <span class=\"regexp\">//</span>alert(<span class=\"variable\">$1</span>);  代表每次匹配成功的第一个子项，也就是\\w:  a d j k l S</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(index&lt;<span class=\"variable\">$0</span>.length)&#123;  <span class=\"regexp\">//</span>如果index保存的值小于<span class=\"variable\">$0</span>的长度就进行下面的操作</span><br><span class=\"line\">    index = <span class=\"variable\">$0</span>.length;  <span class=\"regexp\">//</span> 这样index一直保存的就在最大的长度</span><br><span class=\"line\">    value = <span class=\"variable\">$1</span>;  <span class=\"regexp\">//</span>value保存的是出现最多的这个字符</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(<span class=\"string\">&#x27;最多的字符:&#x27;</span>+value+<span class=\"string\">&#x27;,重复的次数:&#x27;</span>+index);  <span class=\"regexp\">//</span> s   <span class=\"number\">17</span></span><br></pre></td></tr></table></figure>\n\n<p>查找字符串’abc’在字符串’abbbbccbebababccbaabcbccbaabbccabcc’第一次出现的位置</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;abbbbccbebababccbaabcbccbaabbccabcc&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">regex</span>(<span class=\"params\">str1,str2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(str1,<span class=\"string\">&quot;g&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str2.search(regex));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">regex(str,<span class=\"built_in\">string</span>)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数字相关的正则表达式\"><a href=\"#数字相关的正则表达式\" class=\"headerlink\" title=\"数字相关的正则表达式\"></a>数字相关的正则表达式</h2><figure class=\"highlight subunit\"><table><tr><td class=\"code\"><pre><span class=\"line\">去空格： /^\\s+|\\s+$/g</span><br><span class=\"line\">数字： ^[0<span class=\"string\">-9</span>]*$</span><br><span class=\"line\">n位定长的数字： ^\\d&#123;n&#125;$</span><br><span class=\"line\">m-n位之间的数字： ^\\d&#123;m,n&#125;$</span><br><span class=\"line\">零和非零开头的数字： ^(0|[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)$</span><br><span class=\"line\">非零开头的最多带两位小数的数字： ^([1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)+(.[0<span class=\"string\">-9</span>]&#123;1,2&#125;)?$</span><br><span class=\"line\">带1<span class=\"string\">-2</span>位小数的正数或负数： ^(\\-)?\\d+(\\.\\d&#123;1,2&#125;)?$</span><br><span class=\"line\">正数、负数、和小数： ^(\\-|\\+)?\\d+(\\.\\d+)?$</span><br><span class=\"line\">有两位小数的正实数： ^[0<span class=\"string\">-9</span>]+(.[0<span class=\"string\">-9</span>]&#123;2&#125;)?$</span><br><span class=\"line\">有1~3位小数的正实数： ^[0<span class=\"string\">-9</span>]+(.[0<span class=\"string\">-9</span>]&#123;1,3&#125;)?$</span><br><span class=\"line\">正整数： ^\\d+$ 或 ^[1<span class=\"string\">-9</span>]\\d*|0$</span><br><span class=\"line\">负整数： ^-[1<span class=\"string\">-9</span>]\\d*|0$ 或 ^((-\\d+)|(0+))$</span><br><span class=\"line\">正浮点数： </span><br><span class=\"line\">^[1<span class=\"string\">-9</span>]\\d*\\.\\d*|0\\.\\d*[1<span class=\"string\">-9</span>]\\d*$ </span><br><span class=\"line\">^(([0<span class=\"string\">-9</span>]+\\.[0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*\\.[0<span class=\"string\">-9</span>]+)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*))$</span><br><span class=\"line\">负浮点数： </span><br><span class=\"line\">^-([1<span class=\"string\">-9</span>]\\d*\\.\\d*|0\\.\\d*[1<span class=\"string\">-9</span>]\\d*)$</span><br><span class=\"line\"> ^(-(([0<span class=\"string\">-9</span>]+\\.[0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*\\.[0<span class=\"string\">-9</span>]+)|([0<span class=\"string\">-9</span>]*[1<span class=\"string\">-9</span>][0<span class=\"string\">-9</span>]*)))$</span><br><span class=\"line\">浮点数： ^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1<span class=\"string\">-9</span>]\\d*\\.\\d*|0\\.\\d*[1<span class=\"string\">-9</span>]\\d*|0?\\.0+|0)$</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符相关的正则表达式\"><a href=\"#字符相关的正则表达式\" class=\"headerlink\" title=\"字符相关的正则表达式\"></a>字符相关的正则表达式</h2><figure class=\"highlight scss\"><table><tr><td class=\"code\"><pre><span class=\"line\">汉字： ^<span class=\"selector-attr\">[\\u4e00-\\u9fa5]</span>&#123;<span class=\"number\">0</span>,&#125;$</span><br><span class=\"line\">长度为<span class=\"number\">3</span>-<span class=\"number\">20</span>的所有字符： ^.&#123;<span class=\"number\">3</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\">由数字和<span class=\"number\">26</span>个英文字母组成的字符串： ^<span class=\"selector-attr\">[A-Za-z0-9]</span>+$</span><br><span class=\"line\">由数字、<span class=\"number\">26</span>个英文字母或者下划线组成的字符串： ^\\w+$ 或 ^\\w&#123;<span class=\"number\">3</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\">中文、英文、数字包括下划线： ^<span class=\"selector-attr\">[\\u4E00-\\u9FA5A-Za-z0-9_]</span>+$</span><br><span class=\"line\">中文、英文、数字但不包括下划线等符号： </span><br><span class=\"line\">^<span class=\"selector-attr\">[\\u4E00-\\u9FA5A-Za-z0-9]</span>+$ </span><br><span class=\"line\"> ^<span class=\"selector-attr\">[\\u4E00-\\u9FA5A-Za-z0-9]</span>&#123;<span class=\"number\">2</span>,<span class=\"number\">20</span>&#125;$</span><br><span class=\"line\">帐号是否合法(字母开头，允许<span class=\"number\">5</span>-<span class=\"number\">16</span>字节，允许字母数字下划线)： </span><br><span class=\"line\">^<span class=\"selector-attr\">[a-zA-Z]</span><span class=\"selector-attr\">[a-zA-Z0-9_]</span>&#123;<span class=\"number\">4</span>,<span class=\"number\">15</span>&#125;$</span><br><span class=\"line\">密码(以字母开头，长度在<span class=\"number\">6</span>~<span class=\"number\">18</span>之间，只能包含字母、数字和下划线)： </span><br><span class=\"line\">^<span class=\"selector-attr\">[a-zA-Z]</span>\\w&#123;<span class=\"number\">5</span>,<span class=\"number\">17</span>&#125;$</span><br><span class=\"line\">强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在<span class=\"number\">8</span>-<span class=\"number\">10</span>之间)：</span><br><span class=\"line\"> ^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;<span class=\"number\">8</span>,<span class=\"number\">10</span>&#125;$</span><br></pre></td></tr></table></figure>\n<h2 id=\"固定格式约定俗成的正则表达式\"><a href=\"#固定格式约定俗成的正则表达式\" class=\"headerlink\" title=\"固定格式约定俗成的正则表达式\"></a>固定格式约定俗成的正则表达式</h2><figure class=\"highlight gherkin\"><table><tr><td class=\"code\"><pre><span class=\"line\">Email地址： ^\\w+([-+.]\\w+)<span class=\"symbol\">*</span><span class=\"meta\">@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$</span></span><br><span class=\"line\">网站域名： [a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span><br><span class=\"line\">URL网址： ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]<span class=\"symbol\">*</span>)?$</span><br><span class=\"line\">手机号码： </span><br><span class=\"line\">^(13[0-9]|<span class=\"string\">17[0-9]</span>|<span class=\"string\">14[5</span>|<span class=\"string\">7]</span>|<span class=\"string\">15[0</span>|<span class=\"string\">1</span>|<span class=\"string\">2</span>|<span class=\"string\">3</span>|<span class=\"string\">5</span>|<span class=\"string\">6</span>|<span class=\"string\">7</span>|<span class=\"string\">8</span>|<span class=\"string\">9]</span>|<span class=\"string\">18[0</span>|<span class=\"string\">1</span>|<span class=\"string\">2</span>|<span class=\"string\">3</span>|<span class=\"string\">5</span>|<span class=\"string\">6</span>|<span class=\"string\">7</span>|<span class=\"string\">8</span>|<span class=\"string\">9])\\d&#123;8&#125;$</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、</span></span><br><span class=\"line\"><span class=\"string\">”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)： </span></span><br><span class=\"line\"><span class=\"string\">^(\\(\\d&#123;3,4&#125;-)</span>|<span class=\"string\">\\d&#123;3.4&#125;-)?\\d&#123;7,8&#125;$</span></span><br><span class=\"line\"><span class=\"string\">国内电话号码(0511-4405222、021-87888822)： \\d&#123;3&#125;-\\d&#123;8&#125;</span>|<span class=\"string\">\\d&#123;4&#125;-\\d&#123;7&#125;</span></span><br><span class=\"line\"><span class=\"string\">身份证号(15位、18位数字)： ^\\d&#123;15&#125;</span>|<span class=\"string\">\\d&#123;18&#125;$</span></span><br><span class=\"line\"><span class=\"string\">日期格式： ^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125;</span></span><br><span class=\"line\"><span class=\"string\">一年的12个月(01～09和1～12)： ^(0?[1-9]</span>|<span class=\"string\">1[0-2])$</span></span><br><span class=\"line\"><span class=\"string\">一个月的31天(01～09和1～31)： ^((0?[1-9])</span>|<span class=\"string\">((1</span>|<span class=\"string\">2)[0-9])</span>|<span class=\"string\">30</span>|<span class=\"string\">31)$</span></span><br><span class=\"line\"><span class=\"string\">腾讯QQ号： [1-9][0-9]&#123;4,8&#125; (腾讯QQ号从10000开始，目前最长为10位)</span></span><br><span class=\"line\"><span class=\"string\">中国邮政编码： [1-9]\\d&#123;5&#125;(?!\\d) (中国邮政编码为6位数字)</span></span><br><span class=\"line\"><span class=\"string\">IP地址： \\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用)</span></span><br><span class=\"line\"><span class=\"string\">IP地址： ((?:(?:25[0-5]</span>|<span class=\"string\">2[0-4]\\\\d</span>|<span class=\"string\">[01]?\\\\d?\\\\d)\\\\.)&#123;3&#125;(?:25[0-5]</span>|<span class=\"string\">2[0-4]\\\\d</span>|<span class=\"string\">[01]?\\\\d?\\\\d))</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"常用的方法\"><a href=\"#常用的方法\" class=\"headerlink\" title=\"常用的方法\"></a>常用的方法</h2><h3 id=\"1-test\"><a href=\"#1-test\" class=\"headerlink\" title=\"1.test()\"></a>1.test()</h3><h4 id=\"在字符串中查找符合正则的内容，若查找到返回true-反之返回false\"><a href=\"#在字符串中查找符合正则的内容，若查找到返回true-反之返回false\" class=\"headerlink\" title=\"在字符串中查找符合正则的内容，若查找到返回true,反之返回false.\"></a>在字符串中查找符合正则的内容，若查找到返回true,反之返回false.</h4><figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;374829348791&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/\\D/</span>; <span class=\"comment\">//  \\D代表非数字</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (re.test(str)) &#123; <span class=\"comment\">// 返回true,代表在字符串中找到了非数字。</span></span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;不全是数字&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;全是数字&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-search\"><a href=\"#2-search\" class=\"headerlink\" title=\"2.search()\"></a>2.search()</h3><h4 id=\"在字符串搜索符合正则的内容，搜索到就返回出现的位置\"><a href=\"#在字符串搜索符合正则的内容，搜索到就返回出现的位置\" class=\"headerlink\" title=\"在字符串搜索符合正则的内容，搜索到就返回出现的位置\"></a>在字符串搜索符合正则的内容，搜索到就返回出现的位置</h4><h4 id=\"（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置），-如果搜索失败就返回-1\"><a href=\"#（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置），-如果搜索失败就返回-1\" class=\"headerlink\" title=\"（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1\"></a>（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1</h4><figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;abbbbccbebababccbaabcbccbaabbccabcc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">regex</span>(<span class=\"params\">str1, str2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(str1, <span class=\"string\">&quot;g&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str2.search(regex));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">regex(str, <span class=\"built_in\">string</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-match\"><a href=\"#3-match\" class=\"headerlink\" title=\"3.match()\"></a>3.match()</h3><h4 id=\"在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\"><a href=\"#在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\" class=\"headerlink\" title=\"在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。\"></a>在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。</h4><figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">var</span> str = &#x27;haj123sdk54hask33dkhalsd879&#x27;;</span><br><span class=\"line\"><span class=\"attribute\">var</span> re = /\\d+/g; // 每次匹配至少一个数字  且全局匹配  如果不是全局匹配，当找到数字<span class=\"number\">123</span>，它就会停止了。就只会弹出<span class=\"number\">123</span>.加上全局匹配，就会从开始到结束一直去搜索符合规则的。如果没有加号，匹配的结果就是<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>，<span class=\"number\">5</span>，<span class=\"number\">4</span>，<span class=\"number\">3</span>，<span class=\"number\">3</span>，<span class=\"number\">879</span>并不是我们想要的，有了加号，每次匹配的数字就是至少一个了。</span><br><span class=\"line\"><span class=\"attribute\">alert</span>(str.match(re)); //<span class=\"meta\"> [123，54，33，879]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace()\"></a>replace()</h3><h4 id=\"查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。\"><a href=\"#查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。\" class=\"headerlink\" title=\"查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。\"></a>查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。</h4><figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;我爱北京天安门，天安门上太阳升。&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/北京|天安门/g</span>;  <span class=\"comment\">//  找到北京 或者天安门 全局匹配</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = str.<span class=\"built_in\">replace</span>(re,<span class=\"string\">&#x27;*&#x27;</span>); </span><br><span class=\"line\">alert(str2)  <span class=\"comment\">//我爱**，*上太阳升 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这种只是把找到的变成了一个*，并不能几个字就对应几个*。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;我爱北京天安门，天安门上太阳升。&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/北京|天安门/g</span>;  <span class=\"comment\">//  找到北京 或者天安门 全局匹配</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = str.<span class=\"built_in\">replace</span>(re,<span class=\"keyword\">function</span>(<span class=\"params\">str</span>)&#123;</span><br><span class=\"line\">              alert(str); <span class=\"comment\">//用来测试：函数的第一个参数代表每次搜索到的符合正则的字符，所以第一次str指的是北京 第二次str是天安门 第三次str是天安门</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;str.<span class=\"built_in\">length</span>;i++)&#123;</span><br><span class=\"line\">                result += <span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\">            &#125;              </span><br><span class=\"line\">            <span class=\"keyword\">return</span> result; <span class=\"comment\">//所以搜索到了几个字就返回几个* </span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">alert(str2)  <span class=\"comment\">//我爱*****，***上太阳升         </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//整个过程就是，找到北京，替换成了两个*，找到天安门替换成了3个*，找到天安门替换成3个*。</span></span><br></pre></td></tr></table></figure>\n<p>把2013-6-7替换成2013.6.7</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>整个过程就是利用子项把<span class=\"number\">2013</span>- <span class=\"number\">6</span>- 分别替换成了<span class=\"number\">2013</span>. <span class=\"number\">6</span>.  最终弹出<span class=\"number\">2013.6</span>.<span class=\"number\">7</span></span><br><span class=\"line\">var str = <span class=\"string\">&#x27;2013-6-7&#x27;</span>;</span><br><span class=\"line\">var re = <span class=\"regexp\">/(\\d+)(-)/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">str = str.replace(re,<span class=\"keyword\">function</span>(<span class=\"variable\">$0</span>,<span class=\"variable\">$1</span>,<span class=\"variable\">$2</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"regexp\">//</span>replace()中如果有子项，</span><br><span class=\"line\">      <span class=\"regexp\">//</span>第一个参数：<span class=\"variable\">$0</span>（匹配成功后的整体结果  <span class=\"number\">2013</span>-  <span class=\"number\">6</span>-）,</span><br><span class=\"line\">      <span class=\"regexp\">//</span> 第二个参数 : <span class=\"variable\">$1</span>(匹配成功的第一个分组，这里指的是\\d   <span class=\"number\">2013</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">      <span class=\"regexp\">//</span>第三个参数 : <span class=\"variable\">$1</span>(匹配成功的第二个分组，这里指的是-    - - )   </span><br><span class=\"line\">    return <span class=\"variable\">$1</span> + <span class=\"string\">&#x27;.&#x27;</span>;  <span class=\"regexp\">//</span>分别返回<span class=\"number\">2013</span>.   <span class=\"number\">6</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">alert( str );   <span class=\"regexp\">//</span><span class=\"number\">2013.6</span>.<span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n\n<p>找重复项最多的字符个数</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> split():字符串中的方法，把字符串转成数组。</span><br><span class=\"line\"><span class=\"regexp\">//</span> sort():数组中的排序方法，按照ACALL码进行排序。</span><br><span class=\"line\"><span class=\"regexp\">//</span> join():数组中的方法，把数组转换为字符串</span><br><span class=\"line\"></span><br><span class=\"line\">var str = <span class=\"string\">&#x27;assssjdssskssalsssdkjsssdss&#x27;</span>;</span><br><span class=\"line\">var arr = str.split(<span class=\"string\">&#x27;&#x27;</span>); <span class=\"regexp\">//</span>把字符串转换为数组</span><br><span class=\"line\">str = arr.sort().join(<span class=\"string\">&#x27;&#x27;</span>); <span class=\"regexp\">//</span>首先进行排序，这样结果会把相同的字符放在一起，然后再转换为字符串</span><br><span class=\"line\"><span class=\"regexp\">//</span>alert(str);  <span class=\"regexp\">//</span> aaddjjkklsssssssssssssssss</span><br><span class=\"line\"></span><br><span class=\"line\">var value = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">var index = <span class=\"number\">0</span>;</span><br><span class=\"line\">var re = <span class=\"regexp\">/(\\w)\\1+/g</span>;  <span class=\"regexp\">//</span>匹配字符，且重复这个字符，重复次数至少一次。</span><br><span class=\"line\">str.replace(re,<span class=\"keyword\">function</span>(<span class=\"variable\">$0</span>,<span class=\"variable\">$1</span>)&#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span>alert(<span class=\"variable\">$0</span>);   代表每次匹配成功的结果 : aa dd jj kk l sssssssssssssssss</span><br><span class=\"line\">  <span class=\"regexp\">//</span>alert(<span class=\"variable\">$1</span>);  代表每次匹配成功的第一个子项，也就是\\w:  a d j k l S</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(index&lt;<span class=\"variable\">$0</span>.length)&#123;  <span class=\"regexp\">//</span>如果index保存的值小于<span class=\"variable\">$0</span>的长度就进行下面的操作</span><br><span class=\"line\">    index = <span class=\"variable\">$0</span>.length;  <span class=\"regexp\">//</span> 这样index一直保存的就在最大的长度</span><br><span class=\"line\">    value = <span class=\"variable\">$1</span>;  <span class=\"regexp\">//</span>value保存的是出现最多的这个字符</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(<span class=\"string\">&#x27;最多的字符:&#x27;</span>+value+<span class=\"string\">&#x27;,重复的次数:&#x27;</span>+index);  <span class=\"regexp\">//</span> s   <span class=\"number\">17</span></span><br></pre></td></tr></table></figure>\n\n<p>查找字符串’abc’在字符串’abbbbccbebababccbaabcbccbaabbccabcc’第一次出现的位置</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;abbbbccbebababccbaabcbccbaabbccabcc&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">regex</span>(<span class=\"params\">str1,str2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> regex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(str1,<span class=\"string\">&quot;g&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(str2.search(regex));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">regex(str,<span class=\"built_in\">string</span>)</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl1jg62o200036kvo79qs7dt5","category_id":"cl1jg62o700066kvofvppfjbp","_id":"cl1jg62oa000a6kvo1ro3ehaz"},{"post_id":"cl1jg62o500056kvoe925eckm","category_id":"cl1jg62o900086kvohq1807rz","_id":"cl1jg62ob000c6kvodu482n8k"}],"PostTag":[{"post_id":"cl1jg62o200036kvo79qs7dt5","tag_id":"cl1jg62o800076kvo78ssbuhu","_id":"cl1jg62ob000f6kvo3iheg897"},{"post_id":"cl1jg62o200036kvo79qs7dt5","tag_id":"cl1jg62oa00096kvo00huftbx","_id":"cl1jg62oc000g6kvo87o6a36y"},{"post_id":"cl1jg62o200036kvo79qs7dt5","tag_id":"cl1jg62oa000b6kvo1wu6dceg","_id":"cl1jg62oc000h6kvo4qjyh1nl"},{"post_id":"cl1jg62o200036kvo79qs7dt5","tag_id":"cl1jg62ob000d6kvog1q76hwd","_id":"cl1jg62oc000i6kvofywghnya"},{"post_id":"cl1jg62o500056kvoe925eckm","tag_id":"cl1jg62ob000e6kvoco6ieyy4","_id":"cl1jg62oc000j6kvodlhc9a0v"}],"Tag":[{"name":"Hexo","_id":"cl1jg62o800076kvo78ssbuhu"},{"name":"Quiet","_id":"cl1jg62oa00096kvo00huftbx"},{"name":"主题","_id":"cl1jg62oa000b6kvo1wu6dceg"},{"name":"静态主题","_id":"cl1jg62ob000d6kvog1q76hwd"},{"name":"正则表达式","_id":"cl1jg62ob000e6kvoco6ieyy4"}]}}